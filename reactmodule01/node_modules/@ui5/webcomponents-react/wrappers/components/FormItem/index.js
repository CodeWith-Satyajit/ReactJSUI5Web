import React, { cloneElement, isValidElement } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { WrappingType } from '../../enums/WrappingType';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
const CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);
const useStyles = createUseStyles({
    label: {
        gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
        justifySelf: 'var(--ui5wcr_form_label_text_align)',
        textAlign: 'var(--ui5wcr_form_label_text_align)'
    },
    content: {
        display: 'flex',
        gridColumnEnd: 'span var(--ui5wcr_form_content_span)'
    }
}, { name: 'FormItem' });
const renderLabel = (label, classes, styles) => {
    if (typeof label === 'string') {
        return (React.createElement(Label, { className: classes.label, style: styles, wrappingType: WrappingType.Normal }, label ? `${label}:` : ''));
    }
    if (isValidElement(label)) {
        const { showColon, wrappingType, className, style, children } = label.props;
        return cloneElement(label, {
            showColon: showColon !== null && showColon !== void 0 ? showColon : true,
            wrappingType: wrappingType !== null && wrappingType !== void 0 ? wrappingType : WrappingType.Normal,
            className: `${classes.label} ${className !== null && className !== void 0 ? className : ''}`,
            style: Object.assign({ gridColumnStart: styles.gridColumnStart, gridRowStart: styles.gridRowStart }, (style || {}))
        }, children !== null && children !== void 0 ? children : '');
    }
    return null;
};
/**
 * The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.
 */
const FormItem = (props) => {
    // eslint-disable-next-line react/prop-types
    const { label, children, columnIndex, rowIndex, labelSpan, lastGroupItem } = props;
    const classes = useStyles();
    const gridColumnStart = (columnIndex !== null && columnIndex !== void 0 ? columnIndex : 0) * 12 + 1;
    const gridRowStart = rowIndex !== null && rowIndex !== void 0 ? rowIndex : 0;
    const contentGridColumnStart = columnIndex != null ? (labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan !== null && labelSpan !== void 0 ? labelSpan : 0)) : undefined;
    if (labelSpan === 12) {
        return (React.createElement(FlexBox, { direction: FlexBoxDirection.Column, alignItems: FlexBoxAlignItems.Start, style: {
                gridColumnStart,
                gridRowStart,
                gridColumnEnd: 'span 12',
                placeItems: 'flex-start',
                paddingBottom: '0.625rem'
            } },
            renderLabel(label, classes, { paddingBottom: '0.25rem' }),
            children));
    }
    const inlineLabelStyles = () => {
        var _a;
        const styles = { gridColumnStart, gridRowStart, paddingBottom: lastGroupItem ? '1rem' : 0 };
        if (CENTER_ALIGNED_CHILDREN.has((_a = children === null || children === void 0 ? void 0 : children.type) === null || _a === void 0 ? void 0 : _a.displayName)) {
            return Object.assign(Object.assign({}, styles), { alignSelf: 'center' });
        }
        return styles;
    };
    const calculatedGridRowStart = labelSpan === 12 ? gridRowStart + 1 : gridRowStart;
    return (React.createElement(React.Fragment, null,
        renderLabel(label, classes, inlineLabelStyles()),
        React.createElement("div", { "data-grid-column-start": contentGridColumnStart, "data-grid-row-start": calculatedGridRowStart, className: classes.content, style: {
                gridColumnStart: contentGridColumnStart,
                gridRowStart: calculatedGridRowStart,
                paddingBottom: lastGroupItem ? '1rem' : 0
            } }, children)));
};
FormItem.displayName = 'FormItem';
export { FormItem };
