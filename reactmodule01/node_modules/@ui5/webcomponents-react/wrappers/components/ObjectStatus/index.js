var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import alertIcon from '@ui5/webcomponents-icons/dist/alert.js';
import errorIcon from '@ui5/webcomponents-icons/dist/error.js';
import informationIcon from '@ui5/webcomponents-icons/dist/information.js';
import successIcon from '@ui5/webcomponents-icons/dist/sys-enter-2.js';
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { ValueState } from '../../enums/ValueState';
import { Icon } from '../../webComponents/Icon';
import styles from './ObjectStatus.jss';
const getDefaultIcon = (state) => {
    switch (state) {
        case ValueState.Error:
            return React.createElement(Icon, { name: errorIcon });
        case ValueState.Success:
            return React.createElement(Icon, { name: successIcon });
        case ValueState.Warning:
            return React.createElement(Icon, { name: alertIcon });
        case ValueState.Information:
            return React.createElement(Icon, { name: informationIcon });
        default:
            return null;
    }
};
const useStyles = createUseStyles(styles, { name: 'ObjectStatus' });
/**
 * Status information that can be either text with a value state, or an icon.
 */
const ObjectStatus = forwardRef((props, ref) => {
    const { state, showDefaultIcon, children, icon, className, style, active, inverted, onClick } = props, rest = __rest(props, ["state", "showDefaultIcon", "children", "icon", "className", "style", "active", "inverted", "onClick"]);
    const iconToRender = (() => {
        if (icon) {
            return icon;
        }
        if (showDefaultIcon) {
            return getDefaultIcon(state);
        }
        return null;
    })();
    const classes = useStyles();
    const objStatusClasses = clsx(classes.objectStatus, classes[`${state}`.toLowerCase()], active && classes.active, inverted && classes.inverted, className);
    return (React.createElement("div", Object.assign({ ref: ref, className: objStatusClasses, style: style, onClick: active ? onClick : undefined }, rest),
        iconToRender && React.createElement("span", { className: classes.icon }, iconToRender),
        children && React.createElement("span", { className: classes.text }, children)));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
    state: ValueState.None
};
export { ObjectStatus };
