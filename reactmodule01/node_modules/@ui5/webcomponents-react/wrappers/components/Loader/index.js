var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useI18nBundle } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { forwardRef, useEffect, useMemo, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { LoaderType } from '../../enums/LoaderType';
import { PLEASE_WAIT } from '../../i18n/i18n-defaults';
import { styles } from './Loader.jss';
const useStyles = createUseStyles(styles, { name: 'Loader' });
/**
 * The `Loader` signals that an operation is currently being executed. It uses as little space as possible to allow the user to interact with the UI.<br />
 * It can be used to signal a data update on an already existing dataset, or where an expansion will happen.
 */
const Loader = forwardRef((props, ref) => {
    const { className, type, progress, slot, style, delay } = props, rest = __rest(props, ["className", "type", "progress", "slot", "style", "delay"]);
    const classes = useStyles();
    const [isVisible, setIsVisible] = useState(delay === 0);
    const loaderClasses = clsx(classes.loader, className, classes[`loader${type}`]);
    const inlineStyles = useMemo(() => {
        const backgroundSize = type !== LoaderType.Determinate ? '40%' : progress;
        return Object.assign(Object.assign({}, style), { backgroundSize });
    }, [progress, style, type]);
    useEffect(() => {
        let timeout;
        if (delay > 0) {
            timeout = setTimeout(() => {
                setIsVisible(true);
            }, delay);
        }
        return () => {
            clearTimeout(timeout);
        };
    }, []);
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    if (!isVisible) {
        return null;
    }
    return (React.createElement("div", Object.assign({ ref: ref, className: loaderClasses, "data-component-name": "Loader", "aria-busy": "true", role: "progressbar", title: i18nBundle.getText(PLEASE_WAIT), slot: slot, style: inlineStyles }, rest)));
});
Loader.defaultProps = {
    type: LoaderType.Indeterminate,
    progress: '0px',
    delay: 0
};
Loader.displayName = 'Loader';
export { Loader };
