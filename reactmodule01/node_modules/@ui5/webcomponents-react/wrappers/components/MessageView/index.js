var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import '@ui5/webcomponents-icons/dist/alert.js';
import '@ui5/webcomponents-icons/dist/error.js';
import '@ui5/webcomponents-icons/dist/information.js';
import '@ui5/webcomponents-icons/dist/slim-arrow-left.js';
import '@ui5/webcomponents-icons/dist/sys-enter-2.js';
import { ThemingParameters, useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { Children, forwardRef, Fragment, useCallback, useEffect, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { TitleLevel } from '../../enums/TitleLevel';
import { ValueState } from '../../enums/ValueState';
import { ALL, LIST_NO_DATA } from '../../i18n/i18n-defaults';
import { MessageViewContext } from '../../internal/MessageViewContext';
import { Bar } from '../../webComponents/Bar';
import { Button } from '../../webComponents/Button';
import { GroupHeaderListItem } from '../../webComponents/GroupHeaderListItem';
import { Icon } from '../../webComponents/Icon';
import { List } from '../../webComponents/List';
import { SegmentedButton } from '../../webComponents/SegmentedButton';
import { SegmentedButtonItem } from '../../webComponents/SegmentedButtonItem';
import { Title } from '../../webComponents/Title';
import { FlexBox } from '../FlexBox';
import { getIconNameForType } from './utils';
export const resolveMessageTypes = (children) => {
    return (children !== null && children !== void 0 ? children : [])
        .map((message) => { var _a; return (_a = message === null || message === void 0 ? void 0 : message.props) === null || _a === void 0 ? void 0 : _a.type; })
        .reduce((acc, type) => {
        const finalType = type === ValueState.None ? ValueState.Information : type;
        if (acc.hasOwnProperty(finalType)) {
            acc[finalType]++;
        }
        return acc;
    }, {
        [ValueState.Error]: 0,
        [ValueState.Warning]: 0,
        [ValueState.Success]: 0,
        [ValueState.Information]: 0
    });
};
export const resolveMessageGroups = (children) => {
    const groups = (children !== null && children !== void 0 ? children : []).reduce((acc, val) => {
        var _a, _b;
        const groupName = (_b = (_a = val === null || val === void 0 ? void 0 : val.props) === null || _a === void 0 ? void 0 : _a.groupName) !== null && _b !== void 0 ? _b : '';
        if (acc.hasOwnProperty(groupName)) {
            acc[groupName].push(val);
        }
        else {
            acc[groupName] = [val];
        }
        return acc;
    }, {});
    return Object.entries(groups).sort((a, b) => {
        return a[0].localeCompare(b[0]);
    });
};
const useStyles = createUseStyles({
    container: {
        width: '100%',
        overflowX: 'hidden',
        overflowY: 'auto',
        display: 'flex',
        height: '100%',
        '& > *': {
            width: '100%',
            flexShrink: 0,
            transition: 'transform 200ms ease-in-out'
        }
    },
    showDetails: {
        '& > *': {
            transform: 'translateX(-100%)'
        }
    },
    button: {
        '&[data-key="Error"]:not([pressed])': { color: ThemingParameters.sapNegativeElementColor },
        '&[data-key="Warning"]:not([pressed])': { color: ThemingParameters.sapCriticalElementColor },
        '&[data-key="Success"]:not([pressed])': { color: ThemingParameters.sapPositiveElementColor },
        '&[data-key="Information"]:not([pressed])': { color: ThemingParameters.sapNeutralElementColor }
    },
    detailsContainer: {
        padding: '1rem'
    },
    detailsIcon: {
        flexShrink: 0,
        margin: '0 1rem 0 0.5rem',
        '&[data-type="Error"]': { color: ThemingParameters.sapNegativeElementColor },
        '&[data-type="Warning"]': { color: ThemingParameters.sapCriticalElementColor },
        '&[data-type="Success"]': { color: ThemingParameters.sapPositiveElementColor },
        '&[data-type="Information"]': { color: ThemingParameters.sapNeutralElementColor }
    },
    detailsTitle: {
        marginBottom: '1rem'
    },
    detailsText: {
        fontFamily: ThemingParameters.sapFontFamily,
        fontSize: ThemingParameters.sapFontSize,
        lineHeight: 1.4,
        color: ThemingParameters.sapTextColor,
        marginBottom: '1rem'
    }
}, { name: 'MessageView' });
const MessageView = forwardRef((props, ref) => {
    const { children, groupItems, showDetailsPageHeader, className, onItemSelect } = props, rest = __rest(props, ["children", "groupItems", "showDetailsPageHeader", "className", "onItemSelect"]);
    const [componentRef, internalRef] = useSyncRef(ref);
    const classes = useStyles();
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const [listFilter, setListFilter] = useState('All');
    const [selectedMessage, setSelectedMessage] = useState(null);
    const childrenArray = Children.toArray(children);
    const messageTypes = resolveMessageTypes(childrenArray);
    const filledTypes = Object.values(messageTypes).filter((count) => count > 0).length;
    const filteredChildren = listFilter === 'All'
        ? childrenArray
        : childrenArray.filter((message) => {
            var _a, _b, _c;
            if (listFilter === ValueState.Information) {
                return ((_a = message === null || message === void 0 ? void 0 : message.props) === null || _a === void 0 ? void 0 : _a.type) === ValueState.Information || ((_b = message === null || message === void 0 ? void 0 : message.props) === null || _b === void 0 ? void 0 : _b.type) === ValueState.None;
            }
            return ((_c = message === null || message === void 0 ? void 0 : message.props) === null || _c === void 0 ? void 0 : _c.type) === listFilter;
        });
    const groupedMessages = resolveMessageGroups(filteredChildren);
    const navigateBack = useCallback(() => {
        setSelectedMessage(null);
    }, [setSelectedMessage]);
    useEffect(() => {
        if (internalRef.current) {
            internalRef.current.navigateBack = navigateBack;
        }
    }, [internalRef.current, navigateBack]);
    const handleListFilterChange = (e) => {
        setListFilter(e.detail.selectedItem.dataset.key);
    };
    const outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);
    return (React.createElement("div", Object.assign({ ref: componentRef }, rest, { className: outerClasses }),
        React.createElement(MessageViewContext.Provider, { value: {
                selectMessage: setSelectedMessage
            } },
            React.createElement("div", null,
                filledTypes > 1 && (React.createElement(Bar, { startContent: React.createElement(SegmentedButton, { onSelectionChange: handleListFilterChange },
                        React.createElement(SegmentedButtonItem, { "data-key": "All", pressed: listFilter === 'All' }, i18nBundle.getText(ALL)),
                        Object.entries(messageTypes).map(([valueState, count]) => {
                            if (count === 0) {
                                return null;
                            }
                            return (React.createElement(SegmentedButtonItem, { key: valueState, "data-key": valueState, pressed: listFilter === valueState, icon: getIconNameForType(valueState), className: classes.button }, count));
                        })) })),
                React.createElement(List, { onItemClick: onItemSelect, noDataText: i18nBundle.getText(LIST_NO_DATA) }, groupItems
                    ? groupedMessages.map(([groupName, items]) => {
                        return (React.createElement(Fragment, { key: groupName },
                            groupName && React.createElement(GroupHeaderListItem, null, groupName),
                            items));
                    })
                    : filteredChildren)),
            React.createElement("div", null, childrenArray.length > 0 ? (React.createElement(React.Fragment, null,
                showDetailsPageHeader && (React.createElement(Bar, { startContent: React.createElement(Button, { design: ButtonDesign.Transparent, icon: "slim-arrow-left", onClick: navigateBack }) })),
                selectedMessage && (React.createElement(FlexBox, { className: classes.detailsContainer },
                    React.createElement(Icon, { "data-type": selectedMessage.type, name: getIconNameForType(selectedMessage.type), className: classes.detailsIcon }),
                    React.createElement(FlexBox, { direction: FlexBoxDirection.Column },
                        React.createElement(Title, { level: TitleLevel.H5, className: classes.detailsTitle }, selectedMessage.titleText),
                        React.createElement("div", { className: classes.detailsText }, selectedMessage.children)))))) : null))));
});
MessageView.displayName = 'MessageView';
MessageView.defaultProps = {
    showDetailsPageHeader: false,
    groupItems: false
};
export { MessageView };
