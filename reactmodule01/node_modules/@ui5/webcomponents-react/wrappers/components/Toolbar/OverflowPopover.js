import '@ui5/webcomponents-icons/dist/overflow.js';
import { Device, useIsomorphicId } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { cloneElement, useCallback, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { ButtonDesign, PopoverPlacementType } from '../../enums';
import { OverflowPopoverContext } from '../../internal/OverflowPopoverContext';
import { stopPropagation } from '../../internal/stopPropagation';
import { Popover, ToggleButton } from '../../webComponents';
const isPhone = Device.isPhone();
export const OverflowPopover = (props) => {
    var _a, _b, _c, _d;
    const { lastVisibleIndex, classes, children, portalContainer, overflowContentRef, numberOfAlwaysVisibleItems, showMoreText, overflowPopoverRef, overflowButton } = props;
    const uniqueId = useIsomorphicId();
    const [pressed, setPressed] = useState(false);
    const toggleBtnRef = useRef(null);
    const handleToggleButtonClick = (e) => {
        e.stopPropagation();
        if (!pressed) {
            setPressed(true);
        }
        else {
            setPressed(false);
        }
    };
    const handleBeforeOpen = () => {
        if (toggleBtnRef.current) {
            toggleBtnRef.current.accessibilityAttributes = { expanded: true, hasPopup: 'menu' };
        }
    };
    const handleAfterOpen = () => {
        setPressed(true);
    };
    const handleClose = (e) => {
        if (toggleBtnRef.current) {
            toggleBtnRef.current.accessibilityAttributes = { expanded: false, hasPopup: 'menu' };
        }
        stopPropagation(e);
        setPressed(false);
    };
    const renderChildren = useCallback(() => {
        return children.map((item, index) => {
            if (index > lastVisibleIndex && index > numberOfAlwaysVisibleItems - 1) {
                if (item.type.displayName === 'ToolbarSeparator') {
                    return React.cloneElement(item, {
                        style: {
                            height: '0.0625rem',
                            margin: '0.375rem 0.1875rem',
                            width: '100%'
                        }
                    });
                }
                return item;
            }
            return null;
        });
    }, [children, lastVisibleIndex]);
    useEffect(() => {
        customElements.whenDefined('ui5-toggle-button').then(() => {
            if (toggleBtnRef.current) {
                toggleBtnRef.current.accessibilityAttributes = { expanded: pressed, hasPopup: 'menu' };
            }
        });
    }, []);
    const clonedOverflowButtonClick = (e) => {
        var _a;
        if (typeof ((_a = overflowButton === null || overflowButton === void 0 ? void 0 : overflowButton.props) === null || _a === void 0 ? void 0 : _a.onClick) === 'function') {
            overflowButton.props.onClick(e);
        }
        if (!e.defaultPrevented) {
            handleToggleButtonClick(e);
        }
    };
    return (React.createElement(OverflowPopoverContext.Provider, { value: { inPopover: true } },
        overflowButton ? (cloneElement(overflowButton, { onClick: clonedOverflowButtonClick, id: (_b = (_a = overflowButton === null || overflowButton === void 0 ? void 0 : overflowButton.props) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : uniqueId })) : (React.createElement(ToggleButton, { ref: toggleBtnRef, design: ButtonDesign.Transparent, icon: "overflow", onClick: handleToggleButtonClick, pressed: pressed, accessibleName: showMoreText, tooltip: showMoreText, id: uniqueId })),
        createPortal(React.createElement(Popover, { className: clsx(classes.popover, isPhone && classes.popoverPhone), placementType: PopoverPlacementType.Bottom, ref: overflowPopoverRef, open: pressed, opener: (_d = (_c = overflowButton === null || overflowButton === void 0 ? void 0 : overflowButton.props) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : uniqueId, onAfterClose: handleClose, onBeforeOpen: handleBeforeOpen, onAfterOpen: handleAfterOpen, hideArrow: true },
            React.createElement("div", { className: classes.popoverContent, ref: overflowContentRef }, renderChildren())), portalContainer)));
};
