var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { TextStyles } from './Text.jss';
const useStyles = createUseStyles(TextStyles, { name: 'Text' });
/**
 * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.
 * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.
 */
const Text = forwardRef((props, ref) => {
    const { children, renderWhitespace, wrapping, className, style, slot } = props, rest = __rest(props, ["children", "renderWhitespace", "wrapping", "className", "style", "slot"]);
    const classes = useStyles();
    const classNameString = clsx(classes.text, wrapping === false && classes.noWrap, renderWhitespace && classes.renderWhitespace, className);
    return (React.createElement("span", Object.assign({ ref: ref, style: style, className: classNameString, slot: slot }, rest), children));
});
Text.defaultProps = {
    renderWhitespace: false,
    wrapping: true
};
Text.displayName = 'Text';
export { Text };
