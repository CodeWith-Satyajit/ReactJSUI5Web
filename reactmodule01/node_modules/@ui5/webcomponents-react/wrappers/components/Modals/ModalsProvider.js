import React, { useReducer, useRef } from 'react';
import { createPortal } from 'react-dom';
import { ModalsContext } from '../../internal/ModalsContext';
const modalStateReducer = (state, action) => {
    switch (action.type) {
        case 'set':
            return [...state, action.payload];
        case 'reset':
            return state.filter((modal) => modal.id !== action.payload.id);
        default:
            return state;
    }
};
export function ModalsProvider({ children }) {
    var _a;
    const [modals, setModal] = useReducer(modalStateReducer, []);
    const isSyncedWithWindow = useRef(false);
    if (!isSyncedWithWindow.current && typeof window !== 'undefined') {
        (_a = window['@ui5/webcomponents-react']) !== null && _a !== void 0 ? _a : (window['@ui5/webcomponents-react'] = {});
        window['@ui5/webcomponents-react'].ModalsContext = ModalsContext;
        window['@ui5/webcomponents-react'].setModal = setModal;
        isSyncedWithWindow.current = true;
    }
    return (React.createElement(ModalsContext.Provider, { value: { setModal } },
        modals.map((modal) => {
            var _a;
            if (modal === null || modal === void 0 ? void 0 : modal.Component) {
                return createPortal(React.createElement(modal.Component, Object.assign({}, modal.props, { key: modal.id, "data-id": modal.id })), (_a = modal.container) !== null && _a !== void 0 ? _a : document.body);
            }
        }),
        children));
}
