var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import alertIcon from '@ui5/webcomponents-icons/dist/alert.js';
import errorIcon from '@ui5/webcomponents-icons/dist/error.js';
import informationIcon from '@ui5/webcomponents-icons/dist/information.js';
import sysEnter2Icon from '@ui5/webcomponents-icons/dist/sys-enter-2.js';
import { ThemingParameters } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { Button } from '../..';
import { ValueState } from '../../enums';
const buttonStyles = Object.values(ValueState).reduce((acc, cur) => {
    let cssType;
    switch (cur) {
        case ValueState.Error:
            cssType = 'Negative';
            break;
        case ValueState.Success:
            cssType = 'Success';
            break;
        case ValueState.Warning:
            cssType = 'Critical';
            break;
        default:
            cssType = 'Neutral';
    }
    const standard = `&[data-type="${cur}"]`;
    const hover = `&[data-type="${cur}"]:hover`;
    const active = `&[data-type="${cur}"]:active`;
    return Object.assign(Object.assign({}, acc), { [standard]: {
            color: ThemingParameters[`sapButton_${cssType}_TextColor`],
            background: ThemingParameters[`sapButton_${cssType}_Background`],
            borderColor: ThemingParameters[`sapButton_${cssType}_BorderColor`]
        }, [hover]: {
            color: ThemingParameters[`sapButton_${cssType}_Hover_TextColor`],
            background: ThemingParameters[`sapButton_${cssType}_Hover_Background`],
            borderColor: ThemingParameters[`sapButton_${cssType}_Hover_BorderColor`]
        }, [active]: {
            color: ThemingParameters[`sapButton_${cssType}_Active_TextColor`],
            background: ThemingParameters[`sapButton_${cssType}_Active_Background`],
            borderColor: ThemingParameters[`sapButton_${cssType}_Active_BorderColor`]
        } });
}, {});
const useStyles = createUseStyles({
    btn: Object.assign({}, buttonStyles)
}, { name: 'MessageViewButtonStyles' });
const getIcon = (type) => {
    switch (type) {
        case ValueState.Error:
            return errorIcon;
        case ValueState.Success:
            return sysEnter2Icon;
        case ValueState.Warning:
            return alertIcon;
        default:
            return informationIcon;
    }
};
/**
 * The `MessageViewButton` can be used for opening a `Popover` containing the `MessageView` component. It should always reflect the message `type` with the highest severity.
 */
const MessageViewButton = forwardRef((props, ref) => {
    const { type, counter, className } = props, rest = __rest(props, ["type", "counter", "className"]);
    const classes = useStyles();
    const classNames = clsx(classes.btn, className);
    const icon = getIcon(type);
    return (React.createElement(Button, Object.assign({ ref: ref, className: classNames, icon: icon }, rest, { "data-type": type }), counter > 1 && counter));
});
MessageViewButton.defaultProps = {
    type: ValueState.Error
};
MessageViewButton.displayName = 'MessageViewButton';
export { MessageViewButton };
