import { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';
import React, { useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign } from '../../enums';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { FlexBoxAlignItems } from '../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { APPLY_AUTOMATICALLY, CANCEL, FILE_ALREADY_EXISTS, PUBLIC, SAVE, SAVE_VIEW, SET_AS_DEFAULT, SPECIFY_VIEW_NAME, VIEW } from '../../i18n/i18n-defaults';
import { Bar } from '../../webComponents/Bar';
import { Button } from '../../webComponents/Button';
import { CheckBox } from '../../webComponents/CheckBox';
import { Dialog } from '../../webComponents/Dialog';
import { Input } from '../../webComponents/Input';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
const useStyles = createUseStyles({
    dialog: {
        '&::part(footer)': {
            borderBlockStart: 'none',
            padding: 0
        }
    },
    input: { width: '100%', marginBlock: '0.1875rem' },
    checkBoxesContainer: { paddingInline: '0.5rem' }
}, { name: 'SaveViewDialogStyles' });
export const SaveViewDialog = (props) => {
    const { onAfterClose, handleSave, selectedVariant, showShare, showApplyAutomatically, showSetAsDefault, variantNames, portalContainer } = props;
    const saveViewDialogRef = useRef(null);
    const inputRef = useRef(undefined);
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const classes = useStyles();
    const uniqueId = useIsomorphicId();
    const cancelText = i18nBundle.getText(CANCEL);
    const saveText = i18nBundle.getText(SAVE);
    const headingText = i18nBundle.getText(SAVE_VIEW);
    const defaultCbLabel = i18nBundle.getText(SET_AS_DEFAULT);
    const publicCbLabel = i18nBundle.getText(PUBLIC);
    const applyAutomaticallyCbLabel = i18nBundle.getText(APPLY_AUTOMATICALLY);
    const inputLabelText = i18nBundle.getText(VIEW);
    const errorTextAlreadyExists = i18nBundle.getText(FILE_ALREADY_EXISTS);
    const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);
    const [isDefault, setDefault] = useState(selectedVariant.isDefault);
    const [isPublic, setPublic] = useState(selectedVariant.global);
    const [applyAutomatically, setApplyAutomatically] = useState(selectedVariant.applyAutomatically);
    const [variantName, setVariantName] = useState(selectedVariant.children);
    const [variantNameInvalid, setVariantNameInvalid] = useState(false);
    const handleInputChange = (e) => {
        setVariantName(e.target.value);
        if (variantNames.includes(e.target.value)) {
            setVariantNameInvalid(errorTextAlreadyExists);
        }
        else if (e.target.value.length === 0) {
            setVariantNameInvalid(errorTextEmpty);
        }
        else {
            setVariantNameInvalid(false);
        }
    };
    const onSave = (e) => {
        var _a, _b;
        if (variantNames.includes(variantName)) {
            setVariantNameInvalid(errorTextAlreadyExists);
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        else if (variantName.length === 0) {
            setVariantNameInvalid(errorTextEmpty);
            (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        else {
            setVariantNameInvalid(false);
            handleSave(e, Object.assign(Object.assign({}, selectedVariant), { children: variantName, isDefault, global: isPublic, applyAutomatically }));
        }
    };
    const handleCancel = () => {
        saveViewDialogRef.current.close();
    };
    const handleChangeDefault = (e) => {
        setDefault(e.target.checked);
    };
    const handleChangePublic = (e) => {
        setPublic(e.target.checked);
    };
    const handleChangeApplyAutomatically = (e) => {
        setApplyAutomatically(e.target.checked);
    };
    useEffect(() => {
        saveViewDialogRef.current.show();
        return () => {
            var _a;
            (_a = saveViewDialogRef.current) === null || _a === void 0 ? void 0 : _a.close();
        };
    }, []);
    return createPortal(React.createElement(Dialog, { className: classes.dialog, ref: saveViewDialogRef, headerText: headingText, onAfterClose: onAfterClose, footer: React.createElement(Bar, { design: BarDesign.Footer, endContent: React.createElement(React.Fragment, null,
                React.createElement(Button, { design: ButtonDesign.Emphasized, onClick: onSave }, saveText),
                React.createElement(Button, { design: ButtonDesign.Transparent, onClick: handleCancel }, cancelText)) }) },
        React.createElement(FlexBox, { direction: FlexBoxDirection.Column, alignItems: FlexBoxAlignItems.Start },
            React.createElement(Label, { for: `view-${uniqueId}`, showColon: true }, inputLabelText),
            React.createElement(Input, { accessibleName: inputLabelText, ref: inputRef, className: classes.input, id: `view-${uniqueId}`, value: variantName, valueState: !variantNameInvalid ? 'None' : 'Error', valueStateMessage: React.createElement("div", null, variantNameInvalid), onInput: handleInputChange }),
            React.createElement(FlexBox, { alignItems: FlexBoxAlignItems.Start, direction: FlexBoxDirection.Column, className: classes.checkBoxesContainer },
                showSetAsDefault && React.createElement(CheckBox, { onChange: handleChangeDefault, text: defaultCbLabel, checked: isDefault }),
                showShare && React.createElement(CheckBox, { onChange: handleChangePublic, text: publicCbLabel, checked: isPublic }),
                showApplyAutomatically && (React.createElement(CheckBox, { onChange: handleChangeApplyAutomatically, text: applyAutomaticallyCbLabel, checked: applyAutomatically }))))), portalContainer);
};
