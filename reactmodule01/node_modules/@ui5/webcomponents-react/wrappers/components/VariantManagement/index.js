var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import navDownIcon from '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, ButtonDesign, IllustrationMessageType, ListMode, PopoverPlacementType, TitleLevel } from '../../enums';
import { MANAGE, MY_VIEWS, SAVE, SAVE_AS, SEARCH, SEARCH_VARIANT, SELECT_VIEW } from '../../i18n/i18n-defaults';
import { stopPropagation } from '../../internal/stopPropagation';
import { VariantManagementContext } from '../../internal/VariantManagementContext';
import { Bar, Button, Icon, IllustratedMessage, Input, List, ResponsivePopover, Title } from '../../webComponents';
import { FlexBox } from '../FlexBox';
import { ManageViewsDialog } from './ManageViewsDialog';
import { SaveViewDialog } from './SaveViewDialog';
const styles = {
    container: {
        display: 'flex',
        alignItems: 'center',
        textAlign: 'center'
    },
    title: {
        cursor: 'pointer',
        color: ThemingParameters.sapLinkColor,
        textShadow: 'none',
        '&:hover': {
            color: ThemingParameters.sapLink_Hover_Color
        },
        '&:active': {
            color: ThemingParameters.sapLink_Active_Color
        }
    },
    disabled: {
        '& $title': {
            color: ThemingParameters.sapGroup_TitleTextColor,
            cursor: 'default',
            '&:hover': {
                color: 'ThemingParameters.sapGroup_TitleTextColor'
            }
        }
    },
    dirtyState: {
        color: ThemingParameters.sapGroup_TitleTextColor,
        paddingInline: '0.125rem',
        fontWeight: 'bold',
        font: ThemingParameters.sapFontFamily,
        fontSize: ThemingParameters.sapFontSize,
        flexGrow: 1
    },
    dirtyStateText: {
        fontSize: ThemingParameters.sapFontSmallSize,
        fontWeight: 'normal'
    },
    navDownBtn: {
        marginInlineStart: '0.125rem'
    },
    footer: {
        '& > :last-child': {
            marginInlineEnd: 0
        }
    },
    inputIcon: { cursor: 'pointer', color: ThemingParameters.sapContent_IconColor },
    searchInput: { padding: '0.25rem 1rem' },
    popover: {
        minWidth: '25rem',
        '&::part(content), &::part(footer)': {
            padding: 0
        },
        '&::part(footer)': {
            borderBlockStart: 'none'
        }
    }
};
const useStyles = createUseStyles(styles, { name: 'VariantManagement' });
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */
const VariantManagement = forwardRef((props, ref) => {
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const { titleText = i18nBundle.getText(MY_VIEWS), className, style, placement, level, onSelect, closeOnItemSelect, disabled, onSaveAs, onSaveManageViews, showOnlyFavorites, inErrorState, hideShare, children, hideManageVariants, hideApplyAutomatically, hideSetAsDefault, hideCreatedBy, hideSaveAs, dirtyStateText, dirtyState, onSave, portalContainer } = props, rest = __rest(props, ["titleText", "className", "style", "placement", "level", "onSelect", "closeOnItemSelect", "disabled", "onSaveAs", "onSaveManageViews", "showOnlyFavorites", "inErrorState", "hideShare", "children", "hideManageVariants", "hideApplyAutomatically", "hideSetAsDefault", "hideCreatedBy", "hideSaveAs", "dirtyStateText", "dirtyState", "onSave", "portalContainer"]);
    const classes = useStyles();
    const popoverRef = useRef(null);
    const [safeChildren, setSafeChildren] = useState(Children.toArray(children));
    const [showInput, setShowInput] = useState(safeChildren.length > 9);
    useEffect(() => {
        setSafeChildren(Children.toArray(children));
    }, [children]);
    useEffect(() => {
        if (safeChildren.length > 9) {
            setShowInput(true);
        }
        else {
            setShowInput(false);
        }
    }, [safeChildren.length]);
    const [manageViewsDialogOpen, setManageViewsDialogOpen] = useState(false);
    const [saveAsDialogOpen, setSaveAsDialogOpen] = useState(false);
    const [selectedVariant, setSelectedVariant] = useState(() => {
        const currentSelectedVariant = safeChildren.find((item) => isValidElement(item) && item.props.selected);
        if (currentSelectedVariant) {
            return Object.assign(Object.assign({}, currentSelectedVariant.props), { variantItem: currentSelectedVariant.ref });
        }
    });
    const handleClose = () => {
        popoverRef.current.close();
    };
    const handleManageClick = () => {
        setManageViewsDialogOpen(true);
    };
    const handleManageClose = () => {
        setManageViewsDialogOpen(false);
    };
    const handleOpenSaveAsDialog = () => {
        setSaveAsDialogOpen(true);
    };
    const handleSaveAsClose = () => {
        setSaveAsDialogOpen(false);
    };
    const handleSave = (e) => {
        if (typeof onSave === 'function') {
            onSave(enrichEventWithDetails(e, selectedVariant));
        }
    };
    const handleSaveView = (e, selectedVariant) => {
        if (typeof onSaveAs === 'function') {
            onSaveAs(enrichEventWithDetails(e, selectedVariant));
        }
        handleSaveAsClose();
    };
    const handleSaveManageViews = (e, payload) => {
        const { defaultView, updatedRows, deletedRows } = payload;
        const callbackProperties = { deletedVariants: [], prevVariants: [], updatedVariants: [], variants: [] };
        setSafeChildren((prev) => Children.toArray(prev.map((child) => {
            let updatedProps = {};
            const currentVariant = popoverRef.current.querySelector(`ui5-li[data-text="${child.props.children}"]`);
            callbackProperties.prevVariants.push(child.props);
            if (defaultView) {
                if (defaultView === child.props.children) {
                    updatedProps.isDefault = true;
                }
                else if (child.props.isDefault) {
                    updatedProps.isDefault = false;
                }
            }
            if (Object.keys(updatedRows).includes(child.props.children)) {
                const _a = updatedRows[child.props.children], { currentVariant: _0 } = _a, rest = __rest(_a, ["currentVariant"]);
                updatedProps = Object.assign(Object.assign({}, updatedProps), rest);
            }
            if (deletedRows.has(child.props.children)) {
                callbackProperties.deletedVariants.push(child.props);
                return false;
            }
            if (Object.keys(updatedProps).length > 0) {
                callbackProperties.updatedVariants.push(Object.assign(Object.assign(Object.assign({}, child.props), updatedProps), { variantItem: currentVariant, prevVariant: Object.assign({}, child.props) }));
            }
            callbackProperties.variants.push(Object.assign(Object.assign(Object.assign({}, child.props), updatedProps), { variantItem: currentVariant }));
            return cloneElement(child, updatedProps);
        })));
        if (typeof onSaveManageViews === 'function') {
            onSaveManageViews(enrichEventWithDetails(e, callbackProperties));
        }
        handleManageClose();
    };
    const handleOpenVariantManagement = useCallback((e) => {
        popoverRef.current.showAt(e.target);
    }, [popoverRef]);
    const searchText = i18nBundle.getText(SEARCH);
    const saveAsText = i18nBundle.getText(SAVE_AS);
    const manageText = i18nBundle.getText(MANAGE);
    const saveText = i18nBundle.getText(SAVE);
    const a11ySearchText = i18nBundle.getText(SEARCH_VARIANT);
    const selectViewText = i18nBundle.getText(SELECT_VIEW);
    const variantManagementClasses = clsx(classes.container, disabled && classes.disabled, className);
    const dirtyStateClasses = clsx(classes.dirtyState, dirtyStateText !== '*' && classes.dirtyStateText);
    const selectVariantEventRef = useRef();
    useEffect(() => {
        if (selectVariantEventRef.current) {
            if (typeof onSelect === 'function') {
                onSelect(enrichEventWithDetails(selectVariantEventRef.current, { selectedVariant }));
                selectVariantEventRef.current = undefined;
            }
        }
    }, [selectedVariant, onSelect]);
    const handleVariantItemSelect = (e) => {
        setSelectedVariant(Object.assign(Object.assign({}, e.detail.selectedItems[0].dataset), { variantItem: e.detail.selectedItems[0] }));
        selectVariantEventRef.current = e;
        if (closeOnItemSelect) {
            handleClose();
        }
    };
    const variantNames = safeChildren.map((item) => { var _a; return typeof ((_a = item.props) === null || _a === void 0 ? void 0 : _a.children) === 'string' ? item.props.children : ''; });
    const [favoriteChildren, setFavoriteChildren] = useState(undefined);
    useEffect(() => {
        if (showOnlyFavorites) {
            setFavoriteChildren(safeChildren.filter((child) => child.props.favorite || child.props.isDefault));
        }
        if (!showOnlyFavorites && (favoriteChildren === null || favoriteChildren === void 0 ? void 0 : favoriteChildren.length) > 0) {
            setFavoriteChildren(undefined);
        }
    }, [showOnlyFavorites, safeChildren]);
    const safeChildrenWithFavorites = favoriteChildren !== null && favoriteChildren !== void 0 ? favoriteChildren : safeChildren;
    const [filteredChildren, setFilteredChildren] = useState(undefined);
    const [searchValue, setSearchValue] = useState('');
    const handleSearchInput = (e) => {
        setSearchValue(e.target.value);
        setFilteredChildren(safeChildrenWithFavorites.filter((child) => {
            var _a;
            return typeof ((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children) === 'string' &&
                child.props.children.toLowerCase().includes(e.target.value.toLowerCase());
        }));
    };
    useEffect(() => {
        if (filteredChildren) {
            setFilteredChildren(safeChildrenWithFavorites.filter((child) => { var _a; return typeof ((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children) === 'string' && child.props.children.toLowerCase().includes(searchValue); }));
        }
    }, [safeChildrenWithFavorites]);
    const showSaveBtn = dirtyState && !(selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.readOnly);
    return (React.createElement("div", Object.assign({ className: variantManagementClasses, style: style }, rest, { ref: ref }),
        React.createElement(VariantManagementContext.Provider, { value: {
                selectVariantItem: setSelectedVariant
            } },
            React.createElement(FlexBox, { onClick: disabled ? undefined : handleOpenVariantManagement },
                React.createElement(Title, { level: level, className: classes.title }, selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.children),
                dirtyState && React.createElement("div", { className: dirtyStateClasses }, dirtyStateText)),
            React.createElement(Button, { className: clsx(classes.navDownBtn, 'ui5-content-density-compact'), tooltip: selectViewText, accessibleName: selectViewText, onClick: handleOpenVariantManagement, design: ButtonDesign.Transparent, icon: navDownIcon, disabled: disabled }),
            createPortal(React.createElement(ResponsivePopover, { className: classes.popover, ref: popoverRef, headerText: titleText, placementType: placement, footer: (showSaveBtn || !hideSaveAs || !hideManageVariants) && (React.createElement(Bar, { design: BarDesign.Footer, className: classes.footer, endContent: React.createElement(React.Fragment, null,
                        !inErrorState && showSaveBtn && (React.createElement(Button, { onClick: handleSave, design: ButtonDesign.Emphasized }, saveText)),
                        !inErrorState && !hideSaveAs && (React.createElement(Button, { onClick: handleOpenSaveAsDialog, design: showSaveBtn ? ButtonDesign.Transparent : ButtonDesign.Emphasized, disabled: !selectedVariant || Object.keys(selectedVariant).length === 0 }, saveAsText)),
                        !inErrorState && !hideManageVariants && (React.createElement(Button, { onClick: handleManageClick, design: showSaveBtn || !hideSaveAs ? ButtonDesign.Transparent : ButtonDesign.Emphasized }, manageText))) })), onAfterClose: stopPropagation }, inErrorState ? (React.createElement(IllustratedMessage, { name: IllustrationMessageType.UnableToLoad })) : (React.createElement(List, { onSelectionChange: handleVariantItemSelect, mode: ListMode.SingleSelect, header: showInput ? (React.createElement("div", { className: classes.searchInput, tabIndex: -1 },
                    React.createElement(Input, { accessibleName: a11ySearchText, value: searchValue, placeholder: searchText, onInput: handleSearchInput, showClearIcon: true, icon: React.createElement(Icon, { name: searchIcon, className: classes.inputIcon }) }))) : undefined }, filteredChildren !== null && filteredChildren !== void 0 ? filteredChildren : safeChildrenWithFavorites))), portalContainer),
            manageViewsDialogOpen && (React.createElement(ManageViewsDialog, { onAfterClose: handleManageClose, handleSaveManageViews: handleSaveManageViews, showShare: !hideShare, showApplyAutomatically: !hideApplyAutomatically, showCreatedBy: !hideCreatedBy, showSetAsDefault: !hideSetAsDefault, variantNames: variantNames, portalContainer: portalContainer, showOnlyFavorites: showOnlyFavorites }, safeChildren)),
            saveAsDialogOpen && (React.createElement(SaveViewDialog, { portalContainer: portalContainer, showShare: !hideShare, showApplyAutomatically: !hideApplyAutomatically, showSetAsDefault: !hideSetAsDefault, onAfterClose: handleSaveAsClose, handleSave: handleSaveView, selectedVariant: selectedVariant, variantNames: variantNames })))));
});
VariantManagement.defaultProps = {
    placement: PopoverPlacementType.Bottom,
    level: TitleLevel.H4,
    dirtyStateText: '*',
    portalContainer: document.body
};
VariantManagement.displayName = 'VariantManagement';
export { VariantManagement };
