var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import iconSysHelp from '@ui5/webcomponents-icons/dist/sys-help-2.js';
import { enrichEventWithDetails, useI18nBundle, useIsomorphicId, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { cloneElement, forwardRef, isValidElement, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { ButtonDesign, MessageBoxActions, MessageBoxTypes, TitleLevel, ValueState } from '../../enums';
import { ABORT, CANCEL, CLOSE, CONFIRMATION, DELETE, ERROR, IGNORE, INFORMATION, NO, OK, RETRY, SUCCESS, WARNING, YES } from '../../i18n/i18n-defaults';
import { stopPropagation } from '../../internal/stopPropagation';
import { Button, Dialog, Icon, Title } from '../../webComponents';
import { Text } from '../Text';
import styles from './MessageBox.jss';
const useStyles = createUseStyles(styles, { name: 'MessageBox' });
const createUniqueIds = (internalActions) => {
    return internalActions.map((action) => {
        if (typeof action === 'string') {
            return `${performance.now() + Math.random()}`.split('.')[1];
        }
        return null;
    });
};
const getIcon = (icon, type) => {
    if (isValidElement(icon))
        return icon;
    const iconProps = { 'aria-hidden': 'true', accessibleRole: 'presentation' };
    switch (type) {
        case MessageBoxTypes.Confirm:
            return React.createElement(Icon, Object.assign({ name: iconSysHelp }, iconProps));
        default:
            return null;
    }
};
const convertMessageBoxTypeToState = (type) => {
    switch (type) {
        case MessageBoxTypes.Information:
            return ValueState.Information;
        case MessageBoxTypes.Success:
            return ValueState.Success;
        case MessageBoxTypes.Warning:
            return ValueState.Warning;
        case MessageBoxTypes.Error:
            return ValueState.Error;
        default:
            return ValueState.None;
    }
};
const getActions = (actions, type) => {
    if (actions && actions.length > 0) {
        return actions;
    }
    if (type === MessageBoxTypes.Confirm) {
        return [MessageBoxActions.OK, MessageBoxActions.Cancel];
    }
    if (type === MessageBoxTypes.Error) {
        return [MessageBoxActions.Close];
    }
    return [MessageBoxActions.OK];
};
/**
 * The `MessageBox` component provides easier methods to create a `Dialog`, such as standard alerts, confirmation dialogs, or arbitrary message dialogs.
 * For convenience, it also provides an `open` prop, so it is not necessary to attach a `ref` to open the `MessageBox`.
 */
const MessageBox = forwardRef((props, ref) => {
    const { open, type, children, className, titleText, icon, actions, emphasizedAction, onClose, initialFocus } = props, rest = __rest(props, ["open", "type", "children", "className", "titleText", "icon", "actions", "emphasizedAction", "onClose", "initialFocus"]);
    const classes = useStyles();
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const actionTranslations = {
        [MessageBoxActions.Abort]: i18nBundle.getText(ABORT),
        [MessageBoxActions.Cancel]: i18nBundle.getText(CANCEL),
        [MessageBoxActions.Close]: i18nBundle.getText(CLOSE),
        [MessageBoxActions.Delete]: i18nBundle.getText(DELETE),
        [MessageBoxActions.Ignore]: i18nBundle.getText(IGNORE),
        [MessageBoxActions.No]: i18nBundle.getText(NO),
        [MessageBoxActions.OK]: i18nBundle.getText(OK),
        [MessageBoxActions.Retry]: i18nBundle.getText(RETRY),
        [MessageBoxActions.Yes]: i18nBundle.getText(YES)
    };
    const titleToRender = () => {
        if (titleText) {
            return titleText;
        }
        switch (type) {
            case MessageBoxTypes.Confirm:
                return i18nBundle.getText(CONFIRMATION);
            case MessageBoxTypes.Error:
                return i18nBundle.getText(ERROR);
            case MessageBoxTypes.Information:
                return i18nBundle.getText(INFORMATION);
            case MessageBoxTypes.Success:
                return i18nBundle.getText(SUCCESS);
            case MessageBoxTypes.Warning:
                return i18nBundle.getText(WARNING);
            default:
                return null;
        }
    };
    const handleOnClose = (e) => {
        const { action } = e.target.dataset;
        stopPropagation(e);
        onClose(enrichEventWithDetails(e, { action }));
    };
    const messageBoxClassNames = clsx(classes.messageBox, className);
    const internalActions = getActions(actions, type);
    const [uniqueIds, setUniqueIds] = useState(() => createUniqueIds(internalActions));
    useIsomorphicLayoutEffect(() => {
        setUniqueIds(createUniqueIds(internalActions));
    }, [internalActions.length]);
    const getInitialFocus = () => {
        const indexOfInitialFocus = internalActions.indexOf(initialFocus);
        const actionToFocus = internalActions[indexOfInitialFocus];
        if (typeof actionToFocus === 'string') {
            return `${actionToFocus}-${uniqueIds[indexOfInitialFocus]}`;
        }
        return initialFocus;
    };
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const { footer: _0, headerText: _1, onAfterClose: _2 } = rest, restWithoutOmitted = __rest(rest, ["footer", "headerText", "onAfterClose"]);
    const iconToRender = getIcon(icon, type);
    const needsCustomHeader = !props.header && !!iconToRender;
    const messageBoxId = useIsomorphicId();
    return (React.createElement(Dialog, Object.assign({ open: open, ref: ref, className: messageBoxClassNames, onAfterClose: open ? handleOnClose : stopPropagation, accessibleNameRef: needsCustomHeader ? `${messageBoxId}-title ${messageBoxId}-text` : undefined }, restWithoutOmitted, { headerText: titleToRender(), state: convertMessageBoxTypeToState(type), initialFocus: getInitialFocus(), "data-type": type }),
        needsCustomHeader && (React.createElement("header", { slot: "header", className: classes.header },
            iconToRender,
            iconToRender && React.createElement("span", { className: classes.spacer }),
            React.createElement(Title, { id: `${messageBoxId}-title`, level: TitleLevel.H2 }, titleToRender()))),
        React.createElement(Text, { id: `${messageBoxId}-text` }, children),
        React.createElement("footer", { slot: "footer", className: classes.footer }, internalActions.map((action, index) => {
            var _a, _b, _c, _d;
            if (typeof action !== 'string' && isValidElement(action)) {
                return cloneElement(action, {
                    onClick: ((_a = action === null || action === void 0 ? void 0 : action.props) === null || _a === void 0 ? void 0 : _a.onClick)
                        ? (e) => {
                            var _a;
                            (_a = action === null || action === void 0 ? void 0 : action.props) === null || _a === void 0 ? void 0 : _a.onClick(e);
                            handleOnClose(e);
                        }
                        : handleOnClose,
                    'data-action': (_c = (_b = action === null || action === void 0 ? void 0 : action.props) === null || _b === void 0 ? void 0 : _b['data-action']) !== null && _c !== void 0 ? _c : `${index}: custom action`
                });
            }
            if (typeof action === 'string') {
                return (React.createElement(Button, { id: `${action}-${uniqueIds[index]}`, key: `${action}-${index}`, design: emphasizedAction === action ? ButtonDesign.Emphasized : ButtonDesign.Transparent, onClick: handleOnClose, "data-action": action }, (_d = actionTranslations[action]) !== null && _d !== void 0 ? _d : action));
            }
            return null;
        }))));
});
MessageBox.displayName = 'MessageBox';
MessageBox.defaultProps = {
    open: false,
    type: MessageBoxTypes.Confirm,
    emphasizedAction: MessageBoxActions.OK,
    actions: []
};
export { MessageBox };
