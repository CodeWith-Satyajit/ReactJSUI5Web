import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';
import { TableSelectionBehavior, TableSelectionMode } from '../../../enums';
const getRowProps = (rowProps, { row, instance }) => {
    const { webComponentsReactProperties, toggleRowSelected, selectedFlatRows, dispatch } = instance;
    const handleRowSelect = (e) => {
        var _a, _b, _c, _d, _e, _f;
        const isSelectionCell = e.target.dataset.selectionCell === 'true';
        if (((_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.dataset) === null || _b === void 0 ? void 0 : _b.name) !== 'internal_selection_column' &&
            !(e.markerAllowTableRowSelection === true || ((_c = e.nativeEvent) === null || _c === void 0 ? void 0 : _c.markerAllowTableRowSelection) === true) &&
            webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
            return;
        }
        // don't select empty rows
        const isEmptyRow = (_d = row.original) === null || _d === void 0 ? void 0 : _d.emptyRow;
        if (isEmptyRow) {
            return;
        }
        // don't select grouped rows
        if (row.isGrouped) {
            return;
        }
        const { selectionBehavior, selectionMode, onRowSelect, onRowClick } = webComponentsReactProperties;
        if (typeof onRowClick === 'function' && ((_f = (_e = e.target) === null || _e === void 0 ? void 0 : _e.dataset) === null || _f === void 0 ? void 0 : _f.name) !== 'internal_selection_column') {
            onRowClick(enrichEventWithDetails(e, { row }));
        }
        if (selectionMode === TableSelectionMode.None) {
            return;
        }
        // don't continue if the row was clicked and selection mode is row selector only
        if (selectionBehavior === TableSelectionBehavior.RowSelector && !isSelectionCell) {
            return;
        }
        // deselect other rows
        if (selectionMode === TableSelectionMode.SingleSelect) {
            for (const selectedRow of selectedFlatRows) {
                if (selectedRow.id !== row.id) {
                    toggleRowSelected(selectedRow.id, false);
                }
            }
        }
        toggleRowSelected(row.id);
        if (typeof onRowSelect === 'function') {
            // update state to return instance values after update (see useSelectionChangeCallback hook)
            dispatch({ type: 'SELECT_ROW_CB', payload: { event: e, row, fired: true } });
        }
    };
    return [
        rowProps,
        {
            onKeyDown: (e) => {
                if (e.key === 'Enter' || e.code === 'Space') {
                    if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
                        e.preventDefault();
                    }
                    handleRowSelect(e);
                }
            },
            onClick: handleRowSelect
        }
    ];
};
export const useSingleRowStateSelection = (hooks) => {
    hooks.getRowProps.push(getRowProps);
};
useSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';
