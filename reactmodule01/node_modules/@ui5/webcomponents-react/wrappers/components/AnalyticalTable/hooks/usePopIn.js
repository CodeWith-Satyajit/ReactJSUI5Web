const popInVisibleColumnsDeps = (deps, { instance: { state } }) => [...deps, state.tableClientWidth];
const popInVisibleColumns = (cols, { instance }) => {
    const { state, dispatch } = instance;
    const tableClientWidth = state.isScrollable
        ? (state === null || state === void 0 ? void 0 : state.tableClientWidth) + 14 /*scrollbar width*/
        : state === null || state === void 0 ? void 0 : state.tableClientWidth;
    const popInColumns = cols
        .filter((item) => item.responsivePopIn && tableClientWidth < item.responsiveMinWidth)
        .map((item) => { var _a; return ({ id: (_a = item.id) !== null && _a !== void 0 ? _a : item.accessor, column: item }); });
    dispatch({ type: 'SET_POPIN_COLUMNS', payload: popInColumns });
    return cols.filter((col) => !popInColumns.some((item) => { var _a; return item.id === ((_a = col.id) !== null && _a !== void 0 ? _a : col.accessor); }) &&
        (col.hasOwnProperty('responsiveMinWidth')
            ? !tableClientWidth || tableClientWidth >= col.responsiveMinWidth
            : true));
};
export const usePopIn = (hooks) => {
    hooks.visibleColumns.push(popInVisibleColumns);
    hooks.visibleColumnsDeps.push(popInVisibleColumnsDeps);
};
