import { ThemingParameters } from '@ui5/webcomponents-react-base';
import React, { useEffect, useRef } from 'react';
import { createUseStyles } from 'react-jss';
const styles = {
    subcomponent: {
        position: 'absolute',
        width: '100%',
        '&:focus': {
            outlineOffset: `calc(-1 * ${ThemingParameters.sapContent_FocusWidth})`,
            outline: `${ThemingParameters.sapContent_FocusWidth} ${ThemingParameters.sapContent_FocusStyle} ${ThemingParameters.sapContent_FocusColor}`
        }
    }
};
const useStyles = createUseStyles(styles, { name: 'RowSubComponent' });
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export const RowSubComponent = (props) => {
    var _a, _b;
    const { subComponentsHeight, virtualRow, dispatch, row, rowHeight, children, rows, alwaysShowSubComponent } = props;
    const subComponentRef = useRef(null);
    const classes = useStyles();
    useEffect(() => {
        var _a, _b;
        const subComponentHeightObserver = new ResizeObserver((entries) => {
            entries.forEach((entry) => {
                var _a, _b;
                const target = entry.target.getBoundingClientRect();
                if (target) {
                    // Firefox implements `borderBoxSize` as a single content rect, rather than an array
                    const borderBoxSize = Array.isArray(entry.borderBoxSize) ? entry.borderBoxSize[0] : entry.borderBoxSize;
                    // Safari doesn't implement `borderBoxSize`
                    const subCompHeight = (_a = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.blockSize) !== null && _a !== void 0 ? _a : target.height;
                    if (((_b = subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : subComponentsHeight[virtualRow.index]) === null || _b === void 0 ? void 0 : _b.subComponentHeight) !== subCompHeight && subCompHeight !== 0) {
                        // use most common sub-component height of first 10 sub-components as default height
                        if (alwaysShowSubComponent && subComponentsHeight && Object.keys(subComponentsHeight).length === 10) {
                            const objGroupedByHeight = Object.values(subComponentsHeight).reduce((acc, cur) => {
                                const count = acc === null || acc === void 0 ? void 0 : acc[cur.subComponentHeight];
                                if (typeof count === 'number') {
                                    return Object.assign(Object.assign({}, acc), { [cur.subComponentHeight]: count + 1 });
                                }
                                return Object.assign(Object.assign({}, acc), { [cur.subComponentHeight]: 1 });
                            }, {});
                            const mostUsedHeight = Object.keys(objGroupedByHeight).reduce((a, b) => objGroupedByHeight[a] > objGroupedByHeight[b] ? a : b);
                            const estimatedHeights = rows.reduce((acc, cur, index) => {
                                acc[index] = { subComponentHeight: parseInt(mostUsedHeight), rowId: cur.id };
                                return acc;
                            }, {});
                            dispatch({
                                type: 'SUB_COMPONENTS_HEIGHT',
                                payload: Object.assign(Object.assign({}, estimatedHeights), subComponentsHeight)
                            });
                        }
                        else {
                            dispatch({
                                type: 'SUB_COMPONENTS_HEIGHT',
                                payload: Object.assign(Object.assign({}, subComponentsHeight), { [virtualRow.index]: { subComponentHeight: subCompHeight, rowId: row.id } })
                            });
                        }
                    }
                }
            });
        });
        if ((_a = subComponentRef.current) === null || _a === void 0 ? void 0 : _a.firstChild) {
            subComponentHeightObserver.observe((_b = subComponentRef.current) === null || _b === void 0 ? void 0 : _b.firstChild);
        }
        return () => {
            subComponentHeightObserver.disconnect();
        };
    }, [
        (_a = subComponentRef.current) === null || _a === void 0 ? void 0 : _a.firstChild,
        subComponentsHeight,
        row.id,
        (_b = subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : subComponentsHeight[virtualRow.index]) === null || _b === void 0 ? void 0 : _b.subComponentHeight,
        virtualRow.index
    ]);
    return (React.createElement("div", { ref: subComponentRef, "data-subcomponent": true, tabIndex: -1, style: {
            boxSizing: 'border-box',
            transform: `translateY(${rowHeight}px)`
        }, className: classes.subcomponent }, children));
};
