var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';
import React from 'react';
import { TableSelectionBehavior } from '../../../enums';
import { TableSelectionMode } from '../../../enums/TableSelectionMode';
import { CheckBox } from '../../../webComponents/CheckBox';
import { getBy } from '../util';
const customCheckBoxStyling = {
    verticalAlign: 'middle'
};
const headerProps = (props, { instance: { webComponentsReactProperties: { selectionMode } } }) => {
    if (props.key === 'header___ui5wcr__internal_selection_column' && selectionMode === TableSelectionMode.MultiSelect) {
        const style = Object.assign(Object.assign({}, props.style), { cursor: 'auto' });
        return [props, { onClick: undefined, onKeyDown: undefined, style }];
    }
    return props;
};
const columns = (columns) => {
    return columns.map((column) => {
        if (column.id === '__ui5wcr__internal_selection_column') {
            return Object.assign(Object.assign({}, column), { Cell: (instance) => {
                    const { webComponentsReactProperties, row } = instance;
                    if (row.disableSelect === true) {
                        if (row.isGrouped && webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {
                            return null;
                        }
                        if (webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {
                            return React.createElement("div", { onClick: undefined, "data-name": "internal_selection_column" });
                        }
                        return (React.createElement(CheckBox, Object.assign({}, row.getToggleRowSelectedProps(), { disabled: true, style: customCheckBoxStyling, "data-name": "internal_selection_column", tabIndex: -1 })));
                    }
                    return column.Cell(instance);
                }, Header: () => null });
        }
        return column;
    });
};
/**
 * A plugin hook for disabling row selection of specific rows.
 * __Note:__ The "Select All" checkbox is not available with this hook.
 *
 * @param disableRowSelection - Can be either a `string` or a `function`. `string:` Defines the key in the dataset for disabling rows. If the value of the key is `true`, then the row will not be selectable. `function:` Programmatically disable rows for selection. The function receives the current row as parameter.
 */
export const useRowDisableSelection = (disableRowSelection) => {
    const disableRowAccessor = typeof disableRowSelection === 'function'
        ? disableRowSelection
        : (d) => getBy(d.original, disableRowSelection, undefined);
    const getRowProps = (rowProps, { row, instance }) => {
        const { webComponentsReactProperties } = instance;
        if (disableRowAccessor(row) === true) {
            row.disableSelect = true;
            const handleClick = (e) => {
                if (typeof webComponentsReactProperties.onRowClick === 'function') {
                    webComponentsReactProperties.onRowClick(enrichEventWithDetails(e, { row }));
                }
            };
            const onKeyDown = (e) => {
                if (e.code === 'Space' || e.code === 'Enter') {
                    e.preventDefault();
                    if (typeof webComponentsReactProperties.onRowClick === 'function') {
                        webComponentsReactProperties.onRowClick(enrichEventWithDetails(e, { row }));
                    }
                }
            };
            return Object.assign(Object.assign({}, rowProps), { onClick: handleClick, onKeyDown, className: webComponentsReactProperties.classes.tr });
        }
        return rowProps;
    };
    const columnDeps = (deps) => {
        return [...deps, disableRowSelection];
    };
    const cellProps = (cellProps, { cell: { row, column }, instance }) => {
        const { selectionMode, selectionBehavior } = instance.webComponentsReactProperties;
        if (disableRowAccessor(row) === true &&
            selectionMode !== TableSelectionMode.None &&
            (selectionBehavior !== TableSelectionBehavior.RowSelector || column.id === '__ui5wcr__internal_selection_column')) {
            const { 'aria-label': _0 } = cellProps, updatedCellProps = __rest(cellProps, ['aria-label']);
            if (column.id === '__ui5wcr__internal_selection_column') {
                const style = Object.assign(Object.assign({}, cellProps.style), { cursor: 'auto' });
                return Object.assign(Object.assign({}, updatedCellProps), { 'aria-disabled': true, style });
            }
            const { 'aria-selected': _1 } = updatedCellProps, updatedCellProsWithOutSelected = __rest(updatedCellProps, ['aria-selected']);
            return updatedCellProsWithOutSelected;
        }
        return cellProps;
    };
    const toggleRowSelectedProps = (rowProps, { row }) => {
        if (disableRowAccessor(row) === true) {
            const { title: _0 } = rowProps, updatedRowProps = __rest(rowProps, ["title"]);
            return updatedRowProps;
        }
        return rowProps;
    };
    const useDisableSelectionRow = (hooks) => {
        hooks.getHeaderProps.push(headerProps);
        hooks.getRowProps.push(getRowProps);
        hooks.columns.push(columns);
        hooks.columnsDeps.push(columnDeps);
        hooks.getCellProps.push(cellProps);
        hooks.getToggleRowSelectedProps.push(toggleRowSelectedProps);
    };
    useDisableSelectionRow.pluginName = 'useRowDisableSelection';
    return useDisableSelectionRow;
};
