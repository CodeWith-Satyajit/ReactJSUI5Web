import '@ui5/webcomponents-icons/dist/decline.js';
import { enrichEventWithDetails, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { useCallback, useRef } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '../../../enums/FlexBoxAlignItems';
import { ListItemType } from '../../../enums/ListItemType';
import { PopoverHorizontalAlign } from '../../../enums/PopoverHorizontalAlign';
import { PopoverPlacementType } from '../../../enums/PopoverPlacementType';
import { TextAlign } from '../../../enums/TextAlign';
import { CLEAR_SORTING, GROUP, SORT_ASCENDING, SORT_DESCENDING, UNGROUP } from '../../../i18n/i18n-defaults';
import { stopPropagation } from '../../../internal/stopPropagation';
import { CustomListItem } from '../../../webComponents/CustomListItem';
import { Icon } from '../../../webComponents/Icon';
import { List } from '../../../webComponents/List';
import { Popover } from '../../../webComponents/Popover';
import { StandardListItem } from '../../../webComponents/StandardListItem';
import { FlexBox } from '../../FlexBox';
const styles = {
    popover: {
        fontWeight: 'normal',
        '&::part(content)': {
            padding: 0
        }
    },
    filterListItem: {
        height: 'var(--_ui5_list_item_base_height)'
    },
    filter: {
        padding: '0px 1rem',
        height: 'var(--_ui5_list_item_base_height)'
    },
    filterIcon: { paddingRight: '0.5rem', minWidth: '1rem', minHeight: '1rem' }
};
const useStyles = createUseStyles(styles, { name: 'ColumnHeaderModal' });
export const ColumnHeaderModal = (props) => {
    const { column, onSort, onGroupBy, open, setPopoverOpen, portalContainer, isRtl, uniqueColumnId } = props;
    const classes = useStyles();
    const showFilter = column.canFilter;
    const showGroup = column.canGroupBy;
    const showSort = column.canSort;
    const ref = useRef(null);
    const listRef = useRef(null);
    const { Filter } = column;
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const clearSortingText = i18nBundle.getText(CLEAR_SORTING);
    const sortAscendingText = i18nBundle.getText(SORT_ASCENDING);
    const sortDescendingText = i18nBundle.getText(SORT_DESCENDING);
    const groupText = i18nBundle.getText(GROUP);
    const ungroupText = i18nBundle.getText(UNGROUP);
    const handleSort = useCallback((e) => {
        const sortType = e.detail.item.getAttribute('data-sort');
        switch (sortType) {
            case 'asc':
                column.toggleSortBy(false);
                if (typeof onSort === 'function') {
                    onSort(enrichEventWithDetails(e, {
                        column,
                        sortDirection: sortType
                    }));
                }
                break;
            case 'desc':
                column.toggleSortBy(true);
                if (typeof onSort === 'function') {
                    onSort(enrichEventWithDetails(e, {
                        column,
                        sortDirection: sortType
                    }));
                }
                break;
            case 'clear':
                column.clearSortBy();
                if (typeof onSort === 'function') {
                    onSort(enrichEventWithDetails(e, {
                        column,
                        sortDirection: sortType
                    }));
                }
                break;
            case 'group':
                const willGroup = !column.isGrouped;
                column.toggleGroupBy(willGroup);
                if (typeof onGroupBy === 'function') {
                    onGroupBy(enrichEventWithDetails(e, {
                        column,
                        isGrouped: willGroup
                    }));
                }
                break;
        }
        setPopoverOpen(false);
    }, [column, ref, onGroupBy, onSort, setPopoverOpen]);
    const isSortedAscending = column.isSorted && column.isSortedDesc === false;
    const isSortedDescending = column.isSorted && column.isSortedDesc === true;
    const onAfterClose = (e) => {
        stopPropagation(e);
        setPopoverOpen(false);
    };
    const onAfterOpen = () => {
        var _a, _b, _c;
        (_c = (_b = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.focus();
    };
    const horizontalAlign = (() => {
        switch (column.hAlign) {
            case TextAlign.Begin:
                return isRtl ? PopoverHorizontalAlign.Right : PopoverHorizontalAlign.Left;
            case TextAlign.End:
                return isRtl ? PopoverHorizontalAlign.Left : PopoverHorizontalAlign.Right;
            case TextAlign.Left:
                return PopoverHorizontalAlign.Left;
            case TextAlign.Right:
                return PopoverHorizontalAlign.Right;
            case TextAlign.Center:
                return PopoverHorizontalAlign.Center;
            default:
                return isRtl ? PopoverHorizontalAlign.Right : PopoverHorizontalAlign.Left;
        }
    })();
    const handleCustomLiKeyDown = (e) => {
        if (e.key === 'Enter') {
            setPopoverOpen(false);
        }
    };
    const handleListKeyDown = (e) => {
        if (e.key !== 'Escape') {
            stopPropagation(e);
        }
    };
    return createPortal(React.createElement(Popover, { hideArrow: true, horizontalAlign: horizontalAlign, placementType: PopoverPlacementType.Bottom, ref: ref, className: classes.popover, onClick: stopPropagation, onAfterClose: onAfterClose, onAfterOpen: onAfterOpen, open: open, opener: uniqueColumnId },
        React.createElement(List, { onItemClick: handleSort, ref: listRef, onKeyDown: handleListKeyDown },
            isSortedAscending && (React.createElement(StandardListItem, { type: ListItemType.Active, icon: "decline", "data-sort": "clear" }, clearSortingText)),
            showSort && !isSortedAscending && (React.createElement(StandardListItem, { type: ListItemType.Active, icon: "sort-ascending", "data-sort": "asc" }, sortAscendingText)),
            showSort && !isSortedDescending && (React.createElement(StandardListItem, { type: ListItemType.Active, icon: "sort-descending", "data-sort": "desc" }, sortDescendingText)),
            isSortedDescending && (React.createElement(StandardListItem, { type: ListItemType.Active, icon: "decline", "data-sort": "clear" }, clearSortingText)),
            showFilter && !column.isGrouped && (
            //todo maybe need to enhance Input selection after ui5-webcomponents issue has been fixed (undefined is displayed as val)
            React.createElement(CustomListItem, { type: ListItemType.Inactive, className: classes.filterListItem, onKeyDown: handleCustomLiKeyDown },
                React.createElement(FlexBox, { alignItems: FlexBoxAlignItems.Center, className: classes.filter },
                    React.createElement(Icon, { name: "filter", className: classes.filterIcon }),
                    React.createElement(Filter, { column: column, popoverRef: ref })))),
            showGroup && (React.createElement(StandardListItem, { type: ListItemType.Active, icon: "group-2", "data-sort": 'group' }, column.isGrouped ? ungroupText : groupText)))), portalContainer);
};
ColumnHeaderModal.displayName = 'ColumnHeaderModal';
