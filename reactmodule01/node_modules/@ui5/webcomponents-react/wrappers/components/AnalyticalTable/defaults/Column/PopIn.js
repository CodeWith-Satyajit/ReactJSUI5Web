import { ThemingParameters } from '@ui5/webcomponents-react-base';
import React from 'react';
import { createUseStyles } from 'react-jss';
import { makeRenderer } from 'react-table';
import { FlexBoxAlignItems } from '../../../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../../../enums/FlexBoxDirection';
import { FlexBoxWrap } from '../../../../enums/FlexBoxWrap';
import { FlexBox } from '../../../FlexBox';
import { Text } from '../../../Text';
const PopInStyles = {
    container: {
        width: '100%'
    },
    defaultCell: {
        fontFamily: `${ThemingParameters.sapFontBoldFamily}`,
        '& *': {
            fontFamily: `${ThemingParameters.sapFontBoldFamily}`
        }
    },
    header: {
        height: '16px'
    }
};
const useStyles = createUseStyles(PopInStyles, { name: 'PopIn' });
export const PopIn = (instance) => {
    var _a;
    const { state, contentToRender, cell, row, internalRowHeight } = instance;
    const classes = useStyles();
    return (React.createElement(FlexBox, { direction: FlexBoxDirection.Column, className: classes.container },
        React.createElement(FlexBox, { alignItems: contentToRender !== 'Grouped' && contentToRender !== 'Expandable'
                ? FlexBoxAlignItems.Start
                : FlexBoxAlignItems.Center, wrap: FlexBoxWrap.NoWrap, className: classes.defaultCell, style: {
                height: internalRowHeight
            } }, cell.render(contentToRender)),
        contentToRender !== 'Grouped' &&
            ((_a = state.popInColumns) === null || _a === void 0 ? void 0 : _a.map((item) => {
                var _a;
                const popInInstanceProps = row.allCells.find((cell) => cell.column.id === item.id);
                const renderHeader = () => {
                    if (item.column.PopInHeader) {
                        return typeof item.column.PopInHeader === 'function'
                            ? item.column.PopInHeader(Object.assign(Object.assign({}, instance), popInInstanceProps))
                            : item.column.PopInHeader;
                    }
                    return typeof item.column.Header === 'function'
                        ? makeRenderer(Object.assign(Object.assign({}, instance), popInInstanceProps), item.column)(item.column.Header)
                        : item.column.Header;
                };
                const renderCell = () => {
                    var _a;
                    if ((_a = item.column) === null || _a === void 0 ? void 0 : _a.Cell) {
                        const cell = item.column.Cell;
                        if (typeof cell === 'string') {
                            return (React.createElement(Text, { wrapping: false, title: cell }, cell));
                        }
                        return makeRenderer(Object.assign(Object.assign(Object.assign({}, instance), popInInstanceProps), { isPopIn: true }), item.column)(item.column.Cell);
                    }
                    return (popInInstanceProps === null || popInInstanceProps === void 0 ? void 0 : popInInstanceProps.value) ? (React.createElement(Text, { wrapping: false, title: popInInstanceProps.value }, popInInstanceProps.value)) : null;
                };
                return (React.createElement(FlexBox, { direction: FlexBoxDirection.Column, key: item.id },
                    ((_a = item.column) === null || _a === void 0 ? void 0 : _a.Header) && React.createElement("div", { className: classes.header },
                        renderHeader(),
                        ":"),
                    React.createElement("div", { style: { height: internalRowHeight } }, popInInstanceProps && renderCell())));
            }))));
};
