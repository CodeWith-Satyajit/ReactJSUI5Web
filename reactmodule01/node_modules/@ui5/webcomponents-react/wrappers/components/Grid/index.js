var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useViewportRange } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { Children, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { GridPosition } from '../../enums/GridPosition';
import { styles } from './Grid.jss';
const INDENT_PATTERN = /^([X][L](?<LargeDesktop>[0-9]|1[0-2]))? ?([L](?<Desktop>[0-9]|1[0-2]))? ?([M](?<Tablet>[0-9]|1[0-2]))? ?([S](?<Phone>[0-9]|1[0-2]))?$/i;
const SPAN_PATTERN = /^([X][L](?<LargeDesktop>[1-9]|1[0-2]))? ?([L](?<Desktop>[1-9]|1[0-2]))? ?([M](?<Tablet>[1-9]|1[0-2]))? ?([S](?<Phone>[1-9]|1[0-2]))?$/i;
const DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 1);
DefaultSpanMap.set('Tablet', 2);
DefaultSpanMap.set('Desktop', 4);
DefaultSpanMap.set('LargeDesktop', 4);
const DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);
const getSpanFromString = (span, currentRange) => {
    var _a;
    const spanConfig = SPAN_PATTERN.exec(span);
    return (_a = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _a !== void 0 ? _a : DefaultSpanMap.get(currentRange);
};
const getIndentFromString = (indent, currentRange) => {
    var _a;
    const indentConfig = INDENT_PATTERN.exec(indent);
    return (_a = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _a !== void 0 ? _a : DefaultIndentMap.get(currentRange);
};
const useStyles = createUseStyles(styles, { name: 'Grid' });
/**
 * A layout container component used for aligning items with various sizes in a simple grid.
 */
const Grid = forwardRef((props, ref) => {
    const { position, children, hSpacing, vSpacing, style, className, slot, defaultIndent, defaultSpan } = props, rest = __rest(props, ["position", "children", "hSpacing", "vSpacing", "style", "className", "slot", "defaultIndent", "defaultSpan"]);
    const classes = useStyles();
    const currentRange = useViewportRange();
    const gridClasses = clsx(classes.grid, GridPosition.Center === position && classes.positionCenter, GridPosition.Right === position && classes.positionRight, className);
    return (React.createElement("div", Object.assign({ ref: ref, className: gridClasses, style: Object.assign({ gridRowGap: vSpacing, gridColumnGap: hSpacing }, style), slot: slot }, rest), Children.map(children, (child) => {
        var _a, _b;
        if (!child)
            return null;
        const childSpan = getSpanFromString((_a = child.props['data-layout-span']) !== null && _a !== void 0 ? _a : defaultSpan, currentRange);
        const childClass = classes[`gridSpan${childSpan}`];
        // eslint-disable-next-line react/jsx-key
        const childrenWithGridLayout = [React.createElement("div", { className: childClass }, child)];
        const indentSpan = getIndentFromString((_b = child.props['data-layout-indent']) !== null && _b !== void 0 ? _b : defaultIndent, currentRange);
        if (indentSpan && indentSpan > 0) {
            childrenWithGridLayout.unshift(React.createElement("span", { className: classes[`gridSpan${indentSpan}`] }));
        }
        return childrenWithGridLayout;
    })));
});
Grid.displayName = 'Grid';
Grid.defaultProps = {
    hSpacing: '1rem',
    vSpacing: '1rem',
    defaultIndent: 'XL0 L0 M0 S0',
    defaultSpan: 'XL3 L3 M6 S12'
};
export { Grid };
