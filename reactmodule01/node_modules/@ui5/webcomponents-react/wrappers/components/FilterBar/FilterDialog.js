import group2Icon from '@ui5/webcomponents-icons/dist/group-2.js';
import listIcon from '@ui5/webcomponents-icons/dist/list.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { Children, cloneElement, useEffect, useReducer, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, ButtonDesign, FlexBoxDirection, FlexBoxJustifyContent, TableMode, TitleLevel, ToolbarStyle } from '../../enums';
import { ACTIVE, ALL, BASIC, CANCEL, FIELD, FIELDS_BY_ATTRIBUTE, FILTERS, GROUP_VIEW, HIDE_VALUES, LIST_VIEW, MANDATORY, OK, RESET, SEARCH_FOR_FILTERS, SHOW_VALUES, VISIBLE, VISIBLE_AND_ACTIVE } from '../../i18n/i18n-defaults';
import { addCustomCSSWithScoping } from '../../internal/addCustomCSSWithScoping';
import { stopPropagation } from '../../internal/stopPropagation';
import { Bar, Button, Dialog, Icon, Input, Option, Panel, SegmentedButton, SegmentedButtonItem, Select, Table, TableColumn, Title } from '../../webComponents';
import { FlexBox } from '../FlexBox';
import { Toolbar } from '../Toolbar';
import { ToolbarSpacer } from '../ToolbarSpacer';
import styles from './FilterBarDialog.jss';
import { filterValue, syncRef } from './utils';
addCustomCSSWithScoping('ui5-table', `
/* hide table header of panel table */
:host([data-component-name="FilterBarDialogPanelTable"]) thead {
  visibility: collapse;
}
/* don't display border of panel table */
:host([data-component-name="FilterBarDialogPanelTable"]) table {
  border-collapse: unset;
}

:host([data-component-name="FilterBarDialogPanelTable"]) .ui5-table-root {
  border-bottom: none;
}
/* don't display select all checkbox */
:host([data-component-name="FilterBarDialogPanelTable"]) thead th.ui5-table-select-all-column [ui5-checkbox],
:host([data-component-name="FilterBarDialogTable"]) thead th.ui5-table-select-all-column [ui5-checkbox] {
 visibility: hidden;
}
 `);
const getActiveFilters = (activeFilterAttribute, filter) => {
    var _a, _b, _c, _d, _e;
    switch (activeFilterAttribute) {
        case 'all':
            return true;
        case 'visible':
            return (_a = filter.props) === null || _a === void 0 ? void 0 : _a.visibleInFilterBar;
        case 'active':
            return (_b = filter.props) === null || _b === void 0 ? void 0 : _b.active;
        case 'visibleAndActive':
            return ((_c = filter.props) === null || _c === void 0 ? void 0 : _c.visibleInFilterBar) && ((_d = filter.props) === null || _d === void 0 ? void 0 : _d.active);
        case 'mandatory':
            return (_e = filter.props) === null || _e === void 0 ? void 0 : _e.required;
        default:
            return true;
    }
};
const compareObjects = (firstObj, secondObj) => Object.keys(firstObj).find((first) => Object.keys(secondObj).every((second) => firstObj[second] !== secondObj[first]));
const useStyles = createUseStyles(styles, { name: 'FilterBarDialog' });
export const FilterDialog = (props) => {
    const { filterBarRefs, open, handleDialogClose, children, showRestoreButton, handleRestoreFilters, handleDialogSave, handleSelectionChange, handleDialogSearch, handleDialogCancel, onAfterFiltersDialogOpen, portalContainer, dialogRef, isListView, setIsListView, filteredAttribute, setFilteredAttribute } = props;
    const classes = useStyles();
    const [searchString, setSearchString] = useState('');
    const [toggledFilters, setToggledFilters] = useState({});
    const dialogRefs = useRef({});
    const dialogSearchRef = useRef(null);
    const [showValues, toggleValues] = useReducer((prev) => !prev, false);
    const [selectedFilters, setSelectedFilters] = useState(null);
    const [forceRequired, setForceRequired] = useState();
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const basicText = i18nBundle.getText(BASIC);
    const cancelText = i18nBundle.getText(CANCEL);
    const okText = i18nBundle.getText(OK);
    const searchForFiltersText = i18nBundle.getText(SEARCH_FOR_FILTERS);
    const filtersTitle = i18nBundle.getText(FILTERS);
    const resetText = i18nBundle.getText(RESET);
    const allText = i18nBundle.getText(ALL);
    const activeText = i18nBundle.getText(ACTIVE);
    const visibleText = i18nBundle.getText(VISIBLE);
    const visibleAndActiveText = i18nBundle.getText(VISIBLE_AND_ACTIVE);
    const mandatoryText = i18nBundle.getText(MANDATORY);
    const listViewText = i18nBundle.getText(LIST_VIEW);
    const groupViewText = i18nBundle.getText(GROUP_VIEW);
    const showValuesText = i18nBundle.getText(SHOW_VALUES);
    const hideValuesText = i18nBundle.getText(HIDE_VALUES);
    const fieldText = i18nBundle.getText(FIELD);
    const fieldsByAttributeText = i18nBundle.getText(FIELDS_BY_ATTRIBUTE);
    useEffect(() => {
        if (open) {
            dialogRef.current.show();
        }
    }, [open]);
    const handleSearch = (e) => {
        if (handleDialogSearch) {
            handleDialogSearch(enrichEventWithDetails(e, { value: e.target.value, element: e.target }));
        }
        setSearchString(e.target.value);
    };
    const handleSave = (e) => {
        handleDialogSave(e, dialogRefs.current, toggledFilters);
    };
    const handleClose = (e, isCancel = false) => {
        setSelectedFilters(null);
        stopPropagation(e);
        if (!isCancel) {
            handleSave(e);
            return;
        }
        handleDialogClose(e);
    };
    const handleCancel = (e) => {
        if (handleDialogCancel) {
            handleDialogCancel(enrichEventWithDetails(e));
        }
        handleDialogClose(e);
    };
    const handleRestore = (e) => {
        setSelectedFilters(null);
        handleRestoreFilters(e, 'dialog', { filters: Array.from(dialogRef.current.querySelectorAll('ui5-table-row')) });
    };
    const handleViewChange = (e) => {
        setIsListView(e.detail.selectedItem.dataset.id === 'list');
    };
    const renderChildren = () => {
        return children
            .filter((item) => {
            var _a, _b, _c;
            return (!!(item === null || item === void 0 ? void 0 : item.props) &&
                ((_a = item.props) === null || _a === void 0 ? void 0 : _a.visible) &&
                (((_c = (_b = item.props) === null || _b === void 0 ? void 0 : _b.label) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes(searchString.toLowerCase())) || searchString.length === 0) &&
                getActiveFilters(filteredAttribute, item));
        })
            .map((child) => {
            var _a;
            const filterBarItemRef = filterBarRefs.current[child.key];
            let filterItemProps = {};
            if (filterBarItemRef) {
                filterItemProps = filterValue(filterBarItemRef, child);
            }
            if (!child.props.children)
                return child;
            return cloneElement(child, {
                'data-with-values': showValues,
                'data-selected': selectedFilters !== null
                    ? !!((_a = selectedFilters === null || selectedFilters === void 0 ? void 0 : selectedFilters[child.key]) === null || _a === void 0 ? void 0 : _a.selected)
                    : child.props.visibleInFilterBar || child.props.required || child.type.displayName !== 'FilterGroupItem',
                'data-react-key': child.key,
                children: Object.assign(Object.assign({}, child.props.children), { props: Object.assign(Object.assign({}, child.props.children.props), filterItemProps), ref: (node) => {
                        if (node) {
                            dialogRefs.current[child.key] = node;
                            syncRef(child.props.children.ref, node);
                        }
                    } })
            });
        });
    };
    const handleAttributeFilterChange = (e) => {
        setFilteredAttribute(e.detail.selectedOption.dataset.id);
    };
    const handleCheckBoxChange = (e) => {
        var _a;
        e.preventDefault();
        const prevRowsByKey = e.detail.previouslySelectedRows.reduce((acc, prevSelRow) => (Object.assign(Object.assign({}, acc), { [prevSelRow.dataset.reactKey]: prevSelRow })), {});
        const rowsByKey = e.detail.selectedRows.reduce((acc, selRow) => (Object.assign(Object.assign({}, acc), { [selRow.dataset.reactKey]: selRow })), {});
        const changedRowKey = e.detail.previouslySelectedRows > e.detail.selectedRows
            ? compareObjects(prevRowsByKey, rowsByKey)
            : compareObjects(rowsByKey, prevRowsByKey);
        const element = rowsByKey[changedRowKey] || prevRowsByKey[changedRowKey];
        // todo: workaround until specific rows can be disabled
        if (((_a = element.dataset) === null || _a === void 0 ? void 0 : _a.required) === 'true') {
            setForceRequired(element);
            return;
        }
        setSelectedFilters(Object.assign(Object.assign({}, prevRowsByKey), rowsByKey));
        if (typeof handleSelectionChange === 'function') {
            handleSelectionChange(enrichEventWithDetails(e, { element, checked: element.selected }));
        }
        setToggledFilters((prev) => {
            return Object.assign(Object.assign({}, prev), { [changedRowKey]: element.selected });
        });
    };
    useEffect(() => {
        if (forceRequired) {
            forceRequired.setAttribute('selected', 'true');
            setForceRequired(undefined);
        }
    }, [forceRequired]);
    const renderGroups = () => {
        const groups = {};
        Children.forEach(renderChildren(), (child) => {
            var _a;
            const childGroups = (_a = child.props.groupName) !== null && _a !== void 0 ? _a : 'default';
            if (groups[childGroups]) {
                groups[childGroups].push(child);
            }
            else {
                groups[childGroups] = [child];
            }
        });
        const filterGroups = Object.keys(groups)
            .sort((x, y) => (x === 'default' ? -1 : y === 'role' ? 1 : 0))
            .map((item, index) => {
            return (React.createElement(Panel, { headerText: item === 'default' ? basicText : item, className: classes.groupPanel, key: `${item === 'default' ? basicText : item}${index}` },
                React.createElement(Table, { className: classes.table, mode: TableMode.MultiSelect, "data-component-name": "FilterBarDialogPanelTable", onSelectionChange: handleCheckBoxChange }, groups[item])));
        });
        return filterGroups;
    };
    return createPortal(React.createElement(Dialog, { ref: dialogRef, "data-component-name": "FilterBarDialog", onAfterClose: handleClose, onAfterOpen: onAfterFiltersDialogOpen, resizable: true, draggable: true, className: classes.dialogComponent, preventFocusRestore: true, header: React.createElement(Bar, { design: BarDesign.Header, startContent: React.createElement(Title, { level: TitleLevel.H4, title: filtersTitle }, filtersTitle), endContent: showRestoreButton && (React.createElement(Button, { design: ButtonDesign.Transparent, onClick: handleRestore }, resetText)) }), footer: React.createElement(Bar, { design: BarDesign.Footer, endContent: React.createElement(FlexBox, { justifyContent: FlexBoxJustifyContent.End, className: classes.footer },
                React.createElement(Button, { onClick: handleSave, "data-component-name": "FilterBarDialogSaveBtn", design: ButtonDesign.Emphasized }, okText),
                React.createElement(Button, { design: ButtonDesign.Transparent, onClick: handleCancel, "data-component-name": "FilterBarDialogCancelBtn" }, cancelText)) }) },
        React.createElement(FlexBox, { direction: FlexBoxDirection.Column, className: classes.subheaderContainer },
            React.createElement(Toolbar, { className: classes.subheader, toolbarStyle: ToolbarStyle.Clear },
                React.createElement(Select, { onChange: handleAttributeFilterChange, title: fieldsByAttributeText, accessibleName: fieldsByAttributeText },
                    React.createElement(Option, { selected: filteredAttribute === 'all', "data-id": "all" }, allText),
                    React.createElement(Option, { selected: filteredAttribute === 'visible', "data-id": "visible" }, visibleText),
                    React.createElement(Option, { selected: filteredAttribute === 'active', "data-id": "active" }, activeText),
                    React.createElement(Option, { selected: filteredAttribute === 'visibleAndActive', "data-id": "visibleAndActive" }, visibleAndActiveText),
                    React.createElement(Option, { selected: filteredAttribute === 'mandatory', "data-id": "mandatory" }, mandatoryText)),
                React.createElement(ToolbarSpacer, null),
                React.createElement(Button, { design: ButtonDesign.Transparent, onClick: toggleValues, "aria-live": "polite" }, showValues ? hideValuesText : showValuesText),
                React.createElement(SegmentedButton, { onSelectionChange: handleViewChange },
                    React.createElement(SegmentedButtonItem, { icon: listIcon, "data-id": "list", pressed: isListView, accessibleName: listViewText }),
                    React.createElement(SegmentedButtonItem, { icon: group2Icon, "data-id": "group", pressed: !isListView, accessibleName: groupViewText }))),
            React.createElement(FlexBox, { className: classes.searchInputContainer },
                React.createElement(Input, { noTypeahead: true, placeholder: searchForFiltersText, onInput: handleSearch, showClearIcon: true, icon: React.createElement(Icon, { name: searchIcon }), ref: dialogSearchRef, className: classes.searchInput }))),
        React.createElement(Table, { "data-component-name": "FilterBarDialogTable", hideNoData: !isListView, className: classes.table, mode: TableMode.MultiSelect, onSelectionChange: handleCheckBoxChange, columns: React.createElement(React.Fragment, null,
                React.createElement(TableColumn, null, fieldText),
                !showValues && React.createElement(TableColumn, { className: classes.tHactive }, activeText)) }, isListView && renderChildren()),
        !isListView && renderGroups()), portalContainer);
};
