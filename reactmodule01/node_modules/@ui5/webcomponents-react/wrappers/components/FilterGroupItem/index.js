var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxDirection } from '../../enums';
import { BusyIndicatorSize } from '../../enums/BusyIndicatorSize';
import { Icon, TableCell, TableRow } from '../../webComponents';
import { BusyIndicator } from '../../webComponents/BusyIndicator';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
import styles from './FilterGroupItem.jss';
const useStyles = createUseStyles(styles, { name: 'FilterGroupItem' });
/**
 * Represents a filter belonging to the `FilterBar`.
 */
export const FilterGroupItem = forwardRef((props, ref) => {
    const classes = useStyles();
    const { groupName, considerGroupName, label, labelTooltip, required, visible, visibleInFilterBar, children, loading, className, slot, active } = props, rest = __rest(props, ["groupName", "considerGroupName", "label", "labelTooltip", "required", "visible", "visibleInFilterBar", "children", "loading", "className", "slot", "active"]);
    const inFB = props['data-in-fb'];
    const withValues = props['data-with-values'];
    const selected = props['data-selected'];
    if (!required && (!visible || (inFB && !visibleInFilterBar)))
        return null;
    // todo use context instead of data attributes
    if (!inFB) {
        return (
        //todo: disable selection for required fields when it's possible, or the table is fully controllable (https://github.com/SAP/ui5-webcomponents/issues/5662)
        React.createElement(TableRow, { "data-react-key": props['data-react-key'], selected: selected, "data-required": required },
            React.createElement(TableCell, null,
                React.createElement(FlexBox, { direction: FlexBoxDirection.Column },
                    React.createElement(Label, { className: classes.dialogCellLabel, title: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label, required: required }, label),
                    withValues && children)),
            !withValues && (React.createElement(TableCell, { className: classes.dialogActiveCell }, active && React.createElement(Icon, { name: "circle-task-2", className: classes.dialogActiveIcon })))));
    }
    return (React.createElement("div", Object.assign({ ref: ref, slot: slot }, rest, { className: clsx(classes.filterItem, className) }),
        React.createElement("div", { className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog },
            React.createElement(FlexBox, null,
                React.createElement(Label, { title: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label, required: required }, `${considerGroupName && groupName !== 'default' ? `${groupName}: ` : ''}
          ${label}`)),
            loading ? (React.createElement(BusyIndicator, { className: classes.loadingContainer, active: true, size: BusyIndicatorSize.Small })) : (children))));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
    groupName: 'default',
    visible: true,
    required: false,
    label: ''
};
