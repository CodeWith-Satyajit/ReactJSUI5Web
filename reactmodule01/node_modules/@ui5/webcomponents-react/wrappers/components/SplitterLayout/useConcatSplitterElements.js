import { CssSizeVariables } from '@ui5/webcomponents-react-base';
import React, { Children, cloneElement, useMemo } from 'react';
import { Splitter } from '../Splitter';
export const useConcatSplitterElements = (concatSplitterElements) => {
    return useMemo(() => {
        if (React.isValidElement(concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.children)) {
            return concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.children;
        }
        const childrenArray = Children.toArray(concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.children).filter(React.isValidElement);
        let splitterCount = 0;
        const indicesWithSplitter = [];
        childrenArray.forEach((child, index) => {
            const splitterElementChild = childrenArray[index + splitterCount];
            if (childrenArray.length - splitterCount - 1 > index &&
                (splitterElementChild.props.resizable || splitterElementChild.props.resizable === undefined) &&
                splitterElementChild.props.minSize !== undefined) {
                childrenArray.splice(index + splitterCount + 1, 0, React.createElement(Splitter, { key: `splitter${index}`, height: concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.height, width: concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.width, vertical: concatSplitterElements === null || concatSplitterElements === void 0 ? void 0 : concatSplitterElements.vertical }));
                // -1 => prev element
                indicesWithSplitter.push(index + 1 + splitterCount - 1);
                ++splitterCount;
            }
            else if (index > 0 && (splitterElementChild === null || splitterElementChild === void 0 ? void 0 : splitterElementChild.props.resizable) === false) {
                const indexOfSplitter = childrenArray.findIndex((element) => element === splitterElementChild) - 1;
                if (childrenArray[indexOfSplitter].props.minSize === undefined) {
                    childrenArray.splice(indexOfSplitter, 1);
                }
                indicesWithSplitter.pop();
                --splitterCount;
            }
        });
        indicesWithSplitter.forEach((index) => {
            var _a, _b;
            const size = (_b = (_a = childrenArray[index]) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.size;
            if (size && size !== 'auto') {
                childrenArray[index] = cloneElement(childrenArray[index], {
                    size: `calc(${size} - ${CssSizeVariables.sapWcrSplitterSize})`
                });
            }
        });
        return childrenArray;
    }, [concatSplitterElements]);
};
