import { getI18nBundle } from '@ui5/webcomponents-base/dist/i18nBundle.js';
import { attachLanguageChange, detachLanguageChange } from '@ui5/webcomponents-base/dist/locale/languageChange.js';
import { getI18nContext } from '@ui5/webcomponents-react-base';
import React, { useCallback, useEffect, useReducer, useRef } from 'react';
const bundleReducer = (currentBundles, action) => {
    return Object.assign(Object.assign({}, currentBundles), action.payload);
};
export function I18nProvider({ children }) {
    const [i18nBundles, setI18nBundles] = useReducer(bundleReducer, {});
    const localBundles = useRef({});
    const isMounted = useRef(false);
    const updateBundles = useCallback(() => {
        Promise.all(Object.keys(localBundles.current).map((bundleName) => getI18nBundle(bundleName))).then((bundles) => {
            const bundleMap = bundles.reduce((acc, bundle) => (Object.assign(Object.assign({}, acc), { [bundle.packageName]: bundle })), {});
            if (isMounted.current) {
                setI18nBundles({
                    payload: bundleMap
                });
            }
        });
    }, []);
    const setI18nBundle = useCallback((name, bundle) => {
        localBundles.current[name] = bundle;
        updateBundles();
    }, []);
    useEffect(() => {
        isMounted.current = true;
        attachLanguageChange(updateBundles);
        return () => {
            isMounted.current = false;
            detachLanguageChange(updateBundles);
        };
    }, []);
    const Context = getI18nContext();
    return (React.createElement(Context.Provider, { value: {
            i18nBundles,
            setI18nBundle
        } }, children));
}
