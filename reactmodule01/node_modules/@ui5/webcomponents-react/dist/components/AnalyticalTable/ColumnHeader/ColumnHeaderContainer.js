var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ThemingParameters } from '@ui5/webcomponents-react-base';
import React, { forwardRef, Fragment } from 'react';
import { createUseStyles } from 'react-jss';
import { ColumnHeader } from './index';
const styles = {
    resizer: {
        display: 'inline-block',
        width: '3px',
        height: '100%',
        position: 'absolute',
        bottom: 0,
        top: 0,
        zIndex: 1,
        cursor: 'col-resize',
        '&:hover, &:active': {
            backgroundColor: ThemingParameters.sapContent_DragAndDropActiveColor
        }
    }
};
const useStyles = createUseStyles(styles, { name: 'Resizer' });
export const ColumnHeaderContainer = forwardRef((props, ref) => {
    const { headerProps, headerGroup, onSort, onGroupByChanged, onDragStart, onDragOver, onDrop, onDragEnter, onDragEnd, dragOver, resizeInfo, isRtl, portalContainer, uniqueId, columnVirtualizer, scaleXFactor } = props;
    const classes = useStyles();
    return (React.createElement("div", Object.assign({}, headerProps, { style: { width: `${columnVirtualizer.getTotalSize()}px` }, ref: ref, "data-component-name": "AnalyticalTableHeaderRow" }), columnVirtualizer.getVirtualItems().map((virtualColumn, index) => {
        const column = headerGroup.headers[virtualColumn.index];
        if (!column) {
            return null;
        }
        const isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
        const resizerDirectionStyle = isRtl
            ? {
                right: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
                transform: 'translateX(50%)'
            }
            : {
                left: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
                transform: 'translateX(-50%)'
            };
        const _a = column.getHeaderProps(), { key } = _a, rest = __rest(_a, ["key"]);
        return (React.createElement(Fragment, { key: key },
            column.canResize && column.getResizerProps && (React.createElement("div", Object.assign({}, column.getResizerProps(), { "data-resizer": true, className: classes.resizer, style: resizerDirectionStyle }))),
            React.createElement(ColumnHeader, Object.assign({}, rest, { visibleColumnIndex: index, columnIndex: virtualColumn.index, onSort: onSort, onGroupBy: onGroupByChanged, onDragStart: onDragStart, onDragOver: onDragOver, onDrop: onDrop, onDragEnter: onDragEnter, onDragEnd: onDragEnd, dragOver: column.id === dragOver, headerTooltip: column.headerTooltip, isDraggable: (column.canReorder || !column.disableDragAndDrop) && !resizeInfo.isResizingColumn, virtualColumn: virtualColumn, isRtl: isRtl, portalContainer: portalContainer, uniqueId: uniqueId, scaleXFactor: scaleXFactor }), column.render('Header'))));
    })));
});
ColumnHeaderContainer.displayName = 'ColumnHeaderContainer';
