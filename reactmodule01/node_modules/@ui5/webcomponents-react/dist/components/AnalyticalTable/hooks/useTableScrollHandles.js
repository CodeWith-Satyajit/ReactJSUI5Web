import { useEffect, useRef } from 'react';
export const useTableScrollHandles = (ref) => {
    let analyticalTableRef = useRef(null);
    if (ref) {
        analyticalTableRef = ref;
    }
    const scrollToRef = useRef({});
    useEffect(() => {
        if (analyticalTableRef.current) {
            Object.assign(analyticalTableRef.current, {
                scrollTo: (offset, align) => {
                    var _a;
                    if (typeof ((_a = scrollToRef.current) === null || _a === void 0 ? void 0 : _a.scrollToOffset) === 'function') {
                        scrollToRef.current.scrollToOffset(offset, { align });
                    }
                },
                scrollToItem: (index, align) => {
                    var _a;
                    if (typeof ((_a = scrollToRef.current) === null || _a === void 0 ? void 0 : _a.scrollToIndex) === 'function') {
                        scrollToRef.current.scrollToIndex(index, { align });
                    }
                },
                horizontalScrollTo: (offset, align) => {
                    var _a;
                    if (typeof ((_a = scrollToRef.current) === null || _a === void 0 ? void 0 : _a.horizontalScrollToOffset) === 'function') {
                        scrollToRef.current.horizontalScrollToOffset(offset, { align });
                    }
                },
                horizontalScrollToItem: (index, align) => {
                    var _a;
                    if (typeof ((_a = scrollToRef.current) === null || _a === void 0 ? void 0 : _a.horizontalScrollToIndex) === 'function') {
                        scrollToRef.current.horizontalScrollToIndex(index, { align });
                    }
                }
            });
        }
    }, []);
    return [analyticalTableRef, scrollToRef];
};
