import { actions } from 'react-table';
export const stateReducer = (prevState, action) => {
    const { payload } = action;
    if (prevState.isRtl && action.type === actions.columnResizing) {
        const { clientX } = action;
        const { startX, columnWidth, headerIdWidths } = prevState.columnResizing;
        const deltaX = startX - clientX;
        const percentageDeltaX = deltaX / columnWidth;
        const newColumnWidths = {};
        headerIdWidths.forEach(([headerId, headerWidth]) => {
            newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
        });
        return Object.assign(Object.assign({}, prevState), { columnResizing: Object.assign(Object.assign({}, prevState.columnResizing), { columnWidths: Object.assign(Object.assign({}, prevState.columnResizing.columnWidths), newColumnWidths) }) });
    }
    switch (action.type) {
        case 'TABLE_RESIZE':
            return Object.assign(Object.assign({}, prevState), { tableClientWidth: payload.tableClientWidth });
        case 'VISIBLE_ROWS':
            return Object.assign(Object.assign({}, prevState), { visibleRows: payload.visibleRows });
        case 'TABLE_SCROLLING_ENABLED':
            return Object.assign(Object.assign({}, prevState), { isScrollable: payload.isScrollable });
        case 'SET_SELECTED_ROW_IDS':
            return Object.assign(Object.assign({}, prevState), { selectedRowIds: payload.selectedRowIds });
        case 'SET_POPIN_COLUMNS':
            return Object.assign(Object.assign({}, prevState), { popInColumns: payload });
        case 'INTERACTIVE_ROWS_HAVE_POPIN':
            return Object.assign(Object.assign({}, prevState), { interactiveRowsHavePopIn: payload });
        case 'IS_RTL':
            return Object.assign(Object.assign({}, prevState), { isRtl: payload.isRtl });
        case 'SUB_COMPONENTS_HEIGHT':
            return Object.assign(Object.assign({}, prevState), { subComponentsHeight: payload });
        case 'TABLE_COL_RESIZED':
            return Object.assign(Object.assign({}, prevState), { tableColResized: payload });
        case 'SELECT_ROW_CB':
            return Object.assign(Object.assign({}, prevState), { selectedRowPayload: payload });
        default:
            return prevState;
    }
};
