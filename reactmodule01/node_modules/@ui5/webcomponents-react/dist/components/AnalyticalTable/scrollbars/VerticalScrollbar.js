import { ThemingParameters } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxDirection } from '../../../enums/FlexBoxDirection';
import { GlobalStyleClasses } from '../../../enums/GlobalStyleClasses';
import { CustomThemingParameters } from '../../../themes/CustomVariables';
import { FlexBox } from '../../FlexBox';
const styles = {
    headerSection: {
        boxSizing: 'border-box',
        borderBlockStart: CustomThemingParameters.AnalyticalTableOuterBorderBlock,
        borderInlineEnd: CustomThemingParameters.AnalyticalTableOuterBorderInline,
        borderBlockEnd: `${CustomThemingParameters.AnalyticalTableHeaderBorderWidth} solid ${ThemingParameters.sapList_HeaderBorderColor}`,
        backgroundColor: ThemingParameters.sapList_HeaderBackground,
        borderInlineStart: `1px solid ${ThemingParameters.sapList_BorderColor}`,
        marginInlineStart: '-1px'
    },
    scrollbar: {
        overflowY: 'auto',
        borderInlineEnd: CustomThemingParameters.AnalyticalTableOuterBorderInline,
        borderBlockEnd: `1px solid ${ThemingParameters.sapList_TableFooterBorder}`,
        borderInlineStart: `1px solid ${ThemingParameters.sapList_BorderColor}`,
        marginInlineStart: '-1px'
    },
    bottomSection: {
        flexGrow: 1,
        backgroundColor: ThemingParameters.sapList_FooterBackground,
        boxSizing: 'border-box',
        borderInlineEnd: CustomThemingParameters.AnalyticalTableOuterBorderInline
    }
};
const useStyles = createUseStyles(styles, { name: 'VerticalScrollbar' });
export const VerticalScrollbar = forwardRef((props, ref) => {
    var _a, _b;
    const { internalRowHeight, tableRef, minRows, rows, handleVerticalScrollBarScroll, popInRowHeight, tableBodyHeight } = props;
    const classes = useStyles();
    const hasHorizontalScrollbar = ((_a = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth) !== ((_b = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current) === null || _b === void 0 ? void 0 : _b.scrollWidth);
    const horizontalScrollbarSectionStyles = clsx(hasHorizontalScrollbar && classes.bottomSection);
    return (React.createElement(FlexBox, { direction: FlexBoxDirection.Column, style: { position: 'relative' }, "data-component-name": "AnalyticalTableVerticalScrollbarContainer" },
        React.createElement("div", { style: {
                height: `${internalRowHeight}px`
            }, className: classes.headerSection }),
        React.createElement("div", { ref: ref, style: {
                height: tableRef.current ? `${tableBodyHeight}px` : '0'
            }, onScroll: handleVerticalScrollBarScroll, "data-native-scrollbar": props['data-native-scrollbar'], className: `${GlobalStyleClasses.sapScrollBar} ${classes.scrollbar}`, "data-component-name": "AnalyticalTableVerticalScrollbar" },
            React.createElement("div", { style: {
                    height: `${Math.max(minRows, rows.length) * popInRowHeight}px`,
                    width: '1px',
                    backgroundColor: ThemingParameters.sapList_Background
                } })),
        React.createElement("div", { className: horizontalScrollbarSectionStyles })));
});
VerticalScrollbar.displayName = 'VerticalScrollbar';
