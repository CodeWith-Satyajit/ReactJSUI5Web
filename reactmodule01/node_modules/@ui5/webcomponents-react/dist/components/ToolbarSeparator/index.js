var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CssSizeVariables, ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { SEPARATOR } from '../../i18n/i18n-defaults';
const styles = {
    separator: {
        width: '0.0625rem',
        height: CssSizeVariables.sapWcrToolbarSeparatorHeight,
        background: ThemingParameters.sapToolbar_SeparatorColor
    }
};
const useStyles = createUseStyles(styles, { name: 'ToolbarSeparator' });
const ToolbarSeparator = forwardRef((props, ref) => {
    const { style, className } = props, rest = __rest(props, ["style", "className"]);
    const classes = useStyles();
    const separatorClasses = clsx(classes.separator, className);
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    return (React.createElement("div", Object.assign({ ref: ref, style: style, className: separatorClasses, "aria-label": i18nBundle.getText(SEPARATOR) }, rest)));
});
ToolbarSeparator.displayName = 'ToolbarSeparator';
export { ToolbarSeparator };
