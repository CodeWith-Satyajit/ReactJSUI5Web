var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { FlexBoxJustifyContent } from '../../enums/FlexBoxJustifyContent';
import { FlexBoxWrap } from '../../enums/FlexBoxWrap';
import { styles } from './FlexBox.jss';
const useStyles = createUseStyles(styles, { name: 'FlexBox' });
/**
 * The `FlexBox` builds the container for a flexible box layout by leveraging the CSS flexbox layout.
 */
const FlexBox = forwardRef((props, ref) => {
    const { children, justifyContent, direction, alignItems, displayInline, wrap, style, className, fitContainer, slot, as } = props, rest = __rest(props, ["children", "justifyContent", "direction", "alignItems", "displayInline", "wrap", "style", "className", "fitContainer", "slot", "as"]);
    const classes = useStyles();
    const flexBoxClasses = clsx(classes.flexBox, classes[`flexBoxDirection${direction}`], classes[`justifyContent${justifyContent}`], classes[`alignItems${alignItems}`], classes[`flexWrap${wrap}`], displayInline && classes.flexBoxDisplayInline, fitContainer && classes.fitContainer, className);
    const CustomTag = as;
    return (React.createElement(CustomTag, Object.assign({ ref: ref, className: flexBoxClasses, style: style, slot: slot }, rest), children));
});
FlexBox.defaultProps = {
    as: 'div',
    alignItems: FlexBoxAlignItems.Stretch,
    direction: FlexBoxDirection.Row,
    displayInline: false,
    fitContainer: false,
    justifyContent: FlexBoxJustifyContent.Start,
    wrap: FlexBoxWrap.NoWrap
};
FlexBox.displayName = 'FlexBox';
export { FlexBox };
