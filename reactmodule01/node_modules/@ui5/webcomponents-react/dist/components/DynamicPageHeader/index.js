var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import React, { forwardRef, useMemo } from 'react';
import { createUseStyles } from 'react-jss';
import { DynamicPageHeaderStyles } from './DynamicPageHeader.jss';
const useStyles = createUseStyles(DynamicPageHeaderStyles, { name: 'DynamicPageHeader' });
/**
 * The dynamic page header contains the header content of the dynamic page.
 * This component can be collapsed and pinned by the anchorbar.
 */
const DynamicPageHeader = forwardRef((props, ref) => {
    const { children, headerPinned, topHeaderHeight, className, style } = props, rest = __rest(props, ["children", "headerPinned", "topHeaderHeight", "className", "style"]);
    const headerStyles = useMemo(() => {
        if (headerPinned) {
            return Object.assign(Object.assign({}, style), { top: `${topHeaderHeight}px`, zIndex: 1 });
        }
        return style;
    }, [headerPinned, topHeaderHeight, style]);
    const classes = useStyles();
    const classNames = clsx(classes.header, className);
    return (React.createElement("div", Object.assign({ ref: ref }, rest, { className: classNames, "data-component-name": "DynamicPageHeader", style: headerStyles }), children));
});
DynamicPageHeader.displayName = 'DynamicPageHeader';
export { DynamicPageHeader };
