var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { forwardRef, useContext } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { ListItemType } from '../../enums/ListItemType';
import { ValueState } from '../../enums/ValueState';
import { MessageViewContext } from '../../internal/MessageViewContext';
import { CustomListItem } from '../../webComponents/CustomListItem';
import { Icon } from '../../webComponents/Icon';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
import { getIconNameForType } from './utils';
const useStyles = createUseStyles({
    listItem: {
        height: CssSizeVariables.sapWcrMessageViewListItemHeightSingle
    },
    message: {
        padding: '0.25rem 0',
        width: '100%',
        maxWidth: '100%',
        overflow: 'hidden',
        paddingRight: '1rem',
        boxSizing: 'border-box'
    },
    withSubtitle: {
        height: CssSizeVariables.sapWcrMessageViewListItemHeightByLine
    },
    withChildren: {
        paddingRight: '0rem'
    },
    iconContainer: {
        width: '3rem',
        minWidth: '3rem',
        height: '2.25rem',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        width: '1rem',
        height: '1rem'
    },
    title: {
        fontFamily: ThemingParameters.sapFontHeaderFamily,
        fontSize: ThemingParameters.sapFontHeader6Size,
        color: ThemingParameters.sapGroup_TitleTextColor,
        maxWidth: '100%',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        flex: '1 1 auto',
        '& + $subtitle': {
            marginTop: '0.25rem',
            cursor: 'inherit'
        }
    },
    subtitle: {},
    counter: {
        color: ThemingParameters.sapContent_MarkerTextColor,
        fontFamily: ThemingParameters.sapFontFamily,
        fontSize: ThemingParameters.sapFontSize,
        paddingLeft: '1rem',
        flex: 'none'
    },
    navigation: {
        height: '0.875rem',
        width: '0.875rem',
        padding: '0 0.9375rem',
        flexShrink: 0
    },
    typeError: {
        '& $icon': {
            color: ThemingParameters.sapNegativeElementColor
        }
    },
    typeSuccess: {
        '& $icon': {
            color: ThemingParameters.sapPositiveElementColor
        }
    },
    typeWarning: {
        ' & $icon': {
            color: ThemingParameters.sapCriticalElementColor
        }
    },
    typeInformation: {
        '& $icon': {
            // color: ThemingParameters.sapInformativeElementColor
            color: ThemingParameters.sapNeutralElementColor
        }
    },
    typeNone: {
        '& $icon': {
            color: ThemingParameters.sapNeutralElementColor
        }
    }
}, { name: 'MessageItem' });
const MessageItem = forwardRef((props, ref) => {
    const { titleText, subtitleText, counter, type, children, className } = props, rest = __rest(props, ["titleText", "subtitleText", "counter", "type", "children", "className"]);
    const { selectMessage } = useContext(MessageViewContext);
    const classes = useStyles();
    const listItemClasses = clsx(classes.listItem, Reflect.get(classes, `type${type}`), className, subtitleText && classes.withSubtitle);
    const messageClasses = clsx(classes.message, children && classes.withChildren);
    const handleListItemClick = (e) => {
        if (children) {
            selectMessage(props);
            if (typeof rest.onClick === 'function') {
                rest.onClick(e);
            }
        }
    };
    return (React.createElement(CustomListItem, Object.assign({ onClick: handleListItemClick, "data-title": titleText, "data-type": type, type: children ? ListItemType.Active : ListItemType.Inactive }, rest, { className: listItemClasses, ref: ref }),
        React.createElement(FlexBox, { alignItems: FlexBoxAlignItems.Center, className: messageClasses },
            React.createElement("div", { className: classes.iconContainer },
                React.createElement(Icon, { name: getIconNameForType(type), className: classes.icon })),
            React.createElement(FlexBox, { direction: FlexBoxDirection.Column, style: { flex: 'auto', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' } },
                titleText && React.createElement("span", { className: classes.title }, titleText),
                subtitleText && React.createElement(Label, { className: classes.subtitle }, subtitleText)),
            counter != null && React.createElement("span", { className: classes.counter }, counter),
            children && React.createElement(Icon, { className: classes.navigation, name: "slim-arrow-right" }))));
});
MessageItem.displayName = 'MessageItem';
MessageItem.defaultProps = {
    type: ValueState.Error
};
export { MessageItem };
