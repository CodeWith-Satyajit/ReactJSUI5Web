var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import iconDown from '@ui5/webcomponents-icons/dist/down.js';
import iconUp from '@ui5/webcomponents-icons/dist/up.js';
import { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { Children, cloneElement, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { DeviationIndicator, ValueColor } from '../../enums';
import { ARIA_DESC_CARD_HEADER, NUMERICCONTENT_DEVIATION_DOWN, NUMERICCONTENT_DEVIATION_UP, SEMANTIC_COLOR_CRITICAL, SEMANTIC_COLOR_ERROR, SEMANTIC_COLOR_GOOD, SEMANTIC_COLOR_NEUTRAL } from '../../i18n/i18n-defaults';
import { flattenFragments } from '../../internal/utils';
import { Icon } from '../../webComponents';
import styles from './AnalyticalCardHeader.jss';
const useStyles = createUseStyles(styles, {
    name: 'AnalyticalCardHeader'
});
const semanticColorMap = new Map([
    [ValueColor.Neutral, SEMANTIC_COLOR_NEUTRAL],
    [ValueColor.Good, SEMANTIC_COLOR_GOOD],
    [ValueColor.Critical, SEMANTIC_COLOR_CRITICAL],
    [ValueColor.Error, SEMANTIC_COLOR_ERROR]
]);
const deviationMap = new Map([
    [DeviationIndicator.Up, NUMERICCONTENT_DEVIATION_UP],
    [DeviationIndicator.Down, NUMERICCONTENT_DEVIATION_DOWN]
]);
export const AnalyticalCardHeader = forwardRef((props, ref) => {
    var _a, _b;
    const { titleText, subtitleText, value, scale, state, onClick, className, description, status, unitOfMeasurement, trend, style, children, id } = props, rest = __rest(props, ["titleText", "subtitleText", "value", "scale", "state", "onClick", "className", "description", "status", "unitOfMeasurement", "trend", "style", "children", "id"]);
    const classes = useStyles();
    const headerClasses = clsx(classes.cardHeader, onClick && classes.cardHeaderClickable, className);
    const valueAndUnitClasses = clsx(classes.mainIndicator, state === ValueColor.Good && classes.good, state === ValueColor.Error && classes.error, state === ValueColor.Critical && classes.critical, state === ValueColor.Neutral && classes.neutral);
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const uniqueHeaderId = useIsomorphicId();
    const headerId = id !== null && id !== void 0 ? id : uniqueHeaderId;
    const sideIndicators = flattenFragments(children);
    const sideIndicatorIds = Children.toArray(sideIndicators).map((child, idx) => {
        var _a, _b;
        return (_b = (_a = child.props) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : `${headerId}-indicator${idx}`;
    });
    let kpiAriaLabel = `${value}${scale}\n`;
    if (trend && trend !== DeviationIndicator.None) {
        kpiAriaLabel += i18nBundle.getText((_a = deviationMap.get(trend)) !== null && _a !== void 0 ? _a : '');
        kpiAriaLabel += '\n';
    }
    if (state && state !== ValueColor.None) {
        kpiAriaLabel += i18nBundle.getText((_b = semanticColorMap.get(state)) !== null && _b !== void 0 ? _b : '');
    }
    let cardLabelledBy = `${headerId}-title`;
    if (subtitleText) {
        cardLabelledBy += ` ${headerId}-subtitle`;
    }
    if (unitOfMeasurement) {
        cardLabelledBy += ` ${headerId}-unitOfMeasurement`;
    }
    cardLabelledBy += ` ${headerId}-mainIndicator`;
    for (const sideIndicatorId of sideIndicatorIds) {
        cardLabelledBy += ` ${sideIndicatorId}`;
    }
    if (description) {
        cardLabelledBy += ` ${headerId}-description`;
    }
    return (React.createElement("div", Object.assign({ ref: ref, className: headerClasses, style: style, id: headerId, "data-sap-ui-fastnavgroup": "true", tabIndex: 0, role: "heading", "aria-roledescription": i18nBundle.getText(ARIA_DESC_CARD_HEADER), "aria-labelledby": cardLabelledBy }, rest, { onClick: onClick, slot: 'header' }),
        React.createElement("div", null,
            React.createElement("div", { className: classes.headerTitles },
                React.createElement("div", { className: classes.headerFirstLine },
                    React.createElement("span", { role: "heading", "aria-level": 3, className: classes.headerText, id: `${headerId}-title` }, titleText),
                    status && React.createElement("span", { className: classes.status }, status)),
                (subtitleText || unitOfMeasurement) && (React.createElement("div", { className: classes.headerSecondLine },
                    React.createElement("span", { id: `${headerId}-subtitle` }, subtitleText),
                    unitOfMeasurement && (React.createElement("span", { id: `${headerId}-unitOfMeasurement`, className: classes.unitOfMeasurement }, unitOfMeasurement))))),
            React.createElement("div", { className: classes.kpiContent },
                React.createElement("div", { className: valueAndUnitClasses, id: `${headerId}-mainIndicator`, "aria-label": kpiAriaLabel, role: "img" },
                    React.createElement("span", { className: classes.value }, value),
                    React.createElement("div", { className: classes.indicatorAndUnit },
                        trend !== DeviationIndicator.None && (React.createElement(Icon, { className: clsx(classes.indicator), name: trend === DeviationIndicator.Up ? iconUp : iconDown })),
                        React.createElement("div", { className: classes.unit }, scale))),
                React.createElement("div", { className: classes.indicatorGap }),
                React.createElement("div", { className: classes.sideIndicators }, sideIndicators.map((sideIndicator, index) => {
                    var _a;
                    return cloneElement(sideIndicator, {
                        id: (_a = sideIndicator.props.id) !== null && _a !== void 0 ? _a : `${headerId}-indicator${index}`
                    });
                }))),
            description && (React.createElement("span", { id: `${headerId}-description`, className: classes.description }, description)))));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
    trend: DeviationIndicator.None,
    state: ValueColor.None
};
