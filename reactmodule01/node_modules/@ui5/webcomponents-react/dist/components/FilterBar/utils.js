import { cloneElement } from 'react';
const inputTagNames = new Set([
    'UI5-COMBOBOX',
    'UI5-DATE-PICKER',
    'UI5-DATERANGE-PICKER',
    'UI5-DATETIME-PICKER',
    'UI5-DURATION-PICKER',
    'UI5-INPUT',
    'UI5-MULTI-INPUT',
    'UI5-RATING-INDICATOR',
    'UI5-STEP-INPUT',
    'UI5-TIME-PICKER'
]);
export const filterValue = (ref, child) => {
    var _a, _b;
    const tagName = ref.tagName;
    let filterItemProps = {};
    if (inputTagNames.has(tagName)) {
        filterItemProps = { value: (_a = ref.value) !== null && _a !== void 0 ? _a : '' };
    }
    if (tagName === 'UI5-SELECT' || tagName === 'UI5-MULTI-COMBOBOX') {
        const selectedIndices = Array.from(ref.children)
            .map((item, index) => (item.selected ? index : false))
            .filter((el) => el !== false);
        const selectedIndicesSet = new Set(selectedIndices);
        const options = (_b = child.props.children.props.children) === null || _b === void 0 ? void 0 : _b.map((item, index) => {
            if (selectedIndicesSet.has(index)) {
                return cloneElement(item, { selected: true });
            }
            return cloneElement(item, { selected: false });
        });
        filterItemProps = { children: options };
    }
    if (tagName === 'UI5-SWITCH' || tagName === 'UI5-CHECKBOX') {
        filterItemProps = { checked: ref.checked };
    }
    return filterItemProps;
};
export const renderSearchWithValue = (renderSearchElement, searchValue) => {
    var _a;
    return cloneElement(renderSearchElement, {
        value: searchValue !== null && searchValue !== void 0 ? searchValue : (_a = renderSearchElement === null || renderSearchElement === void 0 ? void 0 : renderSearchElement.props) === null || _a === void 0 ? void 0 : _a.value,
        'data-component-name': 'FilterBarSearch'
    });
};
export const syncRef = (ref, node) => {
    if (ref) {
        if (typeof ref === 'function') {
            ref(node);
        }
        else if (ref.hasOwnProperty('current')) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            ref.current = node;
        }
    }
};
