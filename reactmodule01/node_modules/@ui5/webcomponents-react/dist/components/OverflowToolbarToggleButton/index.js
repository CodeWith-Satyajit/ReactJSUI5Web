var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useContext } from 'react';
import { OverflowPopoverContext } from '../../internal/OverflowPopoverContext';
import { ToggleButton } from '../../webComponents';
/**
 * The `OverflowToolbarToggleButton` represents a toggle button that shows its text only when in the overflow area of a `Toolbar`.
 */
const OverflowToolbarToggleButton = forwardRef((props, ref) => {
    const { children } = props, rest = __rest(props, ["children"]);
    const { inPopover } = useContext(OverflowPopoverContext);
    return (React.createElement(ToggleButton, Object.assign({}, rest, { ref: ref }), inPopover ? children : ''));
});
OverflowToolbarToggleButton.displayName = 'OverflowToolbarButton';
export { OverflowToolbarToggleButton };
