var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { ValueColor } from '../../enums';
import { Text } from '../Text';
import { NumericSideIndicatorStyles } from './NumericSideIndicator.jss';
const useStyles = createUseStyles(NumericSideIndicatorStyles, { name: 'NumericSideIndicator' });
/**
 * Holds a set of side indicator attributes used in the NumericHeader component.
 */
export const NumericSideIndicator = forwardRef((props, ref) => {
    const { number, state, titleText, unit, className } = props, rest = __rest(props, ["number", "state", "titleText", "unit", "className"]);
    const classes = useStyles();
    return (React.createElement("div", Object.assign({ ref: ref, className: clsx(classes.numericSideIndicator, className) }, rest),
        React.createElement("span", { className: classes.title }, titleText),
        React.createElement("div", { className: clsx(classes.valueContainer, Reflect.get(classes, `state${state}`)) },
            React.createElement(Text, { className: classes.number }, number),
            React.createElement(Text, { className: classes.unit }, unit))));
});
NumericSideIndicator.displayName = 'NumericSideIndicator';
NumericSideIndicator.defaultProps = {
    state: ValueColor.None
};
