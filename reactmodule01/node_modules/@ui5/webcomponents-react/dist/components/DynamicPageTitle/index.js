var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { debounce, Device, useSyncRef } from '@ui5/webcomponents-react-base';
import clsx from 'clsx';
import React, { Children, forwardRef, useCallback, useEffect, useRef, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems, FlexBoxJustifyContent, ToolbarDesign, ToolbarStyle } from '../../enums';
import { stopPropagation } from '../../internal/stopPropagation';
import { flattenFragments } from '../../internal/utils';
import { FlexBox } from '../FlexBox';
import { Toolbar } from '../Toolbar';
import { ToolbarSeparator } from '../ToolbarSeparator';
import { ActionsSpacer } from './ActionsSpacer';
import { DynamicPageTitleStyles } from './DynamicPageTitle.jss';
const useStyles = createUseStyles(DynamicPageTitleStyles, { name: 'DynamicPageTitle' });
const enhanceActionsWithClick = (actions, ref) => flattenFragments(actions, Infinity).map((action) => React.cloneElement(action, {
    onClick: (e) => {
        var _a, _b;
        if (typeof ((_a = action.props) === null || _a === void 0 ? void 0 : _a.onClick) === 'function') {
            action.props.onClick(e);
        }
        if (((_b = ref.current) === null || _b === void 0 ? void 0 : _b.isOpen()) && !e.defaultPrevented) {
            ref.current.close();
        }
    }
}));
/**
 * The `DynamicPageTitle` component is part of the `DynamicPage` family and is used to serve as title of the `DynamicPage` and `ObjectPage`.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 */
const DynamicPageTitle = forwardRef((props, ref) => {
    var _a, _b;
    const _c = props, { actions, breadcrumbs, children, header, subHeader, showSubHeaderRight, navigationActions, className, style, onToggleHeaderContentVisibility, actionsToolbarProps, navigationActionsToolbarProps } = _c, rest = __rest(_c, ["actions", "breadcrumbs", "children", "header", "subHeader", "showSubHeaderRight", "navigationActions", "className", "style", "onToggleHeaderContentVisibility", "actionsToolbarProps", "navigationActionsToolbarProps"]);
    const classes = useStyles();
    const [componentRef, dynamicPageTitleRef] = useSyncRef(ref);
    const [showNavigationInTopArea, setShowNavigationInTopArea] = useState(undefined);
    const isMounted = useRef(false);
    const [isPhone, setIsPhone] = useState(((_b = Device.getCurrentRange((_a = dynamicPageTitleRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width)) === null || _b === void 0 ? void 0 : _b.name) === 'Phone');
    const containerClasses = clsx(classes.container, isPhone && classes.phone, className);
    const actionsOverflowPopoverRef = useRef(null);
    const navActionsOverflowPopoverRef = useRef(null);
    useEffect(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, [isMounted]);
    const { onClick: _0 } = rest, propsWithoutOmitted = __rest(rest, ["onClick"]);
    const onHeaderClick = useCallback((e) => {
        if (typeof (props === null || props === void 0 ? void 0 : props.onClick) === 'function') {
            props.onClick(e);
        }
        if (typeof onToggleHeaderContentVisibility === 'function' && !(props === null || props === void 0 ? void 0 : props['data-not-clickable'])) {
            onToggleHeaderContentVisibility(e);
        }
    }, [props === null || props === void 0 ? void 0 : props.onClick, onToggleHeaderContentVisibility, props === null || props === void 0 ? void 0 : props['data-not-clickable']]);
    useEffect(() => {
        const debouncedObserverFn = debounce(([titleContainer]) => {
            var _a, _b;
            // Firefox implements `borderBoxSize` as a single content rect, rather than an array
            const borderBoxSize = Array.isArray(titleContainer.borderBoxSize)
                ? titleContainer.borderBoxSize[0]
                : titleContainer.borderBoxSize;
            // Safari doesn't implement `borderBoxSize`
            const titleContainerWidth = (_a = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.inlineSize) !== null && _a !== void 0 ? _a : titleContainer.target.getBoundingClientRect().width;
            setIsPhone(((_b = Device.getCurrentRange(titleContainerWidth)) === null || _b === void 0 ? void 0 : _b.name) === 'Phone');
            if (titleContainerWidth < 1280 && !showNavigationInTopArea === true && isMounted.current) {
                setShowNavigationInTopArea(true);
            }
            else if (titleContainerWidth >= 1280 && !showNavigationInTopArea === false && isMounted.current) {
                setShowNavigationInTopArea(false);
            }
        }, 150);
        const observer = new ResizeObserver(debouncedObserverFn);
        if (dynamicPageTitleRef.current) {
            observer.observe(dynamicPageTitleRef.current);
        }
        return () => {
            debouncedObserverFn.cancel();
            observer.disconnect();
        };
    }, [dynamicPageTitleRef.current, showNavigationInTopArea, isMounted]);
    const handleActionsToolbarClick = (e) => {
        stopPropagation(e);
        if (typeof (actionsToolbarProps === null || actionsToolbarProps === void 0 ? void 0 : actionsToolbarProps.onClick) === 'function') {
            actionsToolbarProps.onClick(e);
        }
    };
    const handleNavigationActionsToolbarClick = (e) => {
        stopPropagation(e);
        if (typeof (navigationActionsToolbarProps === null || navigationActionsToolbarProps === void 0 ? void 0 : navigationActionsToolbarProps.onClick) === 'function') {
            navigationActionsToolbarProps.onClick(e);
        }
    };
    return (React.createElement(FlexBox, Object.assign({ className: containerClasses, style: style, ref: componentRef, "data-component-name": "DynamicPageTitle", onClick: onHeaderClick }, propsWithoutOmitted),
        (breadcrumbs || (navigationActions && showNavigationInTopArea)) && (React.createElement(FlexBox, { justifyContent: FlexBoxJustifyContent.SpaceBetween, "data-component-name": "DynamicPageTitleBreadcrumbs" },
            breadcrumbs && (React.createElement("div", { className: classes.breadcrumbs, onClick: stopPropagation }, breadcrumbs)),
            showNavigationInTopArea && (React.createElement(Toolbar, Object.assign({}, navigationActionsToolbarProps, { overflowButton: navigationActionsToolbarProps === null || navigationActionsToolbarProps === void 0 ? void 0 : navigationActionsToolbarProps.overflowButton, className: clsx(classes.toolbar, navigationActionsToolbarProps === null || navigationActionsToolbarProps === void 0 ? void 0 : navigationActionsToolbarProps.className), onClick: handleNavigationActionsToolbarClick, "data-component-name": "DynamicPageTitleNavActions", onOverflowChange: navigationActionsToolbarProps === null || navigationActionsToolbarProps === void 0 ? void 0 : navigationActionsToolbarProps.onOverflowChange, overflowPopoverRef: navActionsOverflowPopoverRef, design: ToolbarDesign.Auto, toolbarStyle: ToolbarStyle.Clear, active: true }),
                React.createElement(ActionsSpacer, { onClick: onHeaderClick, noHover: props === null || props === void 0 ? void 0 : props['data-not-clickable'] }),
                enhanceActionsWithClick(navigationActions, navActionsOverflowPopoverRef))))),
        React.createElement(FlexBox, { alignItems: FlexBoxAlignItems.Center, style: { flexGrow: 1, width: '100%' } },
            React.createElement(FlexBox, { className: classes.titleMainSection },
                header && (React.createElement("div", { className: classes.title, "data-component-name": "DynamicPageTitleHeader" }, header)),
                subHeader && showSubHeaderRight && (React.createElement("div", { className: classes.subTitle, "data-component-name": "DynamicPageTitleSubHeader" }, subHeader)),
                children && (React.createElement("div", { className: classes.content, "data-component-name": "DynamicPageTitleContent" }, children))),
            (actions || (!showNavigationInTopArea && navigationActions)) && (React.createElement(Toolbar, Object.assign({}, actionsToolbarProps, { overflowButton: actionsToolbarProps === null || actionsToolbarProps === void 0 ? void 0 : actionsToolbarProps.overflowButton, design: ToolbarDesign.Auto, toolbarStyle: ToolbarStyle.Clear, active: true, className: clsx(classes.toolbar, actionsToolbarProps === null || actionsToolbarProps === void 0 ? void 0 : actionsToolbarProps.className), onClick: handleActionsToolbarClick, "data-component-name": "DynamicPageTitleActions", onOverflowChange: actionsToolbarProps === null || actionsToolbarProps === void 0 ? void 0 : actionsToolbarProps.onOverflowChange, overflowPopoverRef: actionsOverflowPopoverRef }),
                React.createElement(ActionsSpacer, { onClick: onHeaderClick, noHover: props === null || props === void 0 ? void 0 : props['data-not-clickable'] }),
                enhanceActionsWithClick(actions, actionsOverflowPopoverRef),
                !showNavigationInTopArea && Children.count(actions) > 0 && Children.count(navigationActions) > 0 && (React.createElement(ToolbarSeparator, null)),
                !showNavigationInTopArea && enhanceActionsWithClick(navigationActions, actionsOverflowPopoverRef)))),
        subHeader && !showSubHeaderRight && (React.createElement(FlexBox, null,
            React.createElement("div", { className: clsx(classes.subTitle, classes.subTitleBottom), "data-component-name": "DynamicPageTitleSubHeader" }, subHeader)))));
});
DynamicPageTitle.displayName = 'DynamicPageTitle';
export { DynamicPageTitle };
