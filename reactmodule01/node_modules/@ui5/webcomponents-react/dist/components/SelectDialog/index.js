var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import iconDecline from '@ui5/webcomponents-icons/dist/decline.js';
import iconSearch from '@ui5/webcomponents-icons/dist/search.js';
import { CssSizeVariables, enrichEventWithDetails, ThemingParameters, useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { ButtonDesign, ListMode, ToolbarDesign } from '../../enums';
import { CANCEL, CLEAR, RESET, SEARCH, SELECT, SELECTED } from '../../i18n/i18n-defaults';
import { Button, Dialog, Icon, Input, List, Title } from '../../webComponents';
import { Text } from '../Text';
import { Toolbar } from '../Toolbar';
const useStyles = createUseStyles({
    dialog: {
        '&::part(header)': {
            paddingBottom: '0.25rem',
            flexDirection: 'column',
            marginBottom: 0
        },
        '&::part(content)': {
            padding: 0
        }
    },
    headerContent: {
        display: 'grid',
        gridTemplateColumns: 'fit-content(100px) minmax(0, 1fr) fit-content(100px)',
        gridTemplateAreas: `
      "titleStart titleCenter cancel"
      "input input input"
      `,
        gridTemplateRows: `${CssSizeVariables.sapWcrDialogHeaderHeight} ${CssSizeVariables.sapWcrDialogSubHeaderHeight}`,
        width: '100%',
        alignItems: 'center'
    },
    title: {
        fontSize: ThemingParameters.sapFontLargeSize,
        fontFamily: ThemingParameters.sapFontHeaderFamily,
        gridColumnStart: 'titleStart',
        gridColumnEnd: 'titleCenter',
        maxWidth: '100%',
        overflow: 'hidden',
        textOverflow: 'ellipsis'
    },
    titleCenterAlign: {
        gridArea: 'titleCenter',
        justifySelf: 'center'
    },
    hiddenClearBtn: {
        gridArea: 'titleStart',
        visibility: 'hidden'
    },
    clearBtn: {
        gridArea: 'cancel',
        justifySelf: 'end'
    },
    input: {
        gridArea: 'input',
        width: '100%'
    },
    footer: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'end',
        width: '100%',
        boxSizing: 'border-box',
        '& > *': {
            marginInlineStart: '0.5rem'
        }
    },
    inputIcon: { cursor: 'pointer', color: ThemingParameters.sapContent_IconColor },
    infoBar: { padding: '0 0.5rem', position: 'sticky', top: 0, zIndex: 1 }
}, { name: 'SelectDialog' });
/**
 * The SelectDialog enables users to filter a comprehensive list via a search field and to select one or more items.
 */
const SelectDialog = forwardRef((props, ref) => {
    const { children, className, confirmButtonText, growing, headerText, headerTextAlignCenter, listProps, mode, numberOfSelectedItems, rememberSelections, showClearButton, onAfterClose, onClear, onConfirm, onLoadMore, onSearch, onSearchInput, onSearchReset, onBeforeOpen, onAfterOpen } = props, rest = __rest(props, ["children", "className", "confirmButtonText", "growing", "headerText", "headerTextAlignCenter", "listProps", "mode", "numberOfSelectedItems", "rememberSelections", "showClearButton", "onAfterClose", "onClear", "onConfirm", "onLoadMore", "onSearch", "onSearchInput", "onSearchReset", "onBeforeOpen", "onAfterOpen"]);
    const classes = useStyles();
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const [searchValue, setSearchValue] = useState('');
    const [selectedItems, setSelectedItems] = useState([]);
    const [componentRef, selectDialogRef] = useSyncRef(ref);
    const [listComponentRef, listRef] = useSyncRef(listProps.ref);
    const handleBeforeOpen = (e) => {
        var _a, _b, _c;
        if (typeof onBeforeOpen === 'function') {
            onBeforeOpen(e);
        }
        if (mode === ListMode.MultiSelect && ((_a = listRef.current) === null || _a === void 0 ? void 0 : _a.hasData)) {
            setSelectedItems((_c = (_b = listRef.current) === null || _b === void 0 ? void 0 : _b.getSelectedItems()) !== null && _c !== void 0 ? _c : []);
        }
    };
    const handleAfterOpen = (e) => {
        var _a;
        if (typeof onAfterOpen === 'function') {
            onAfterOpen(e);
        }
        (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.focusFirstItem();
    };
    const handleSearchInput = (e) => {
        if (typeof onSearchInput === 'function') {
            onSearchInput(enrichEventWithDetails(e, { value: e.target.value }));
        }
        setSearchValue(e.target.value);
    };
    const handleSearchSubmit = (e) => {
        if (typeof onSearch === 'function') {
            if (e.type === 'keyup' && e.code === 'Enter') {
                onSearch(enrichEventWithDetails(e, { value: e.target.value }));
            }
            if (e.type === 'click') {
                onSearch(enrichEventWithDetails(e, { value: searchValue }));
            }
        }
    };
    const handleResetSearch = (e) => {
        if (typeof onSearchReset === 'function') {
            onSearchReset(enrichEventWithDetails(e, { prevValue: searchValue }));
        }
        setSearchValue('');
    };
    const handleSelectionChange = (e) => {
        if (typeof (listProps === null || listProps === void 0 ? void 0 : listProps.onSelectionChange) === 'function') {
            listProps.onSelectionChange(e);
        }
        if (mode === ListMode.MultiSelect) {
            setSelectedItems(e.detail.selectedItems);
        }
        else {
            if (typeof onConfirm === 'function') {
                onConfirm(e);
            }
            selectDialogRef.current.close();
        }
    };
    const handleClose = () => {
        selectDialogRef.current.close();
    };
    const handleClear = (e) => {
        var _a;
        if (typeof onClear === 'function') {
            onClear(enrichEventWithDetails(e, { prevSelectedItems: selectedItems }));
        }
        setSelectedItems([]);
        (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.deselectSelectedItems();
    };
    const handleConfirm = (e) => {
        if (typeof onConfirm === 'function') {
            onConfirm(enrichEventWithDetails(e, { selectedItems }));
        }
        selectDialogRef.current.close();
    };
    const handleAfterClose = (e) => {
        var _a;
        if (typeof onAfterClose === 'function') {
            onAfterClose(e);
        }
        if (typeof onSearchReset === 'function') {
            onSearchReset(enrichEventWithDetails(e, { prevValue: searchValue }));
        }
        setSearchValue('');
        if (!rememberSelections) {
            (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.deselectSelectedItems();
        }
    };
    return (React.createElement(Dialog, Object.assign({}, rest, { "data-component-name": "SelectDialog", ref: componentRef, className: clsx(classes.dialog, className), onAfterClose: handleAfterClose, onBeforeOpen: handleBeforeOpen, onAfterOpen: handleAfterOpen }),
        React.createElement("div", { className: classes.headerContent, slot: "header" },
            showClearButton && headerTextAlignCenter && (React.createElement(Button, { onClick: handleClear, design: ButtonDesign.Transparent, className: classes.hiddenClearBtn, tabIndex: -1, "aria-hidden": "true" }, i18nBundle.getText(CLEAR))),
            React.createElement(Title, { className: clsx(classes.title, headerTextAlignCenter && classes.titleCenterAlign) }, headerText),
            showClearButton && (React.createElement(Button, { onClick: handleClear, design: ButtonDesign.Transparent, className: classes.clearBtn }, i18nBundle.getText(CLEAR))),
            React.createElement(Input, { className: classes.input, accessibleName: i18nBundle.getText(SEARCH), value: searchValue, placeholder: i18nBundle.getText(SEARCH), onInput: handleSearchInput, onKeyUp: handleSearchSubmit, icon: React.createElement(React.Fragment, null,
                    searchValue && (React.createElement(Icon, { accessibleName: i18nBundle.getText(RESET), title: i18nBundle.getText(RESET), name: iconDecline, interactive: true, onClick: handleResetSearch, className: classes.inputIcon })),
                    React.createElement(Icon, { name: iconSearch, className: classes.inputIcon, onClick: handleSearchSubmit, accessibleName: i18nBundle.getText(SEARCH), title: i18nBundle.getText(SEARCH) })) })),
        mode === ListMode.MultiSelect && (!!selectedItems.length || numberOfSelectedItems > 0) && (React.createElement(Toolbar, { design: ToolbarDesign.Info, className: classes.infoBar },
            React.createElement(Text, null, `${i18nBundle.getText(SELECTED)}: ${numberOfSelectedItems !== null && numberOfSelectedItems !== void 0 ? numberOfSelectedItems : selectedItems.length}`))),
        React.createElement(List, Object.assign({}, listProps, { ref: listComponentRef, growing: growing, onLoadMore: onLoadMore, mode: mode, onSelectionChange: handleSelectionChange }), children),
        React.createElement("div", { slot: "footer", className: classes.footer },
            mode === ListMode.MultiSelect && (React.createElement(Button, { onClick: handleConfirm, design: ButtonDesign.Emphasized }, confirmButtonText !== null && confirmButtonText !== void 0 ? confirmButtonText : i18nBundle.getText(SELECT))),
            React.createElement(Button, { onClick: handleClose, design: ButtonDesign.Transparent }, i18nBundle.getText(CANCEL)))));
});
SelectDialog.defaultProps = {
    mode: ListMode.SingleSelect,
    listProps: {}
};
SelectDialog.displayName = 'SelectDialog';
export { SelectDialog };
