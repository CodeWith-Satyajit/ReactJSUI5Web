import { isPhone, isTablet } from '@ui5/webcomponents-base/dist/Device.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { Children, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { APPLY_AUTOMATICALLY, CANCEL, CREATED_BY, DEFAULT, MANAGE_VIEWS, SAVE, SHARING, VIEW, SEARCH } from '../../i18n/i18n-defaults';
import { Icon, Input } from '../../webComponents';
import { Bar } from '../../webComponents/Bar';
import { Button } from '../../webComponents/Button';
import { Dialog } from '../../webComponents/Dialog';
import { Table } from '../../webComponents/Table';
import { TableColumn } from '../../webComponents/TableColumn';
import { FlexBox } from '../FlexBox';
import { ManageViewsTableRows } from './ManageViewsTableRows';
const styles = {
    manageViewsDialog: {
        width: isPhone() || isTablet() ? '100%' : '70vw',
        '&::part(content), &::part(header)': {
            padding: 0
        },
        '&::part(footer)': {
            padding: 0,
            borderBlockStart: 'none'
        }
    },
    headerText: {
        margin: 0,
        textAlign: 'center',
        alignSelf: 'start',
        minHeight: 'var(--_ui5_popup_default_header_height)',
        maxHeight: 'var(--_ui5_popup_default_header_height)',
        lineHeight: 'var(--_ui5_popup_default_header_height)',
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        maxWidth: '100%',
        display: 'inline-block',
        paddingInlineStart: '1rem',
        fontFamily: '"72override",var(--_ui5_popup_header_font_family)',
        fontSize: '1rem'
    },
    search: { width: 'calc(100% - 2rem)', marginBlockEnd: '0.5rem' },
    inputIcon: { cursor: 'pointer', color: ThemingParameters.sapContent_IconColor }
};
const useStyles = createUseStyles(styles, { name: 'ManageViewsDialog' });
export const ManageViewsDialog = (props) => {
    const { children, onAfterClose, handleSaveManageViews, showShare, showApplyAutomatically, showSetAsDefault, showCreatedBy, variantNames, portalContainer, showOnlyFavorites } = props;
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const cancelText = i18nBundle.getText(CANCEL);
    const saveText = i18nBundle.getText(SAVE);
    const viewHeaderText = i18nBundle.getText(VIEW);
    const sharingHeaderText = i18nBundle.getText(SHARING);
    const defaultHeaderText = i18nBundle.getText(DEFAULT);
    const applyAutomaticallyHeaderText = i18nBundle.getText(APPLY_AUTOMATICALLY);
    const createdByHeaderText = i18nBundle.getText(CREATED_BY);
    const manageViewsText = i18nBundle.getText(MANAGE_VIEWS);
    const searchText = i18nBundle.getText(SEARCH);
    const [changedVariantNames, setChangedVariantNames] = useState(new Map());
    const [invalidVariants, setInvalidVariants] = useState({});
    const classes = useStyles();
    const columns = (React.createElement(React.Fragment, null,
        showOnlyFavorites && React.createElement(TableColumn, { key: "favorite-variant-item" }),
        React.createElement(TableColumn, null, viewHeaderText),
        showShare && (React.createElement(TableColumn, { demandPopin: true, minWidth: 600 }, sharingHeaderText)),
        showSetAsDefault && (React.createElement(TableColumn, { demandPopin: true, minWidth: 600, popinText: defaultHeaderText }, defaultHeaderText)),
        showApplyAutomatically && (React.createElement(TableColumn, { demandPopin: true, minWidth: 600, popinText: applyAutomaticallyHeaderText }, applyAutomaticallyHeaderText)),
        showCreatedBy && (React.createElement(TableColumn, { demandPopin: true, minWidth: 600, popinText: createdByHeaderText }, createdByHeaderText)),
        React.createElement(TableColumn, { key: "delete-variant-item" })));
    const manageViewsRef = useRef(null);
    useEffect(() => {
        manageViewsRef.current.show();
        return () => {
            var _a;
            (_a = manageViewsRef.current) === null || _a === void 0 ? void 0 : _a.close();
        };
    }, []);
    const [childrenProps, setChildrenProps] = useState(Children.map(children, (child) => {
        return child.props;
    }));
    useEffect(() => {
        setChildrenProps(Children.map(children, (child) => {
            return child.props;
        }));
    }, [children]);
    const [filteredProps, setFilteredProps] = useState(childrenProps);
    useEffect(() => {
        setFilteredProps(childrenProps);
    }, [childrenProps]);
    const [defaultView, setDefaultView] = useState();
    const changedTableRows = useRef({});
    const handleTableRowChange = (e, payload) => {
        var _a;
        if (payload) {
            changedTableRows.current[payload.currentVariant] = Object.assign(Object.assign({}, ((_a = changedTableRows.current[payload.currentVariant]) !== null && _a !== void 0 ? _a : {})), payload);
        }
    };
    const deletedTableRows = useRef(new Set([]));
    const handleDelete = (e) => {
        deletedTableRows.current.add(e.target.dataset.children);
        setChildrenProps((prev) => prev
            .filter((item) => item.children !== e.target.dataset.children)
            .map((item) => {
            if (changedTableRows.current.hasOwnProperty(item.children)) {
                return Object.assign(Object.assign({}, item), changedTableRows.current[item.children]);
            }
            return item;
        }));
    };
    const handleSave = (e) => {
        if (Object.keys(invalidVariants).length === 0) {
            handleSaveManageViews(e, {
                updatedRows: changedTableRows.current,
                defaultView,
                deletedRows: deletedTableRows.current
            });
        }
        else {
            Object.values(invalidVariants)[0].focus();
        }
    };
    const handleSearchInput = (e) => {
        const lowerCaseVal = e.target.value.toLowerCase();
        setFilteredProps(childrenProps.filter((item) => { var _a, _b, _c, _d; return ((_b = (_a = item.children) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(lowerCaseVal)) || ((_d = (_c = item.author) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === null || _d === void 0 ? void 0 : _d.includes(lowerCaseVal)); }));
    };
    return createPortal(React.createElement(Dialog, { className: classes.manageViewsDialog, "data-component-name": "VariantManagementManageViewsDialog", ref: manageViewsRef, onAfterClose: onAfterClose, headerText: manageViewsText, header: React.createElement(FlexBox, { direction: FlexBoxDirection.Column, style: { width: '100%' }, alignItems: FlexBoxAlignItems.Center },
            React.createElement("h2", { className: classes.headerText }, manageViewsText),
            React.createElement(Input, { className: classes.search, placeholder: searchText, showClearIcon: true, icon: React.createElement(Icon, { name: searchIcon, className: classes.inputIcon }), onInput: handleSearchInput })), resizable: true, footer: React.createElement(Bar, { design: BarDesign.Footer, endContent: React.createElement(React.Fragment, null,
                React.createElement(Button, { design: ButtonDesign.Emphasized, onClick: handleSave }, saveText),
                React.createElement(Button, { design: ButtonDesign.Transparent, onClick: onAfterClose }, cancelText)) }) },
        React.createElement(Table, { columns: columns, stickyColumnHeader: true, role: "table" }, filteredProps.map((itemProps) => {
            return (React.createElement(ManageViewsTableRows, Object.assign({}, itemProps, { setInvalidVariants: setInvalidVariants, setChangedVariantNames: setChangedVariantNames, changedVariantNames: changedVariantNames, variantNames: variantNames, handleRowChange: handleTableRowChange, handleDelete: handleDelete, defaultView: defaultView, setDefaultView: setDefaultView, showShare: showShare, showApplyAutomatically: showApplyAutomatically, showSetAsDefault: showSetAsDefault, showCreatedBy: showCreatedBy, key: itemProps === null || itemProps === void 0 ? void 0 : itemProps.children, showOnlyFavorites: showOnlyFavorites })));
        }))), portalContainer);
};
