import declineIcon from '@ui5/webcomponents-icons/dist/decline.js';
import favoriteIcon from '@ui5/webcomponents-icons/dist/favorite.js';
import unfavoriteIcon from '@ui5/webcomponents-icons/dist/unfavorite.js';
import { ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { useReducer, useRef, useState } from 'react';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { ValueState } from '../../enums/ValueState';
import { APPLY_AUTOMATICALLY, DELETE_VIEW, FILE_ALREADY_EXISTS, MARK_AS_FAVORITE, MARK_AS_STANDARD, PRIVATE, PUBLIC, SELECTED_AS_FAVORITE, SPECIFY_VIEW_NAME, UNSELECTED_AS_FAVORITE, VIEW } from '../../i18n/i18n-defaults';
import { Button } from '../../webComponents/Button';
import { CheckBox } from '../../webComponents/CheckBox';
import { Icon } from '../../webComponents/Icon';
import { Input } from '../../webComponents/Input';
import { RadioButton } from '../../webComponents/RadioButton';
import { TableCell } from '../../webComponents/TableCell';
import { TableRow } from '../../webComponents/TableRow';
import { Text } from '../Text';
export const ManageViewsTableRows = (props) => {
    const { variantNames, changedVariantNames, setChangedVariantNames, handleRowChange, handleDelete, defaultView, setDefaultView, showShare, showApplyAutomatically, showSetAsDefault, showCreatedBy, labelReadOnly, favorite, children, global, isDefault, applyAutomatically, author, setInvalidVariants, hideDelete, showOnlyFavorites } = props;
    const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
    const errorTextAlreadyExists = i18nBundle.getText(FILE_ALREADY_EXISTS);
    const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);
    const publicText = i18nBundle.getText(PUBLIC);
    const privateText = i18nBundle.getText(PRIVATE);
    const a11yFavoriteText = i18nBundle.getText(MARK_AS_FAVORITE);
    const a11yStandardText = i18nBundle.getText(MARK_AS_STANDARD);
    const a11yDeleteText = i18nBundle.getText(DELETE_VIEW);
    const a11yApplyAutomaticallyText = i18nBundle.getText(APPLY_AUTOMATICALLY);
    const favoriteIconTitleText = i18nBundle.getText(SELECTED_AS_FAVORITE);
    const unfavoriteIconTitleText = i18nBundle.getText(UNSELECTED_AS_FAVORITE);
    const inputPlaceHolder = i18nBundle.getText(VIEW);
    const [internalFavorite, setFavorite] = useReducer((prev) => {
        return !prev;
    }, !!favorite);
    const iconName = internalFavorite ? favoriteIcon : unfavoriteIcon;
    const inputRef = useRef(undefined);
    const [variantNameInvalid, setVariantNameInvalid] = useState(false);
    const onFavoriteClick = (e) => {
        setFavorite();
        handleRowChange(e, { currentVariant: children, favorite: !internalFavorite });
    };
    const handleVariantInput = (e) => {
        if (variantNames.includes(e.target.value) || Array.from(changedVariantNames.values()).includes(e.target.value)) {
            setVariantNameInvalid(errorTextAlreadyExists);
            setInvalidVariants((prev) => (Object.assign(Object.assign({}, prev), { [`${children}`]: inputRef.current })));
            handleRowChange(e, { currentVariant: children, children: e.target.value });
        }
        else if (e.target.value.length === 0) {
            setVariantNameInvalid(errorTextEmpty);
            setInvalidVariants((prev) => (Object.assign(Object.assign({}, prev), { [children]: inputRef.current })));
            handleRowChange(e, { currentVariant: children, children: e.target.value });
        }
        else {
            setVariantNameInvalid(false);
            setInvalidVariants((prev) => {
                const invalidRows = Object.assign({}, prev);
                if (prev.hasOwnProperty(children)) {
                    delete invalidRows[children];
                }
                return invalidRows;
            });
            handleRowChange(e, { currentVariant: children, children: e.target.value });
        }
        setChangedVariantNames((prev) => {
            const currentChangedVariants = new Map(prev);
            currentChangedVariants.set(children, e.target.value);
            return currentChangedVariants;
        });
    };
    const handleDefaultChange = () => {
        setDefaultView(children);
    };
    const handleApplyAutomaticallyChange = (e) => {
        handleRowChange(e, { currentVariant: children, applyAutomatically: e.target.checked });
    };
    const renderView = () => {
        if (labelReadOnly) {
            return (React.createElement(Text, { style: {
                    fontFamily: isDefault ? ThemingParameters.sapFontBoldFamily : ThemingParameters.sapFontFamily
                } }, children));
        }
        return (React.createElement(Input, { placeholder: inputPlaceHolder, value: children, onInput: handleVariantInput, ref: inputRef, valueStateMessage: React.createElement("div", null, variantNameInvalid), valueState: !variantNameInvalid ? ValueState.None : ValueState.Error }));
    };
    return (React.createElement(TableRow, { "data-id": children, key: `${children}` },
        showOnlyFavorites && (React.createElement(TableCell, null, isDefault ? (React.createElement(Icon, { name: favoriteIcon, style: { color: ThemingParameters.sapContent_NonInteractiveIconColor } })) : (React.createElement(Icon, { "aria-label": a11yFavoriteText, title: iconName === favoriteIcon ? favoriteIconTitleText : unfavoriteIconTitleText, name: iconName, interactive: true, style: { color: ThemingParameters.sapContent_MarkerIconColor, cursor: 'pointer' }, onClick: onFavoriteClick })))),
        React.createElement(TableCell, null, renderView()),
        showShare && React.createElement(TableCell, null, global ? publicText : privateText),
        showSetAsDefault && (React.createElement(TableCell, null,
            React.createElement(RadioButton, { "aria-label": a11yStandardText, checked: defaultView !== undefined ? defaultView === children : isDefault, onChange: handleDefaultChange }))),
        showApplyAutomatically && (React.createElement(TableCell, null,
            React.createElement(CheckBox, { "aria-label": a11yApplyAutomaticallyText, checked: applyAutomatically, onChange: handleApplyAutomaticallyChange }))),
        showCreatedBy && (React.createElement(TableCell, null,
            React.createElement(Text, null, author))),
        React.createElement(TableCell, null, !(hideDelete !== null && hideDelete !== void 0 ? hideDelete : global) && (React.createElement(Button, { title: a11yDeleteText, accessibleName: a11yDeleteText, icon: declineIcon, design: ButtonDesign.Transparent, onClick: handleDelete, "data-children": children })))));
};
