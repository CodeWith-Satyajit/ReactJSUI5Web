import { createRef, useCallback } from 'react';
import { getRandomId } from '../../internal/getRandomId';
import { useModalsContext } from '../../internal/ModalsContext';
import { Dialog, Popover, ResponsivePopover, Toast } from '../../webComponents';
import { MessageBox } from '../MessageBox';
const checkContext = (context) => {
    if (!context) {
        // eslint-disable-next-line no-console
        console.error(`Please make sure that your application is wrapped in the '<ThemeProvider />' component.`);
    }
};
const showDialog = (props, setModal, container) => {
    checkContext(setModal);
    const id = getRandomId();
    const ref = createRef();
    setModal === null || setModal === void 0 ? void 0 : setModal({
        type: 'set',
        payload: {
            Component: Dialog,
            props: Object.assign(Object.assign({}, props), { ref, open: true, onAfterClose: (event) => {
                    if (typeof props.onAfterClose === 'function') {
                        props.onAfterClose(event);
                    }
                    setModal({
                        type: 'reset',
                        payload: { id }
                    });
                } }),
            container,
            id
        }
    });
    return { ref };
};
const showPopover = (props, setModal, container) => {
    checkContext(setModal);
    const id = getRandomId();
    const ref = createRef();
    setModal === null || setModal === void 0 ? void 0 : setModal({
        type: 'set',
        payload: {
            Component: Popover,
            props: Object.assign(Object.assign({}, props), { ref, open: true, onAfterClose: (event) => {
                    if (typeof props.onAfterClose === 'function') {
                        props.onAfterClose(event);
                    }
                    setModal({
                        type: 'reset',
                        payload: { id }
                    });
                } }),
            container,
            id
        }
    });
    return { ref };
};
const showResponsivePopover = (props, setModal, container) => {
    checkContext(setModal);
    const id = getRandomId();
    const ref = createRef();
    setModal === null || setModal === void 0 ? void 0 : setModal({
        type: 'set',
        payload: {
            Component: ResponsivePopover,
            props: Object.assign(Object.assign({}, props), { ref, open: true, onAfterClose: (event) => {
                    if (typeof props.onAfterClose === 'function') {
                        props.onAfterClose(event);
                    }
                    setModal({
                        type: 'reset',
                        payload: { id }
                    });
                } }),
            container,
            id
        }
    });
    return { ref };
};
const showMessageBox = (props, setModal, container) => {
    checkContext(setModal);
    const id = getRandomId();
    const ref = createRef();
    setModal === null || setModal === void 0 ? void 0 : setModal({
        type: 'set',
        payload: {
            Component: MessageBox,
            props: Object.assign(Object.assign({}, props), { ref, open: true, onClose: (event) => {
                    if (typeof props.onClose === 'function') {
                        props.onClose(event);
                    }
                    setModal({
                        type: 'reset',
                        payload: { id }
                    });
                } }),
            container,
            id
        }
    });
    return { ref };
};
const showToast = (props, setModal, container) => {
    const ref = createRef();
    checkContext(setModal);
    const id = getRandomId();
    setModal === null || setModal === void 0 ? void 0 : setModal({
        type: 'set',
        payload: {
            Component: Toast,
            props: Object.assign(Object.assign({}, props), { ref: (el) => {
                    var _a;
                    ref.current = el;
                    if (el && !el.open) {
                        el.show();
                        setTimeout(() => {
                            setModal({
                                type: 'reset',
                                payload: { id }
                            });
                        }, (_a = props.duration) !== null && _a !== void 0 ? _a : Toast.defaultProps.duration);
                    }
                } }),
            container,
            id
        }
    });
    return { ref };
};
/**
 * Utility class for opening modals in an imperative way.
 *
 * These static helper methods might be useful for showing e.g. Toasts or MessageBoxes after successful or failed
 * network calls.
 *
 * @since 0.22.2
 */
export const Modals = {
    showDialog: (props, container) => {
        var _a;
        const setModal = (_a = window['@ui5/webcomponents-react']) === null || _a === void 0 ? void 0 : _a.setModal;
        const { ref } = showDialog(props, setModal, container);
        return {
            ref,
            close: () => {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
            }
        };
    },
    useShowDialog: () => {
        const { setModal } = useModalsContext();
        return useCallback((props, container) => {
            const { ref } = showDialog(props, setModal, container);
            return {
                ref,
                close: () => {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
                }
            };
        }, [setModal]);
    },
    showPopover: (props, container) => {
        var _a;
        const setModal = (_a = window['@ui5/webcomponents-react']) === null || _a === void 0 ? void 0 : _a.setModal;
        const { ref } = showPopover(props, setModal, container);
        return {
            ref,
            close: () => {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
            }
        };
    },
    useShowPopover: () => {
        const { setModal } = useModalsContext();
        return useCallback((props, container) => {
            const { ref } = showPopover(props, setModal, container);
            return {
                ref,
                close: () => {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
                }
            };
        }, [setModal]);
    },
    showResponsivePopover: (props, container) => {
        var _a;
        const setModal = (_a = window['@ui5/webcomponents-react']) === null || _a === void 0 ? void 0 : _a.setModal;
        const { ref } = showResponsivePopover(props, setModal, container);
        return {
            ref,
            close: () => {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
            }
        };
    },
    useShowResponsivePopover: () => {
        const { setModal } = useModalsContext();
        return useCallback((props, container) => {
            const { ref } = showResponsivePopover(props, setModal, container);
            return {
                ref,
                close: () => {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
                }
            };
        }, [setModal]);
    },
    showMessageBox: (props, container) => {
        var _a;
        const setModal = (_a = window['@ui5/webcomponents-react']) === null || _a === void 0 ? void 0 : _a.setModal;
        const { ref } = showMessageBox(props, setModal, container);
        return {
            ref,
            close: () => {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
            }
        };
    },
    useShowMessageBox: () => {
        const { setModal } = useModalsContext();
        return useCallback((props, container) => {
            const { ref } = showMessageBox(props, setModal, container);
            return {
                ref,
                close: () => {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.close();
                }
            };
        }, [setModal]);
    },
    showToast: (props, container) => {
        var _a;
        const setModal = (_a = window['@ui5/webcomponents-react']) === null || _a === void 0 ? void 0 : _a.setModal;
        const { ref } = showToast(props, setModal, container);
        return {
            ref
        };
    },
    useShowToast: () => {
        const { setModal } = useModalsContext();
        return useCallback((props, container) => {
            const { ref } = showToast(props, setModal, container);
            return {
                ref
            };
        }, [setModal]);
    }
};
