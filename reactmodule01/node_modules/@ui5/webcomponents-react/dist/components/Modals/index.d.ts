import { RefObject } from 'react';
import { DialogDomRef, DialogPropTypes, PopoverDomRef, PopoverPropTypes, ResponsivePopoverDomRef, ResponsivePopoverPropTypes, ToastDomRef, ToastPropTypes } from '../../webComponents';
import { MessageBoxPropTypes } from '../MessageBox';
declare type ModalReturnType<DomRef> = {
    ref: RefObject<DomRef>;
};
declare type ClosableModalReturnType<DomRef> = ModalReturnType<DomRef> & {
    close: () => void;
};
declare type ModalHookReturnType<Props, DomRef> = (props: Props, container?: HTMLElement) => ModalReturnType<DomRef>;
declare type CloseableModalHookReturnType<Props, DomRef> = (props: Props, container?: HTMLElement) => ClosableModalReturnType<DomRef>;
/**
 * Utility class for opening modals in an imperative way.
 *
 * These static helper methods might be useful for showing e.g. Toasts or MessageBoxes after successful or failed
 * network calls.
 *
 * @since 0.22.2
 */
export declare const Modals: {
    showDialog: (props: DialogPropTypes, container?: HTMLElement) => ClosableModalReturnType<DialogDomRef>;
    useShowDialog: () => CloseableModalHookReturnType<DialogPropTypes, DialogDomRef>;
    showPopover: (props: PopoverPropTypes, container?: HTMLElement) => ClosableModalReturnType<PopoverDomRef>;
    useShowPopover: () => CloseableModalHookReturnType<PopoverPropTypes, PopoverDomRef>;
    showResponsivePopover: (props: ResponsivePopoverPropTypes, container?: HTMLElement) => ClosableModalReturnType<ResponsivePopoverDomRef>;
    useShowResponsivePopover: () => CloseableModalHookReturnType<ResponsivePopoverPropTypes, ResponsivePopoverDomRef>;
    showMessageBox: (props: MessageBoxPropTypes, container?: HTMLElement) => ClosableModalReturnType<DialogDomRef>;
    useShowMessageBox: () => CloseableModalHookReturnType<MessageBoxPropTypes, DialogDomRef>;
    showToast: (props: ToastPropTypes, container?: HTMLElement) => ModalReturnType<ToastDomRef>;
    useShowToast: () => ModalHookReturnType<ToastPropTypes, ToastDomRef>;
};
export {};
