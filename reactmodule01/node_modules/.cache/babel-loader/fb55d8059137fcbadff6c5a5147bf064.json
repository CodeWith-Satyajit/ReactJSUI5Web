{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport clsx from 'clsx';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { TextStyles } from './Text.jss';\nconst useStyles = createUseStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef((props, ref) => {\n  const {\n      children,\n      renderWhitespace,\n      wrapping,\n      className,\n      style,\n      slot\n    } = props,\n    rest = __rest(props, [\"children\", \"renderWhitespace\", \"wrapping\", \"className\", \"style\", \"slot\"]);\n  const classes = useStyles();\n  const classNameString = clsx(classes.text, wrapping === false && classes.noWrap, renderWhitespace && classes.renderWhitespace, className);\n  return React.createElement(\"span\", Object.assign({\n    ref: ref,\n    style: style,\n    className: classNameString,\n    slot: slot\n  }, rest), children);\n});\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","clsx","React","forwardRef","createUseStyles","TextStyles","useStyles","name","Text","props","ref","children","renderWhitespace","wrapping","className","style","slot","rest","classes","classNameString","text","noWrap","createElement","assign","defaultProps","displayName"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/Text/index.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport clsx from 'clsx';\nimport React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { TextStyles } from './Text.jss';\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef((props, ref) => {\n    const { children, renderWhitespace, wrapping, className, style, slot } = props, rest = __rest(props, [\"children\", \"renderWhitespace\", \"wrapping\", \"className\", \"style\", \"slot\"]);\n    const classes = useStyles();\n    const classNameString = clsx(classes.text, wrapping === false && classes.noWrap, renderWhitespace && classes.renderWhitespace, className);\n    return (React.createElement(\"span\", Object.assign({ ref: ref, style: style, className: classNameString, slot: slot }, rest), children));\n});\nText.defaultProps = {\n    renderWhitespace: false,\n    wrapping: true\n};\nText.displayName = 'Text';\nexport { Text };\n"],"mappings":"AAAA,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIH,CAAC,EAAE,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,CAAC,EAAEG,CAAC,CAAC,IAAIF,CAAC,CAACO,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAC/ED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC;EACf,IAAIH,CAAC,IAAI,IAAI,IAAI,OAAOI,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACT,CAAC,CAAC,EAAEU,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpE,IAAIT,CAAC,CAACO,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACP,CAAC,EAAEG,CAAC,CAACO,CAAC,CAAC,CAAC,EAC1ER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGV,CAAC,CAACG,CAAC,CAACO,CAAC,CAAC,CAAC;EACzB;EACJ,OAAOR,CAAC;AACZ,CAAC;AACD,OAAOW,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,eAAe,QAAQ,WAAW;AAC3C,SAASC,UAAU,QAAQ,YAAY;AACvC,MAAMC,SAAS,GAAGF,eAAe,CAACC,UAAU,EAAE;EAAEE,IAAI,EAAE;AAAO,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAGL,UAAU,CAAC,CAACM,KAAK,EAAEC,GAAG,KAAK;EACpC,MAAM;MAAEC,QAAQ;MAAEC,gBAAgB;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,KAAK;MAAEC;IAAK,CAAC,GAAGP,KAAK;IAAEQ,IAAI,GAAG9B,MAAM,CAACsB,KAAK,EAAE,CAAC,UAAU,EAAE,kBAAkB,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;EAChL,MAAMS,OAAO,GAAGZ,SAAS,EAAE;EAC3B,MAAMa,eAAe,GAAGlB,IAAI,CAACiB,OAAO,CAACE,IAAI,EAAEP,QAAQ,KAAK,KAAK,IAAIK,OAAO,CAACG,MAAM,EAAET,gBAAgB,IAAIM,OAAO,CAACN,gBAAgB,EAAEE,SAAS,CAAC;EACzI,OAAQZ,KAAK,CAACoB,aAAa,CAAC,MAAM,EAAE9B,MAAM,CAAC+B,MAAM,CAAC;IAAEb,GAAG,EAAEA,GAAG;IAAEK,KAAK,EAAEA,KAAK;IAAED,SAAS,EAAEK,eAAe;IAAEH,IAAI,EAAEA;EAAK,CAAC,EAAEC,IAAI,CAAC,EAAEN,QAAQ,CAAC;AAC1I,CAAC,CAAC;AACFH,IAAI,CAACgB,YAAY,GAAG;EAChBZ,gBAAgB,EAAE,KAAK;EACvBC,QAAQ,EAAE;AACd,CAAC;AACDL,IAAI,CAACiB,WAAW,GAAG,MAAM;AACzB,SAASjB,IAAI"},"metadata":{},"sourceType":"module"}