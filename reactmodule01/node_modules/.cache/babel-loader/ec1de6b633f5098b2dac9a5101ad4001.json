{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { CssSizeVariables, Device, ThemingParameters, useSyncRef } from '@ui5/webcomponents-react-base';\nimport clsx from 'clsx';\nimport React, { Children, cloneElement, forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormBackgroundDesign, TitleLevel } from '../../enums';\nimport { Title } from '../../webComponents/Title';\nimport { styles } from './Form.jss';\nconst clonedChildrenForSingleColumn = (reactChildren, currentLabelSpan) => React.Children.map(reactChildren, child => {\n  var _a, _b;\n  if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) === 'FormItem') {\n    return cloneElement(child, {\n      labelSpan: currentLabelSpan\n    });\n  }\n  if (((_b = child === null || child === void 0 ? void 0 : child.type) === null || _b === void 0 ? void 0 : _b.displayName) === 'FormGroup') {\n    return cloneElement(child, {\n      children: clonedChildrenForSingleColumn(child.props.children, currentLabelSpan)\n    });\n  }\n  return child;\n});\nconst useStyles = createUseStyles(styles, {\n  name: 'Form'\n});\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n * It is possible to change the alignment of all labels by setting the CSS `align-items` property, per default all labels are centered.\n */\nconst Form = forwardRef((props, ref) => {\n  var _a, _b;\n  const {\n      as,\n      backgroundDesign,\n      children,\n      columnsS,\n      columnsM,\n      columnsL,\n      columnsXL,\n      className,\n      labelSpanS,\n      labelSpanM,\n      labelSpanL,\n      labelSpanXL,\n      slot,\n      titleText,\n      style\n    } = props,\n    rest = __rest(props, [\"as\", \"backgroundDesign\", \"children\", \"columnsS\", \"columnsM\", \"columnsL\", \"columnsXL\", \"className\", \"labelSpanS\", \"labelSpanM\", \"labelSpanL\", \"labelSpanXL\", \"slot\", \"titleText\", \"style\"]);\n  const columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n  const labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n  const [componentRef, formRef] = useSyncRef(ref);\n  // use the window range set as first best guess, if not available use Desktop\n  const [currentRange, setCurrentRange] = useState((_b = (_a = Device.getCurrentRange()) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Desktop');\n  const lastRange = useRef(currentRange);\n  useEffect(() => {\n    const observer = new ResizeObserver(_ref => {\n      let [form] = _ref;\n      const rangeInfo = Device.getCurrentRange(form.contentRect.width);\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n    return () => {\n      observer.disconnect();\n    };\n  }, [formRef, setCurrentRange, lastRange]);\n  const classes = useStyles();\n  const currentNumberOfColumns = columnsMap.get(currentRange);\n  const currentLabelSpan = labelSpanMap.get(currentRange);\n  const [formGroups, updatedTitle] = useMemo(() => {\n    var _a, _b;\n    const computedFormGroups = [];\n    if (Children.count(children) === 1 && !titleText) {\n      const singleChild = Array.isArray(children) ? children[0] : children;\n      if (((_b = (_a = singleChild === null || singleChild === void 0 ? void 0 : singleChild.props) === null || _a === void 0 ? void 0 : _a.title) === null || _b === void 0 ? void 0 : _b.length) > 0) {\n        return [cloneElement(singleChild, {\n          title: null\n        }), singleChild.props.title];\n      }\n    }\n    const currentColumnCount = currentNumberOfColumns;\n    if (currentColumnCount === 1) {\n      return [clonedChildrenForSingleColumn(children, currentLabelSpan), titleText];\n    }\n    const rows = [];\n    const childrenArray = Children.toArray(children);\n    const estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;\n    for (let i = 0; i < estimatedNumberOfGroupRows; i++) {\n      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);\n    }\n    const maxRowsPerRow = [];\n    rows.forEach((rowGroup, rowIndex) => {\n      const numberOfRowsOfEachForm = rowGroup.map(row => {\n        if (row.type.displayName === 'FormItem') {\n          return 1;\n        }\n        return Children.count(row.props.children) + 1;\n      });\n      maxRowsPerRow[rowIndex] = Math.max(...numberOfRowsOfEachForm);\n    });\n    let totalRowCount = 2;\n    rows.forEach((column, rowIndex) => {\n      const rowsForThisRow = maxRowsPerRow[rowIndex];\n      column.forEach((cell, columnIndex) => {\n        var _a;\n        const titleStyles = {\n          gridColumnEnd: 'span 12',\n          gridColumnStart: columnIndex * 12 + 1,\n          gridRowStart: totalRowCount,\n          display: 'flex',\n          alignItems: 'center',\n          fontFamily: ThemingParameters.sapFontFamily,\n          height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          color: ThemingParameters.sapTextColor,\n          fontSize: ThemingParameters.sapFontSize,\n          fontWeight: 'bold',\n          backgroundColor: ThemingParameters.sapGroup_TitleBackground,\n          margin: 0,\n          paddingTop: '1rem'\n        };\n        if ((_a = cell === null || cell === void 0 ? void 0 : cell.props) === null || _a === void 0 ? void 0 : _a.titleText) {\n          computedFormGroups.push(React.createElement(\"h6\", {\n            style: titleStyles,\n            title: cell.props.titleText,\n            \"aria-label\": cell.props.titleText,\n            key: `title-col-${columnIndex}-row-${totalRowCount}`\n          }, cell.props.titleText));\n        }\n        for (let i = 0; i < rowsForThisRow; i++) {\n          const itemToRender = cell.type.displayName === 'FormGroup' ? Children.toArray(cell.props.children)[i] : cell.type.displayName === 'FormItem' && i === 0 ? cell : null;\n          if (itemToRender) {\n            computedFormGroups.push(cloneElement(itemToRender, {\n              key: `col-${columnIndex}-row-${totalRowCount + i}`,\n              columnIndex,\n              lastGroupItem: cell.type.displayName === 'FormGroup' && rowsForThisRow - 2 === i,\n              rowIndex: totalRowCount + i + 1,\n              labelSpan: currentLabelSpan\n            }));\n          }\n        }\n      });\n      totalRowCount += rowsForThisRow;\n      if (rowsForThisRow === 1) {\n        totalRowCount += 1;\n      }\n    });\n    return [computedFormGroups, titleText];\n  }, [children, currentRange, titleText, currentNumberOfColumns, currentLabelSpan]);\n  const formClassNames = clsx(classes.form, classes[`labelSpan${(currentLabelSpan - 1) % 12 + 1}`], classes[backgroundDesign.toLowerCase()], className);\n  const CustomTag = as;\n  return React.createElement(CustomTag, Object.assign({\n    ref: componentRef,\n    slot: slot,\n    className: formClassNames,\n    style: style,\n    \"data-columns\": currentNumberOfColumns\n  }, rest), updatedTitle && React.createElement(Title, {\n    level: TitleLevel.H3,\n    className: classes.formTitle\n  }, updatedTitle), formGroups);\n});\nForm.displayName = 'Form';\nForm.defaultProps = {\n  as: 'form',\n  backgroundDesign: FormBackgroundDesign.Transparent,\n  columnsS: 1,\n  columnsM: 1,\n  columnsL: 1,\n  columnsXL: 2,\n  labelSpanS: 12,\n  labelSpanM: 2,\n  labelSpanL: 4,\n  labelSpanXL: 4\n};\nexport { Form };","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","CssSizeVariables","Device","ThemingParameters","useSyncRef","clsx","React","Children","cloneElement","forwardRef","useEffect","useMemo","useRef","useState","createUseStyles","FormBackgroundDesign","TitleLevel","Title","styles","clonedChildrenForSingleColumn","reactChildren","currentLabelSpan","map","child","_a","_b","type","displayName","labelSpan","children","props","useStyles","name","Form","ref","as","backgroundDesign","columnsS","columnsM","columnsL","columnsXL","className","labelSpanS","labelSpanM","labelSpanL","labelSpanXL","slot","titleText","style","rest","columnsMap","Map","set","labelSpanMap","componentRef","formRef","currentRange","setCurrentRange","getCurrentRange","lastRange","observer","ResizeObserver","form","rangeInfo","contentRect","width","current","observe","disconnect","classes","currentNumberOfColumns","get","formGroups","updatedTitle","computedFormGroups","count","singleChild","Array","isArray","title","currentColumnCount","rows","childrenArray","toArray","estimatedNumberOfGroupRows","slice","maxRowsPerRow","forEach","rowGroup","rowIndex","numberOfRowsOfEachForm","row","Math","max","totalRowCount","column","rowsForThisRow","cell","columnIndex","titleStyles","gridColumnEnd","gridColumnStart","gridRowStart","display","alignItems","fontFamily","sapFontFamily","height","sapWcrFormGroupTitleHeight","lineHeight","color","sapTextColor","fontSize","sapFontSize","fontWeight","backgroundColor","sapGroup_TitleBackground","margin","paddingTop","push","createElement","key","itemToRender","lastGroupItem","formClassNames","toLowerCase","CustomTag","assign","level","H3","formTitle","defaultProps","Transparent"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/Form/index.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { CssSizeVariables, Device, ThemingParameters, useSyncRef } from '@ui5/webcomponents-react-base';\nimport clsx from 'clsx';\nimport React, { Children, cloneElement, forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormBackgroundDesign, TitleLevel } from '../../enums';\nimport { Title } from '../../webComponents/Title';\nimport { styles } from './Form.jss';\nconst clonedChildrenForSingleColumn = (reactChildren, currentLabelSpan) => React.Children.map(reactChildren, (child) => {\n    var _a, _b;\n    if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) === 'FormItem') {\n        return cloneElement(child, { labelSpan: currentLabelSpan });\n    }\n    if (((_b = child === null || child === void 0 ? void 0 : child.type) === null || _b === void 0 ? void 0 : _b.displayName) === 'FormGroup') {\n        return cloneElement(child, { children: clonedChildrenForSingleColumn(child.props.children, currentLabelSpan) });\n    }\n    return child;\n});\nconst useStyles = createUseStyles(styles, { name: 'Form' });\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n * It is possible to change the alignment of all labels by setting the CSS `align-items` property, per default all labels are centered.\n */\nconst Form = forwardRef((props, ref) => {\n    var _a, _b;\n    const { as, backgroundDesign, children, columnsS, columnsM, columnsL, columnsXL, className, labelSpanS, labelSpanM, labelSpanL, labelSpanXL, slot, titleText, style } = props, rest = __rest(props, [\"as\", \"backgroundDesign\", \"children\", \"columnsS\", \"columnsM\", \"columnsL\", \"columnsXL\", \"className\", \"labelSpanS\", \"labelSpanM\", \"labelSpanL\", \"labelSpanXL\", \"slot\", \"titleText\", \"style\"]);\n    const columnsMap = new Map();\n    columnsMap.set('Phone', columnsS);\n    columnsMap.set('Tablet', columnsM);\n    columnsMap.set('Desktop', columnsL);\n    columnsMap.set('LargeDesktop', columnsXL);\n    const labelSpanMap = new Map();\n    labelSpanMap.set('Phone', labelSpanS);\n    labelSpanMap.set('Tablet', labelSpanM);\n    labelSpanMap.set('Desktop', labelSpanL);\n    labelSpanMap.set('LargeDesktop', labelSpanXL);\n    const [componentRef, formRef] = useSyncRef(ref);\n    // use the window range set as first best guess, if not available use Desktop\n    const [currentRange, setCurrentRange] = useState((_b = (_a = Device.getCurrentRange()) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Desktop');\n    const lastRange = useRef(currentRange);\n    useEffect(() => {\n        const observer = new ResizeObserver(([form]) => {\n            const rangeInfo = Device.getCurrentRange(form.contentRect.width);\n            if (rangeInfo && lastRange.current !== rangeInfo.name) {\n                lastRange.current = rangeInfo.name;\n                setCurrentRange(rangeInfo.name);\n            }\n        });\n        if (formRef.current) {\n            observer.observe(formRef.current);\n        }\n        return () => {\n            observer.disconnect();\n        };\n    }, [formRef, setCurrentRange, lastRange]);\n    const classes = useStyles();\n    const currentNumberOfColumns = columnsMap.get(currentRange);\n    const currentLabelSpan = labelSpanMap.get(currentRange);\n    const [formGroups, updatedTitle] = useMemo(() => {\n        var _a, _b;\n        const computedFormGroups = [];\n        if (Children.count(children) === 1 && !titleText) {\n            const singleChild = (Array.isArray(children) ? children[0] : children);\n            if (((_b = (_a = singleChild === null || singleChild === void 0 ? void 0 : singleChild.props) === null || _a === void 0 ? void 0 : _a.title) === null || _b === void 0 ? void 0 : _b.length) > 0) {\n                return [cloneElement(singleChild, { title: null }), singleChild.props.title];\n            }\n        }\n        const currentColumnCount = currentNumberOfColumns;\n        if (currentColumnCount === 1) {\n            return [clonedChildrenForSingleColumn(children, currentLabelSpan), titleText];\n        }\n        const rows = [];\n        const childrenArray = Children.toArray(children);\n        const estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;\n        for (let i = 0; i < estimatedNumberOfGroupRows; i++) {\n            rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);\n        }\n        const maxRowsPerRow = [];\n        rows.forEach((rowGroup, rowIndex) => {\n            const numberOfRowsOfEachForm = rowGroup.map((row) => {\n                if (row.type.displayName === 'FormItem') {\n                    return 1;\n                }\n                return Children.count(row.props.children) + 1;\n            });\n            maxRowsPerRow[rowIndex] = Math.max(...numberOfRowsOfEachForm);\n        });\n        let totalRowCount = 2;\n        rows.forEach((column, rowIndex) => {\n            const rowsForThisRow = maxRowsPerRow[rowIndex];\n            column.forEach((cell, columnIndex) => {\n                var _a;\n                const titleStyles = {\n                    gridColumnEnd: 'span 12',\n                    gridColumnStart: columnIndex * 12 + 1,\n                    gridRowStart: totalRowCount,\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontFamily: ThemingParameters.sapFontFamily,\n                    height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n                    lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n                    color: ThemingParameters.sapTextColor,\n                    fontSize: ThemingParameters.sapFontSize,\n                    fontWeight: 'bold',\n                    backgroundColor: ThemingParameters.sapGroup_TitleBackground,\n                    margin: 0,\n                    paddingTop: '1rem'\n                };\n                if ((_a = cell === null || cell === void 0 ? void 0 : cell.props) === null || _a === void 0 ? void 0 : _a.titleText) {\n                    computedFormGroups.push(React.createElement(\"h6\", { style: titleStyles, title: cell.props.titleText, \"aria-label\": cell.props.titleText, key: `title-col-${columnIndex}-row-${totalRowCount}` }, cell.props.titleText));\n                }\n                for (let i = 0; i < rowsForThisRow; i++) {\n                    const itemToRender = cell.type.displayName === 'FormGroup'\n                        ? Children.toArray(cell.props.children)[i]\n                        : cell.type.displayName === 'FormItem' && i === 0\n                            ? cell\n                            : null;\n                    if (itemToRender) {\n                        computedFormGroups.push(cloneElement(itemToRender, {\n                            key: `col-${columnIndex}-row-${totalRowCount + i}`,\n                            columnIndex,\n                            lastGroupItem: cell.type.displayName === 'FormGroup' && rowsForThisRow - 2 === i,\n                            rowIndex: totalRowCount + i + 1,\n                            labelSpan: currentLabelSpan\n                        }));\n                    }\n                }\n            });\n            totalRowCount += rowsForThisRow;\n            if (rowsForThisRow === 1) {\n                totalRowCount += 1;\n            }\n        });\n        return [computedFormGroups, titleText];\n    }, [children, currentRange, titleText, currentNumberOfColumns, currentLabelSpan]);\n    const formClassNames = clsx(classes.form, classes[`labelSpan${((currentLabelSpan - 1) % 12) + 1}`], classes[backgroundDesign.toLowerCase()], className);\n    const CustomTag = as;\n    return (React.createElement(CustomTag, Object.assign({ ref: componentRef, slot: slot, className: formClassNames, style: style, \"data-columns\": currentNumberOfColumns }, rest),\n        updatedTitle && (React.createElement(Title, { level: TitleLevel.H3, className: classes.formTitle }, updatedTitle)),\n        formGroups));\n});\nForm.displayName = 'Form';\nForm.defaultProps = {\n    as: 'form',\n    backgroundDesign: FormBackgroundDesign.Transparent,\n    columnsS: 1,\n    columnsM: 1,\n    columnsL: 1,\n    columnsXL: 2,\n    labelSpanS: 12,\n    labelSpanM: 2,\n    labelSpanL: 4,\n    labelSpanXL: 4\n};\nexport { Form };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}