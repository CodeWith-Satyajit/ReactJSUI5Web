{"ast":null,"code":"import Float from \"@ui5/webcomponents-base/dist/types/Float.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isEscape } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport SliderBase from \"./SliderBase.js\";\nimport Icon from \"./Icon.js\";\n\n// Template\nimport SliderTemplate from \"./generated/templates/SliderTemplate.lit.js\";\n\n// Texts\nimport { SLIDER_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n\n/**\n * @public\n */\nconst metadata = {\n  tag: \"ui5-slider\",\n  languageAware: true,\n  managedSlots: true,\n  properties: /** @lends sap.ui.webcomponents.main.Slider.prototype */{\n    /**\n     * Current value of the slider\n     *\n     * @type {sap.ui.webcomponents.base.types.Float}\n     * @defaultvalue 0\n     * @formEvents change input\n     * @formProperty\n     * @public\n     */\n    value: {\n      type: Float,\n      defaultValue: 0\n    }\n  }\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The Slider component represents a numerical range and a handle (grip).\n * The purpose of the component is to enable visual selection of a value in\n * a continuous numerical range by moving an adjustable handle.\n *\n * <h3>Structure</h3>\n * The most important properties of the Slider are:\n * <ul>\n * <li>min - The minimum value of the slider range.</li>\n * <li>max - The maximum value of the slider range.</li>\n * <li>value - The current value of the slider range.</li>\n * <li>step - Determines the increments in which the slider will move.</li>\n * <li>showTooltip - Determines if a tooltip should be displayed above the handle.</li>\n * <li>showTickmarks - Displays a visual divider between the step values.</li>\n * <li>labelInterval - Labels some or all of the tickmarks with their values.</li>\n * </ul>\n *\n * <h3>Usage</h3>\n * The most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n *\n * <h3>Responsive Behavior</h3>\n * The <code>ui5-slider</code> component adjusts to the size of its parent container by recalculating and\n * resizing the width of the control. You can move the slider handle in several different ways:\n * <ul>\n * <li>Drag and drop the handle to the desired value.</li>\n * <li>Click/tap on the range bar to move the handle to that location.</li>\n * </ul>\n *\n * <h3>CSS Shadow Parts</h3>\n *\n * <ui5-link target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">CSS Shadow Parts</ui5-link> allow developers to style elements inside the Shadow DOM.\n * <br>\n * The <code>ui5-slider</code> exposes the following CSS Shadow Parts:\n * <ul>\n * <li>progress-container - Used to style the progress container(the horizontal bar which visually represents the range between the minimum and maximum value) of the <code>ui5-slider</code>.</li>\n * <li>progress-bar - Used to style the progress bar, which shows the progress of the <code>ui5-slider</code>.</li>\n * <li>handle - Used to style the handle of the <code>ui5-slider</code>.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n *\n * <ul>\n * <li><code>Left or Down Arrow</code> - Moves the handle one step to the left, effectively decreasing the component's value by <code>step</code> amount;</li>\n * <li><code>Right or Up Arrow</code> - Moves the handle one step to the right, effectively increasing the component's value by <code>step</code> amount;</li>\n * <li><code>Left or Down Arrow + Ctrl/Cmd</code> - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;</li>\n * <li><code>Right or Up Arrow + Ctrl/Cmd</code> - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;</li>\n * <li><code>Plus</code> - Same as <code>Right or Up Arrow</code>;</li>\n * <li><code>Minus</code> - Same as <code>Left or Down Arrow</code>;</li>\n * <li><code>Home</code> - Moves the handle to the beginning of the range;</li>\n * <li><code>End</code> - Moves the handle to the end of the range;</li>\n * <li><code>Page Up</code> - Same as <code>Right or Up + Ctrl/Cmd</code>;</li>\n * <li><code>Page Down</code> - Same as <code>Left or Down + Ctrl/Cmd</code>;</li>\n * <li><code>Escape</code> - Resets the value property after interaction, to the position prior the component's focusing;</li>\n * </ul>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/Slider\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.Slider\n * @extends sap.ui.webcomponents.main.SliderBase\n * @tagname ui5-slider\n * @since 1.0.0-rc.11\n * @public\n */\nclass Slider extends SliderBase {\n  static get metadata() {\n    return metadata;\n  }\n  static get template() {\n    return SliderTemplate;\n  }\n  constructor() {\n    super();\n    this._stateStorage.value = null;\n    this._setInitialValue(\"value\", null);\n  }\n  static get dependencies() {\n    return [Icon];\n  }\n\n  /**\n   *\n   * Check if the previously saved state is outdated. That would mean\n   * either it is the initial rendering or that a property has been changed\n   * programmatically - because the previous state is always updated in\n   * the interaction handlers.\n   *\n   * Normalize current properties, update the previously stored state.\n   * Update the visual UI representation of the Slider.\n   *\n   */\n  onBeforeRendering() {\n    if (!this.isCurrentStateOutdated()) {\n      return;\n    }\n    this.notResized = true;\n    this.syncUIAndState(\"value\");\n    this._updateHandleAndProgress(this.value);\n  }\n\n  /**\n   * Called when the user starts interacting with the slider\n   *\n   * @private\n   */\n  _onmousedown(event) {\n    // If step is 0 no interaction is available because there is no constant\n    // (equal for all user environments) quantitative representation of the value\n    if (this.disabled || this.step === 0) {\n      return;\n    }\n    const newValue = this.handleDownBase(event);\n    this._valueOnInteractionStart = this.value;\n\n    // Set initial value if one is not set previously on focus in.\n    // It will be restored if ESC key is pressed.\n    if (this._getInitialValue(\"value\") === null) {\n      this._setInitialValue(\"value\", this.value);\n    }\n\n    // Do not yet update the Slider if press is over a handle. It will be updated if the user drags the mouse.\n    if (!this._isHandlePressed(this.constructor.getPageXValueFromEvent(event))) {\n      this._updateHandleAndProgress(newValue);\n      this.updateValue(\"value\", newValue);\n    }\n  }\n  _onfocusin(event) {\n    // Set initial value if one is not set previously on focus in.\n    // It will be restored if ESC key is pressed.\n    if (this._getInitialValue(\"value\") === null) {\n      this._setInitialValue(\"value\", this.value);\n    }\n    if (this.showTooltip) {\n      this._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.VISIBLE;\n    }\n  }\n  _onfocusout(event) {\n    // Prevent focusout when the focus is getting set within the slider internal\n    // element (on the handle), before the Slider' customElement itself is finished focusing\n    if (this._isFocusing()) {\n      this._preventFocusOut();\n      return;\n    }\n\n    // Reset focus state and the stored Slider's initial\n    // value that was saved when it was first focused in\n    this._setInitialValue(\"value\", null);\n    if (this.showTooltip) {\n      this._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.HIDDEN;\n    }\n  }\n\n  /**\n   * Called when the user moves the slider\n   *\n   * @private\n   */\n  _handleMove(event) {\n    event.preventDefault();\n\n    // If step is 0 no interaction is available because there is no constant\n    // (equal for all user environments) quantitative representation of the value\n    if (this.disabled || this._effectiveStep === 0) {\n      return;\n    }\n    const newValue = this.constructor.getValueFromInteraction(event, this._effectiveStep, this._effectiveMin, this._effectiveMax, this.getBoundingClientRect(), this.directionStart);\n    this._updateHandleAndProgress(newValue);\n    this.updateValue(\"value\", newValue);\n  }\n\n  /** Called when the user finish interacting with the slider\n   *\n   * @private\n   */\n  _handleUp(event) {\n    if (this._valueOnInteractionStart !== this.value) {\n      this.fireEvent(\"change\");\n    }\n    this.handleUpBase();\n    this._valueOnInteractionStart = null;\n  }\n\n  /** Determines if the press is over the handle\n   *\n   * @private\n   */\n  _isHandlePressed(clientX) {\n    const sliderHandleDomRect = this._sliderHandle.getBoundingClientRect();\n    return clientX >= sliderHandleDomRect.left && clientX <= sliderHandleDomRect.right;\n  }\n\n  /** Updates the UI representation of the progress bar and handle position\n   *\n   * @private\n   */\n  _updateHandleAndProgress(newValue) {\n    const max = this._effectiveMax;\n    const min = this._effectiveMin;\n\n    // The progress (completed) percentage of the slider.\n    this._progressPercentage = (newValue - min) / (max - min);\n    // How many pixels from the left end of the slider will be the placed the affected  by the user action handle\n    this._handlePositionFromStart = this._progressPercentage * 100;\n  }\n  _handleActionKeyPress(event) {\n    const min = this._effectiveMin;\n    const max = this._effectiveMax;\n    const currentValue = this.value;\n    const newValue = isEscape(event) ? this._getInitialValue(\"value\") : this.constructor.clipValue(this._handleActionKeyPressBase(event, \"value\") + currentValue, min, max);\n    if (newValue !== currentValue) {\n      this._updateHandleAndProgress(newValue);\n      this.updateValue(\"value\", newValue);\n    }\n  }\n  get styles() {\n    return {\n      progress: {\n        \"transform\": `scaleX(${this._progressPercentage})`,\n        \"transform-origin\": `${this.directionStart} top`\n      },\n      handle: {\n        [this.directionStart]: `${this._handlePositionFromStart}%`\n      },\n      label: {\n        \"width\": `${this._labelWidth}%`\n      },\n      labelContainer: {\n        \"width\": `100%`,\n        [this.directionStart]: `-${this._labelWidth / 2}%`\n      },\n      tooltip: {\n        \"visibility\": `${this._tooltipVisibility}`\n      }\n    };\n  }\n  get _sliderHandle() {\n    return this.shadowRoot.querySelector(\".ui5-slider-handle\");\n  }\n  get labelItems() {\n    return this._labelItems;\n  }\n  get tooltipValue() {\n    const stepPrecision = this.constructor._getDecimalPrecisionOfNumber(this._effectiveStep);\n    return this.value.toFixed(stepPrecision);\n  }\n  get _ariaDisabled() {\n    return this.disabled || undefined;\n  }\n  get _ariaLabelledByText() {\n    return Slider.i18nBundle.getText(SLIDER_ARIA_DESCRIPTION);\n  }\n  static async onDefine() {\n    Slider.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n  get tickmarksObject() {\n    const count = this._tickmarksCount;\n    const arr = [];\n    if (this._hiddenTickmarks) {\n      return [true, false];\n    }\n    for (let i = 0; i <= count; i++) {\n      arr.push(this._effectiveMin + i * this.step <= this.value);\n    }\n    return arr;\n  }\n}\nSlider.define();\nexport default Slider;","map":{"version":3,"names":["Float","getI18nBundle","isEscape","SliderBase","Icon","SliderTemplate","SLIDER_ARIA_DESCRIPTION","metadata","tag","languageAware","managedSlots","properties","value","type","defaultValue","Slider","template","constructor","_stateStorage","_setInitialValue","dependencies","onBeforeRendering","isCurrentStateOutdated","notResized","syncUIAndState","_updateHandleAndProgress","_onmousedown","event","disabled","step","newValue","handleDownBase","_valueOnInteractionStart","_getInitialValue","_isHandlePressed","getPageXValueFromEvent","updateValue","_onfocusin","showTooltip","_tooltipVisibility","TOOLTIP_VISIBILITY","VISIBLE","_onfocusout","_isFocusing","_preventFocusOut","HIDDEN","_handleMove","preventDefault","_effectiveStep","getValueFromInteraction","_effectiveMin","_effectiveMax","getBoundingClientRect","directionStart","_handleUp","fireEvent","handleUpBase","clientX","sliderHandleDomRect","_sliderHandle","left","right","max","min","_progressPercentage","_handlePositionFromStart","_handleActionKeyPress","currentValue","clipValue","_handleActionKeyPressBase","styles","progress","handle","label","_labelWidth","labelContainer","tooltip","shadowRoot","querySelector","labelItems","_labelItems","tooltipValue","stepPrecision","_getDecimalPrecisionOfNumber","toFixed","_ariaDisabled","undefined","_ariaLabelledByText","i18nBundle","getText","onDefine","tickmarksObject","count","_tickmarksCount","arr","_hiddenTickmarks","i","push","define"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents/dist/Slider.js"],"sourcesContent":["import Float from \"@ui5/webcomponents-base/dist/types/Float.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isEscape } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport SliderBase from \"./SliderBase.js\";\nimport Icon from \"./Icon.js\";\n\n// Template\nimport SliderTemplate from \"./generated/templates/SliderTemplate.lit.js\";\n\n// Texts\nimport {\n\tSLIDER_ARIA_DESCRIPTION,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-slider\",\n\tlanguageAware: true,\n\tmanagedSlots: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.Slider.prototype */  {\n\t\t/**\n\t\t * Current value of the slider\n\t\t *\n\t\t * @type {sap.ui.webcomponents.base.types.Float}\n\t\t * @defaultvalue 0\n\t\t * @formEvents change input\n\t\t * @formProperty\n\t\t * @public\n\t\t */\n\t\tvalue: {\n\t\t\ttype: Float,\n\t\t\tdefaultValue: 0,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The Slider component represents a numerical range and a handle (grip).\n * The purpose of the component is to enable visual selection of a value in\n * a continuous numerical range by moving an adjustable handle.\n *\n * <h3>Structure</h3>\n * The most important properties of the Slider are:\n * <ul>\n * <li>min - The minimum value of the slider range.</li>\n * <li>max - The maximum value of the slider range.</li>\n * <li>value - The current value of the slider range.</li>\n * <li>step - Determines the increments in which the slider will move.</li>\n * <li>showTooltip - Determines if a tooltip should be displayed above the handle.</li>\n * <li>showTickmarks - Displays a visual divider between the step values.</li>\n * <li>labelInterval - Labels some or all of the tickmarks with their values.</li>\n * </ul>\n *\n * <h3>Usage</h3>\n * The most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n *\n * <h3>Responsive Behavior</h3>\n * The <code>ui5-slider</code> component adjusts to the size of its parent container by recalculating and\n * resizing the width of the control. You can move the slider handle in several different ways:\n * <ul>\n * <li>Drag and drop the handle to the desired value.</li>\n * <li>Click/tap on the range bar to move the handle to that location.</li>\n * </ul>\n *\n * <h3>CSS Shadow Parts</h3>\n *\n * <ui5-link target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">CSS Shadow Parts</ui5-link> allow developers to style elements inside the Shadow DOM.\n * <br>\n * The <code>ui5-slider</code> exposes the following CSS Shadow Parts:\n * <ul>\n * <li>progress-container - Used to style the progress container(the horizontal bar which visually represents the range between the minimum and maximum value) of the <code>ui5-slider</code>.</li>\n * <li>progress-bar - Used to style the progress bar, which shows the progress of the <code>ui5-slider</code>.</li>\n * <li>handle - Used to style the handle of the <code>ui5-slider</code>.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n *\n * <ul>\n * <li><code>Left or Down Arrow</code> - Moves the handle one step to the left, effectively decreasing the component's value by <code>step</code> amount;</li>\n * <li><code>Right or Up Arrow</code> - Moves the handle one step to the right, effectively increasing the component's value by <code>step</code> amount;</li>\n * <li><code>Left or Down Arrow + Ctrl/Cmd</code> - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;</li>\n * <li><code>Right or Up Arrow + Ctrl/Cmd</code> - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;</li>\n * <li><code>Plus</code> - Same as <code>Right or Up Arrow</code>;</li>\n * <li><code>Minus</code> - Same as <code>Left or Down Arrow</code>;</li>\n * <li><code>Home</code> - Moves the handle to the beginning of the range;</li>\n * <li><code>End</code> - Moves the handle to the end of the range;</li>\n * <li><code>Page Up</code> - Same as <code>Right or Up + Ctrl/Cmd</code>;</li>\n * <li><code>Page Down</code> - Same as <code>Left or Down + Ctrl/Cmd</code>;</li>\n * <li><code>Escape</code> - Resets the value property after interaction, to the position prior the component's focusing;</li>\n * </ul>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/Slider\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.Slider\n * @extends sap.ui.webcomponents.main.SliderBase\n * @tagname ui5-slider\n * @since 1.0.0-rc.11\n * @public\n */\nclass Slider extends SliderBase {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get template() {\n\t\treturn SliderTemplate;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._stateStorage.value = null;\n\t\tthis._setInitialValue(\"value\", null);\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [Icon];\n\t}\n\n\t/**\n\t *\n\t * Check if the previously saved state is outdated. That would mean\n\t * either it is the initial rendering or that a property has been changed\n\t * programmatically - because the previous state is always updated in\n\t * the interaction handlers.\n\t *\n\t * Normalize current properties, update the previously stored state.\n\t * Update the visual UI representation of the Slider.\n\t *\n\t */\n\tonBeforeRendering() {\n\t\tif (!this.isCurrentStateOutdated()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notResized = true;\n\t\tthis.syncUIAndState(\"value\");\n\t\tthis._updateHandleAndProgress(this.value);\n\t}\n\n\t/**\n\t * Called when the user starts interacting with the slider\n\t *\n\t * @private\n\t */\n\t_onmousedown(event) {\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this.step === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.handleDownBase(event);\n\t\tthis._valueOnInteractionStart = this.value;\n\n\t\t// Set initial value if one is not set previously on focus in.\n\t\t// It will be restored if ESC key is pressed.\n\t\tif (this._getInitialValue(\"value\") === null) {\n\t\t\tthis._setInitialValue(\"value\", this.value);\n\t\t}\n\n\t\t// Do not yet update the Slider if press is over a handle. It will be updated if the user drags the mouse.\n\t\tif (!this._isHandlePressed(this.constructor.getPageXValueFromEvent(event))) {\n\t\t\tthis._updateHandleAndProgress(newValue);\n\t\t\tthis.updateValue(\"value\", newValue);\n\t\t}\n\t}\n\n\t_onfocusin(event) {\n\t\t// Set initial value if one is not set previously on focus in.\n\t\t// It will be restored if ESC key is pressed.\n\t\tif (this._getInitialValue(\"value\") === null) {\n\t\t\tthis._setInitialValue(\"value\", this.value);\n\t\t}\n\n\t\tif (this.showTooltip) {\n\t\t\tthis._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.VISIBLE;\n\t\t}\n\t}\n\n\t_onfocusout(event) {\n\t\t// Prevent focusout when the focus is getting set within the slider internal\n\t\t// element (on the handle), before the Slider' customElement itself is finished focusing\n\t\tif (this._isFocusing()) {\n\t\t\tthis._preventFocusOut();\n\t\t\treturn;\n\t\t}\n\n\t\t// Reset focus state and the stored Slider's initial\n\t\t// value that was saved when it was first focused in\n\t\tthis._setInitialValue(\"value\", null);\n\n\t\tif (this.showTooltip) {\n\t\t\tthis._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.HIDDEN;\n\t\t}\n\t}\n\n\t/**\n\t * Called when the user moves the slider\n\t *\n\t * @private\n\t */\n\t_handleMove(event) {\n\t\tevent.preventDefault();\n\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this._effectiveStep === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.constructor.getValueFromInteraction(event, this._effectiveStep, this._effectiveMin, this._effectiveMax, this.getBoundingClientRect(), this.directionStart);\n\n\t\tthis._updateHandleAndProgress(newValue);\n\t\tthis.updateValue(\"value\", newValue);\n\t}\n\n\t/** Called when the user finish interacting with the slider\n\t *\n\t * @private\n\t */\n\t_handleUp(event) {\n\t\tif (this._valueOnInteractionStart !== this.value) {\n\t\t\tthis.fireEvent(\"change\");\n\t\t}\n\n\t\tthis.handleUpBase();\n\t\tthis._valueOnInteractionStart = null;\n\t}\n\n\t/** Determines if the press is over the handle\n\t *\n\t * @private\n\t */\n\t_isHandlePressed(clientX) {\n\t\tconst sliderHandleDomRect = this._sliderHandle.getBoundingClientRect();\n\t\treturn clientX >= sliderHandleDomRect.left && clientX <= sliderHandleDomRect.right;\n\t}\n\n\t/** Updates the UI representation of the progress bar and handle position\n\t *\n\t * @private\n\t */\n\t_updateHandleAndProgress(newValue) {\n\t\tconst max = this._effectiveMax;\n\t\tconst min = this._effectiveMin;\n\n\t\t// The progress (completed) percentage of the slider.\n\t\tthis._progressPercentage = (newValue - min) / (max - min);\n\t\t// How many pixels from the left end of the slider will be the placed the affected  by the user action handle\n\t\tthis._handlePositionFromStart = this._progressPercentage * 100;\n\t}\n\n\t_handleActionKeyPress(event) {\n\t\tconst min = this._effectiveMin;\n\t\tconst max = this._effectiveMax;\n\t\tconst currentValue = this.value;\n\t\tconst newValue = isEscape(event) ? this._getInitialValue(\"value\") : this.constructor.clipValue(this._handleActionKeyPressBase(event, \"value\") + currentValue, min, max);\n\n\t\tif (newValue !== currentValue) {\n\t\t\tthis._updateHandleAndProgress(newValue);\n\t\t\tthis.updateValue(\"value\", newValue);\n\t\t}\n\t}\n\n\tget styles() {\n\t\treturn {\n\t\t\tprogress: {\n\t\t\t\t\"transform\": `scaleX(${this._progressPercentage})`,\n\t\t\t\t\"transform-origin\": `${this.directionStart} top`,\n\t\t\t},\n\t\t\thandle: {\n\t\t\t\t[this.directionStart]: `${this._handlePositionFromStart}%`,\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\t\"width\": `${this._labelWidth}%`,\n\t\t\t},\n\t\t\tlabelContainer: {\n\t\t\t\t\"width\": `100%`,\n\t\t\t\t[this.directionStart]: `-${this._labelWidth / 2}%`,\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\t\"visibility\": `${this._tooltipVisibility}`,\n\t\t\t},\n\t\t};\n\t}\n\n\tget _sliderHandle() {\n\t\treturn this.shadowRoot.querySelector(\".ui5-slider-handle\");\n\t}\n\n\tget labelItems() {\n\t\treturn this._labelItems;\n\t}\n\n\tget tooltipValue() {\n\t\tconst stepPrecision = this.constructor._getDecimalPrecisionOfNumber(this._effectiveStep);\n\t\treturn this.value.toFixed(stepPrecision);\n\t}\n\n\tget _ariaDisabled() {\n\t\treturn this.disabled || undefined;\n\t}\n\n\tget _ariaLabelledByText() {\n\t\treturn Slider.i18nBundle.getText(SLIDER_ARIA_DESCRIPTION);\n\t}\n\n\tstatic async onDefine() {\n\t\tSlider.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tget tickmarksObject() {\n\t\tconst count = this._tickmarksCount;\n\t\tconst arr = [];\n\n\t\tif (this._hiddenTickmarks) {\n\t\t\treturn [true, false];\n\t\t}\n\n\t\tfor (let i = 0; i <= count; i++) {\n\t\t\tarr.push(this._effectiveMin + (i * this.step) <= this.value);\n\t\t}\n\n\t\treturn arr;\n\t}\n}\n\nSlider.define();\n\nexport default Slider;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,6CAA6C;AAC/D,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,QAAQ,QAAQ,sCAAsC;AAC/D,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AACA,OAAOC,cAAc,MAAM,6CAA6C;;AAExE;AACA,SACCC,uBAAuB,QACjB,mCAAmC;;AAE1C;AACA;AACA;AACA,MAAMC,QAAQ,GAAG;EAChBC,GAAG,EAAE,YAAY;EACjBC,aAAa,EAAE,IAAI;EACnBC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,wDAA0D;IACrE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,KAAK,EAAE;MACNC,IAAI,EAAEb,KAAK;MACXc,YAAY,EAAE;IACf;EACD;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,SAASZ,UAAU,CAAC;EAC/B,WAAWI,QAAQ,GAAG;IACrB,OAAOA,QAAQ;EAChB;EAEA,WAAWS,QAAQ,GAAG;IACrB,OAAOX,cAAc;EACtB;EAEAY,WAAW,GAAG;IACb,KAAK,EAAE;IACP,IAAI,CAACC,aAAa,CAACN,KAAK,GAAG,IAAI;IAC/B,IAAI,CAACO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC;EACrC;EAEA,WAAWC,YAAY,GAAG;IACzB,OAAO,CAAChB,IAAI,CAAC;EACd;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCiB,iBAAiB,GAAG;IACnB,IA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"},"metadata":{},"sourceType":"module"}