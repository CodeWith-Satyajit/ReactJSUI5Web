{"ast":null,"code":"import { debounce } from '@ui5/webcomponents-react-base';\nimport { useEffect, useRef } from 'react';\n/**\n * Plugin Hook that adds a callback which is fired on column resize.\n *\n * @param {event} callback Fired when the column is resized by dragging the \"Resizer\".\n * @param {Object=} options Additional options.\n * @param {number=} options.wait If `liveUpdate` is `true`, the resize function will fire every time the width has changed depending on the `options.wait` delay.\n * @param {boolean=} options.liveUpdate The number of milliseconds for which the calls are to be delayed. Defaults to `100`.\n */\nexport const useOnColumnResize = (callback, options) => {\n  var _a;\n  const debouncedEvent = debounce(callback, (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 100);\n  const useInstance = instance => {\n    const {\n      state,\n      columns\n    } = instance;\n    const {\n      columnResizing\n    } = state;\n    const {\n      isResizingColumn,\n      columnWidths\n    } = columnResizing;\n    const prevHeaderIsResizing = useRef(undefined);\n    useEffect(() => {\n      if (isResizingColumn && (options === null || options === void 0 ? void 0 : options.liveUpdate)) {\n        const currentHeader = columns.find(item => item.id === isResizingColumn);\n        debouncedEvent({\n          columnWidth: columnWidths[isResizingColumn],\n          header: currentHeader\n        });\n      }\n    }, [columnResizing, options === null || options === void 0 ? void 0 : options.liveUpdate, columns]);\n    useEffect(() => {\n      if (options === null || options === void 0 ? void 0 : options.liveUpdate) {\n        return () => debouncedEvent.cancel();\n      }\n    }, [options === null || options === void 0 ? void 0 : options.liveUpdate]);\n    useEffect(() => {\n      if (!(options === null || options === void 0 ? void 0 : options.liveUpdate)) {\n        const currentHeader = columns.find(item => item.id === prevHeaderIsResizing.current);\n        if (isResizingColumn) {\n          prevHeaderIsResizing.current = isResizingColumn;\n        }\n        if (!isResizingColumn && prevHeaderIsResizing.current) {\n          callback({\n            columnWidth: columnWidths[prevHeaderIsResizing.current],\n            header: currentHeader\n          });\n        }\n      }\n    }, [columnResizing, options === null || options === void 0 ? void 0 : options.liveUpdate, columns]);\n  };\n  const useOnColumnResizeHooks = hooks => {\n    hooks.useFinalInstance.push(useInstance);\n  };\n  useOnColumnResizeHooks.pluginName = 'useOnColumnResize';\n  return useOnColumnResizeHooks;\n};","map":{"version":3,"names":["debounce","useEffect","useRef","useOnColumnResize","callback","options","_a","debouncedEvent","wait","useInstance","instance","state","columns","columnResizing","isResizingColumn","columnWidths","prevHeaderIsResizing","undefined","liveUpdate","currentHeader","find","item","id","columnWidth","header","cancel","current","useOnColumnResizeHooks","hooks","useFinalInstance","push","pluginName"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/pluginHooks/useOnColumnResize.js"],"sourcesContent":["import { debounce } from '@ui5/webcomponents-react-base';\nimport { useEffect, useRef } from 'react';\n/**\n * Plugin Hook that adds a callback which is fired on column resize.\n *\n * @param {event} callback Fired when the column is resized by dragging the \"Resizer\".\n * @param {Object=} options Additional options.\n * @param {number=} options.wait If `liveUpdate` is `true`, the resize function will fire every time the width has changed depending on the `options.wait` delay.\n * @param {boolean=} options.liveUpdate The number of milliseconds for which the calls are to be delayed. Defaults to `100`.\n */\nexport const useOnColumnResize = (callback, options) => {\n    var _a;\n    const debouncedEvent = debounce(callback, (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 100);\n    const useInstance = (instance) => {\n        const { state, columns } = instance;\n        const { columnResizing } = state;\n        const { isResizingColumn, columnWidths } = columnResizing;\n        const prevHeaderIsResizing = useRef(undefined);\n        useEffect(() => {\n            if (isResizingColumn && (options === null || options === void 0 ? void 0 : options.liveUpdate)) {\n                const currentHeader = columns.find((item) => item.id === isResizingColumn);\n                debouncedEvent({\n                    columnWidth: columnWidths[isResizingColumn],\n                    header: currentHeader\n                });\n            }\n        }, [columnResizing, options === null || options === void 0 ? void 0 : options.liveUpdate, columns]);\n        useEffect(() => {\n            if (options === null || options === void 0 ? void 0 : options.liveUpdate) {\n                return () => debouncedEvent.cancel();\n            }\n        }, [options === null || options === void 0 ? void 0 : options.liveUpdate]);\n        useEffect(() => {\n            if (!(options === null || options === void 0 ? void 0 : options.liveUpdate)) {\n                const currentHeader = columns.find((item) => item.id === prevHeaderIsResizing.current);\n                if (isResizingColumn) {\n                    prevHeaderIsResizing.current = isResizingColumn;\n                }\n                if (!isResizingColumn && prevHeaderIsResizing.current) {\n                    callback({\n                        columnWidth: columnWidths[prevHeaderIsResizing.current],\n                        header: currentHeader\n                    });\n                }\n            }\n        }, [columnResizing, options === null || options === void 0 ? void 0 : options.liveUpdate, columns]);\n    };\n    const useOnColumnResizeHooks = (hooks) => {\n        hooks.useFinalInstance.push(useInstance);\n    };\n    useOnColumnResizeHooks.pluginName = 'useOnColumnResize';\n    return useOnColumnResizeHooks;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}