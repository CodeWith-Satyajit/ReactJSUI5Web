{"ast":null,"code":"import merge from \"./thirdparty/merge.js\";\nimport { boot } from \"./Boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport getSingletonElementInstance from \"./util/getSingletonElementInstance.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport updateShadowRoot from \"./updateShadowRoot.js\";\nimport { renderDeferred, renderImmediately, cancelRender } from \"./Render.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport { observeDOMNode, unobserveDOMNode } from \"./DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport getEffectiveDir from \"./locale/getEffectiveDir.js\";\nimport DataType from \"./types/DataType.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { isSlot, getSlotName, getSlottedElementsList } from \"./util/SlotsHelper.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport getClassCopy from \"./util/getClassCopy.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\nimport preloadLinks from \"./theming/preloadLinks.js\";\nlet autoId = 0;\nconst elementTimeouts = new Map();\nconst uniqueDependenciesCache = new Map();\n\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\nfunction _invalidate(changeInfo) {\n  // Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n  // This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n  if (this._suppressInvalidation) {\n    return;\n  }\n\n  // Call the onInvalidation hook\n  this.onInvalidation(changeInfo);\n  this._changedState.push(changeInfo);\n  renderDeferred(this);\n  this._eventProvider.fireEvent(\"invalidate\", {\n    ...changeInfo,\n    target: this\n  });\n}\nlet metadata = {};\n\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\nclass UI5Element extends HTMLElement {\n  constructor() {\n    super();\n    this._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n    this._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n    this._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n    this._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n    this._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n    this._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n    this._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n    let deferredResolve;\n    this._domRefReadyPromise = new Promise(resolve => {\n      deferredResolve = resolve;\n    });\n    this._domRefReadyPromise._deferredResolve = deferredResolve;\n    this._doNotSyncAttributes = new Set(); // attributes that are excluded from attributeChangedCallback synchronization\n\n    this._initializeState();\n    this._upgradeAllProperties();\n    if (this.constructor._needsShadowDOM()) {\n      this.attachShadow({\n        mode: \"open\"\n      });\n    }\n  }\n\n  /**\n   * Returns a unique ID for this UI5 Element\n   *\n   * @deprecated - This property is not guaranteed in future releases\n   * @protected\n   */\n  get _id() {\n    if (!this.__id) {\n      this.__id = `ui5wc_${++autoId}`;\n    }\n    return this.__id;\n  }\n\n  /**\n   * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n   * @private\n   */\n  async connectedCallback() {\n    this.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n    if (this.constructor.getMetadata().supportsF6FastNavigation()) {\n      this.setAttribute(\"data-sap-ui-fastnavgroup\", \"true\");\n    }\n    const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n    this._inDOM = true;\n    if (slotsAreManaged) {\n      // always register the observer before yielding control to the main thread (await)\n      this._startObservingDOMChildren();\n      await this._processChildren();\n    }\n    if (!this._inDOM) {\n      // Component removed from DOM while _processChildren was running\n      return;\n    }\n    renderImmediately(this);\n    this._domRefReadyPromise._deferredResolve();\n    this._fullyConnected = true;\n    if (typeof this.onEnterDOM === \"function\") {\n      this.onEnterDOM();\n    }\n  }\n\n  /**\n   * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n   * @private\n   */\n  disconnectedCallback() {\n    const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n    this._inDOM = false;\n    if (slotsAreManaged) {\n      this._stopObservingDOMChildren();\n    }\n    if (this._fullyConnected) {\n      if (typeof this.onExitDOM === \"function\") {\n        this.onExitDOM();\n      }\n      this._fullyConnected = false;\n    }\n    if (this.staticAreaItem && this.staticAreaItem.parentElement) {\n      this.staticAreaItem.parentElement.removeChild(this.staticAreaItem);\n    }\n    cancelRender(this);\n  }\n\n  /**\n   * @private\n   */\n  _startObservingDOMChildren() {\n    const shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n    if (!shouldObserveChildren) {\n      return;\n    }\n    const canSlotText = this.constructor.getMetadata().canSlotText();\n    const mutationObserverOptions = {\n      childList: true,\n      subtree: canSlotText,\n      characterData: canSlotText\n    };\n    observeDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n  }\n\n  /**\n   * @private\n   */\n  _stopObservingDOMChildren() {\n    unobserveDOMNode(this);\n  }\n\n  /**\n   * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n   * @private\n   */\n  async _processChildren() {\n    const hasSlots = this.constructor.getMetadata().hasSlots();\n    if (hasSlots) {\n      await this._updateSlots();\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _updateSlots() {\n    const slotsMap = this.constructor.getMetadata().getSlots();\n    const canSlotText = this.constructor.getMetadata().canSlotText();\n    const domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n    const slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n    const propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n\n    // Init the _state object based on the supported slots and store the previous values\n    for (const [slotName, slotData] of Object.entries(slotsMap)) {\n      // eslint-disable-line\n      const propertyName = slotData.propertyName || slotName;\n      propertyNameToSlotMap.set(propertyName, slotName);\n      slotsCachedContentMap.set(propertyName, [...this._state[propertyName]]);\n      this._clearSlot(slotName, slotData);\n    }\n    const autoIncrementMap = new Map();\n    const slottedChildrenMap = new Map();\n    const allChildrenUpgraded = domChildren.map(async (child, idx) => {\n      // Determine the type of the child (mainly by the slot attribute)\n      const slotName = getSlotName(child);\n      const slotData = slotsMap[slotName];\n\n      // Check if the slotName is supported\n      if (slotData === undefined) {\n        const validValues = Object.keys(slotsMap).join(\", \");\n        console.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line\n        return;\n      }\n\n      // For children that need individual slots, calculate them\n      if (slotData.individualSlots) {\n        const nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n        autoIncrementMap.set(slotName, nextIndex);\n        child._individualSlot = `${slotName}-${nextIndex}`;\n      }\n\n      // Await for not-yet-defined custom elements\n      if (child instanceof HTMLElement) {\n        const localName = child.localName;\n        const isCustomElement = localName.includes(\"-\");\n        if (isCustomElement) {\n          const isDefined = window.customElements.get(localName);\n          if (!isDefined) {\n            const whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n            let timeoutPromise = elementTimeouts.get(localName);\n            if (!timeoutPromise) {\n              timeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));\n              elementTimeouts.set(localName, timeoutPromise);\n            }\n            await Promise.race([whenDefinedPromise, timeoutPromise]);\n          }\n          window.customElements.upgrade(child);\n        }\n      }\n      child = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);\n\n      // Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n      if (child.isUI5Element && slotData.invalidateOnChildChange) {\n        const method = (child.attachInvalidate || child._attachChange).bind(child);\n        method(this._getChildChangeListener(slotName));\n      }\n\n      // Listen for the slotchange event if the child is a slot itself\n      if (isSlot(child)) {\n        this._attachSlotChange(child, slotName);\n      }\n      const propertyName = slotData.propertyName || slotName;\n      if (slottedChildrenMap.has(propertyName)) {\n        slottedChildrenMap.get(propertyName).push({\n          child,\n          idx\n        });\n      } else {\n        slottedChildrenMap.set(propertyName, [{\n          child,\n          idx\n        }]);\n      }\n    });\n    await Promise.all(allChildrenUpgraded);\n\n    // Distribute the child in the _state object, keeping the Light DOM order,\n    // not the order elements are defined.\n    slottedChildrenMap.forEach((children, propertyName) => {\n      this._state[propertyName] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);\n    });\n\n    // Compare the content of each slot with the cached values and invalidate for the ones that changed\n    let invalidated = false;\n    for (const [slotName, slotData] of Object.entries(slotsMap)) {\n      // eslint-disable-line\n      const propertyName = slotData.propertyName || slotName;\n      if (!arraysAreEqual(slotsCachedContentMap.get(propertyName), this._state[propertyName])) {\n        _invalidate.call(this, {\n          type: \"slot\",\n          name: propertyNameToSlotMap.get(propertyName),\n          reason: \"children\"\n        });\n        invalidated = true;\n      }\n    }\n\n    // If none of the slots had an invalidation due to changes to immediate children,\n    // the change is considered to be text content of the default slot\n    if (!invalidated) {\n      _invalidate.call(this, {\n        type: \"slot\",\n        name: \"default\",\n        reason: \"textcontent\"\n      });\n    }\n  }\n\n  /**\n   * Removes all children from the slot and detaches listeners, if any\n   * @private\n   */\n  _clearSlot(slotName, slotData) {\n    const propertyName = slotData.propertyName || slotName;\n    const children = this._state[propertyName];\n    children.forEach(child => {\n      if (child && child.isUI5Element) {\n        const method = (child.detachInvalidate || child._detachChange).bind(child);\n        method(this._getChildChangeListener(slotName));\n      }\n      if (isSlot(child)) {\n        this._detachSlotChange(child, slotName);\n      }\n    });\n    this._state[propertyName] = [];\n  }\n\n  /**\n   * Attach a callback that will be executed whenever the component is invalidated\n   *\n   * @param callback\n   * @public\n   */\n  attachInvalidate(callback) {\n    this._eventProvider.attachEvent(\"invalidate\", callback);\n  }\n\n  /**\n   * Detach the callback that is executed whenever the component is invalidated\n   *\n   * @param callback\n   * @public\n   */\n  detachInvalidate(callback) {\n    this._eventProvider.detachEvent(\"invalidate\", callback);\n  }\n\n  /**\n   * Callback that is executed whenever a monitored child changes its state\n   *\n   * @param slotName the slot in which a child was invalidated\n   * @param childChangeInfo the changeInfo object for the child in the given slot\n   * @private\n   */\n  _onChildChange(slotName, childChangeInfo) {\n    if (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n      return;\n    }\n\n    // The component should be invalidated as this type of change on the child is listened for\n    // However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n    _invalidate.call(this, {\n      type: \"slot\",\n      name: slotName,\n      reason: \"childchange\",\n      child: childChangeInfo.target\n    });\n  }\n\n  /**\n   * Do not override this method in derivatives of UI5Element\n   * @private\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (this._doNotSyncAttributes.has(name)) {\n      // This attribute is mutated internally, not by the user\n      return;\n    }\n    const properties = this.constructor.getMetadata().getProperties();\n    const realName = name.replace(/^ui5-/, \"\");\n    const nameInCamelCase = kebabToCamelCase(realName);\n    if (properties.hasOwnProperty(nameInCamelCase)) {\n      // eslint-disable-line\n      const propertyTypeClass = properties[nameInCamelCase].type;\n      if (propertyTypeClass === Boolean) {\n        newValue = newValue !== null;\n      } else if (isDescendantOf(propertyTypeClass, DataType)) {\n        newValue = propertyTypeClass.attributeToProperty(newValue);\n      }\n      this[nameInCamelCase] = newValue;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateAttribute(name, newValue) {\n    if (!this.constructor.getMetadata().hasAttribute(name)) {\n      return;\n    }\n    const properties = this.constructor.getMetadata().getProperties();\n    const propertyTypeClass = properties[name].type;\n    const attrName = camelToKebabCase(name);\n    const attrValue = this.getAttribute(attrName);\n    if (propertyTypeClass === Boolean) {\n      if (newValue === true && attrValue === null) {\n        this.setAttribute(attrName, \"\");\n      } else if (newValue === false && attrValue !== null) {\n        this.removeAttribute(attrName);\n      }\n    } else if (isDescendantOf(propertyTypeClass, DataType)) {\n      const newAttrValue = propertyTypeClass.propertyToAttribute(newValue);\n      if (newAttrValue === null) {\n        // null means there must be no attribute for the current value of the property\n        this._doNotSyncAttributes.add(attrName); // skip the attributeChangedCallback call for this attribute\n        this.removeAttribute(attrName); // remove the attribute safely (will not trigger synchronization to the property value due to the above line)\n        this._doNotSyncAttributes.delete(attrName); // enable synchronization again for this attribute\n      } else {\n        this.setAttribute(attrName, newAttrValue);\n      }\n    } else if (typeof newValue !== \"object\") {\n      if (attrValue !== newValue) {\n        this.setAttribute(attrName, newValue);\n      }\n    } // else { return; } // old object handling\n  }\n\n  /**\n   * @private\n   */\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      // eslint-disable-line\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _upgradeAllProperties() {\n    const allProps = this.constructor.getMetadata().getPropertiesList();\n    allProps.forEach(this._upgradeProperty, this);\n  }\n\n  /**\n   * @private\n   */\n  _initializeState() {\n    this._state = {\n      ...this.constructor.getMetadata().getInitialState()\n    };\n  }\n\n  /**\n   * Returns a singleton event listener for the \"change\" event of a child in a given slot\n   *\n   * @param slotName the name of the slot, where the child is\n   * @returns {any}\n   * @private\n   */\n  _getChildChangeListener(slotName) {\n    if (!this._childChangeListeners.has(slotName)) {\n      this._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n    }\n    return this._childChangeListeners.get(slotName);\n  }\n\n  /**\n   * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n   *\n   * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n   * @returns {any}\n   * @private\n   */\n  _getSlotChangeListener(slotName) {\n    if (!this._slotChangeListeners.has(slotName)) {\n      this._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n    }\n    return this._slotChangeListeners.get(slotName);\n  }\n\n  /**\n   * @private\n   */\n  _attachSlotChange(child, slotName) {\n    child.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n  }\n\n  /**\n   * @private\n   */\n  _detachSlotChange(child, slotName) {\n    child.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n  }\n\n  /**\n   * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n   *\n   * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n   * @private\n   */\n  _onSlotChange(slotName) {\n    _invalidate.call(this, {\n      type: \"slot\",\n      name: slotName,\n      reason: \"slotchange\"\n    });\n  }\n\n  /**\n   * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n   *\n   * @param  changeInfo An object with information about the change that caused invalidation.\n   * The object can have the following properties:\n   *  - type: (property|slot) tells what caused the invalidation\n   *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n   *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n   *\n   *  - name: the name of the property or slot that caused the invalidation\n   *\n   *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n   *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n   *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n   *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n   *      Can only trigger if the child of a slot is a slot element itself.\n   *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n   *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n   *\n   *  - newValue: the new value of the property (for type=\"property\" only)\n   *\n   *  - oldValue: the old value of the property (for type=\"property\" only)\n   *\n   *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n   *\n   * @public\n   */\n  onInvalidation(changeInfo) {}\n\n  /**\n   * Do not call this method directly, only intended to be called by js\n   * @protected\n   */\n  _render() {\n    const hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();\n\n    // suppress invalidation to prevent state changes scheduling another rendering\n    this._suppressInvalidation = true;\n    if (typeof this.onBeforeRendering === \"function\") {\n      this.onBeforeRendering();\n    }\n\n    // Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n    if (this._onComponentStateFinalized) {\n      this._onComponentStateFinalized();\n    }\n\n    // resume normal invalidation handling\n    this._suppressInvalidation = false;\n\n    // Update the shadow root with the render result\n    /*\n    if (this._changedState.length) {\n    \tlet element = this.localName;\n    \tif (this.id) {\n    \t\telement = `${element}#${this.id}`;\n    \t}\n    \tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n    \t\tlet res = `${x.type}`;\n    \t\tif (x.reason) {\n    \t\t\tres = `${res}(${x.reason})`;\n    \t\t}\n    \t\tres = `${res}: ${x.name}`;\n    \t\tif (x.type === \"property\") {\n    \t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n    \t\t}\n    \t\t\treturn res;\n    \t}));\n    }\n    */\n    this._changedState = [];\n\n    // Update shadow root and static area item\n    if (this.constructor._needsShadowDOM()) {\n      updateShadowRoot(this);\n    }\n    if (this.staticAreaItem) {\n      this.staticAreaItem.update();\n    }\n\n    // Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n    if (hasIndividualSlots) {\n      this._assignIndividualSlotsToChildren();\n    }\n\n    // Call the onAfterRendering hook\n    if (typeof this.onAfterRendering === \"function\") {\n      this.onAfterRendering();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _assignIndividualSlotsToChildren() {\n    const domChildren = Array.from(this.children);\n    domChildren.forEach(child => {\n      if (child._individualSlot) {\n        child.setAttribute(\"slot\", child._individualSlot);\n      }\n    });\n  }\n\n  /**\n   * @private\n   */\n  _waitForDomRef() {\n    return this._domRefReadyPromise;\n  }\n\n  /**\n   * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n   * *Note:* For logical (abstract) elements (items, options, etc...), returns the part of the parent's DOM that represents this option\n   * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n   *\n   * @public\n   */\n  getDomRef() {\n    // If a component set _getRealDomRef to its children, use the return value of this function\n    if (typeof this._getRealDomRef === \"function\") {\n      return this._getRealDomRef();\n    }\n    if (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n      return;\n    }\n    const children = [...this.shadowRoot.children].filter(child => ![\"link\", \"style\"].includes(child.localName));\n    if (children.length !== 1) {\n      console.warn(`The shadow DOM for ${this.constructor.getMetadata().getTag()} does not have a top level element, the getDomRef() method might not work as expected`); // eslint-disable-line\n    }\n\n    return children[0];\n  }\n\n  /**\n   * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n   * This is the element that will receive the focus by default.\n   * @public\n   */\n  getFocusDomRef() {\n    const domRef = this.getDomRef();\n    if (domRef) {\n      const focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n      return focusRef || domRef;\n    }\n  }\n\n  /**\n   * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n   * This is the element that will receive the focus by default.\n   * @public\n   */\n  async getFocusDomRefAsync() {\n    await this._waitForDomRef();\n    return this.getFocusDomRef();\n  }\n\n  /**\n   * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n   * @public\n   */\n  async focus() {\n    await this._waitForDomRef();\n    const focusDomRef = this.getFocusDomRef();\n    if (focusDomRef && typeof focusDomRef.focus === \"function\") {\n      focusDomRef.focus();\n    }\n  }\n\n  /**\n   *\n   * @public\n   * @param name - name of the event\n   * @param data - additional data for the event\n   * @param cancelable - true, if the user can call preventDefault on the event object\n   * @param bubbles - true, if the event bubbles\n   * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n   */\n  fireEvent(name, data) {\n    let cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let bubbles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const eventResult = this._fireEvent(name, data, cancelable, bubbles);\n    const camelCaseEventName = kebabToCamelCase(name);\n    if (camelCaseEventName !== name) {\n      return eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n    }\n    return eventResult;\n  }\n  _fireEvent(name, data) {\n    let cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let bubbles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const noConflictEvent = new CustomEvent(`ui5-${name}`, {\n      detail: data,\n      composed: false,\n      bubbles,\n      cancelable\n    });\n\n    // This will be false if the no-conflict event is prevented\n    const noConflictEventResult = this.dispatchEvent(noConflictEvent);\n    if (skipOriginalEvent(name)) {\n      return noConflictEventResult;\n    }\n    const normalEvent = new CustomEvent(name, {\n      detail: data,\n      composed: false,\n      bubbles,\n      cancelable\n    });\n\n    // This will be false if the normal event is prevented\n    const normalEventResult = this.dispatchEvent(normalEvent);\n\n    // Return false if any of the two events was prevented (its result was false).\n    return normalEventResult && noConflictEventResult;\n  }\n\n  /**\n   * Returns the actual children, associated with a slot.\n   * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n   * @public\n   */\n  getSlottedNodes(slotName) {\n    return getSlottedElementsList(this[slotName]);\n  }\n\n  /**\n   * Determines whether the component should be rendered in RTL mode or not.\n   * Returns: \"rtl\", \"ltr\" or undefined\n   *\n   * @public\n   * @returns {String|undefined}\n   */\n  get effectiveDir() {\n    markAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n    return getEffectiveDir(this);\n  }\n\n  /**\n   * Used to duck-type UI5 elements without using instanceof\n   * @returns {boolean}\n   * @public\n   */\n  get isUI5Element() {\n    return true;\n  }\n\n  /**\n   * Do not override this method in derivatives of UI5Element, use metadata properties instead\n   * @private\n   */\n  static get observedAttributes() {\n    return this.getMetadata().getAttributesList();\n  }\n\n  /**\n   * @private\n   */\n  static _needsShadowDOM() {\n    return !!this.template;\n  }\n\n  /**\n   * @private\n   */\n  static _needsStaticArea() {\n    return !!this.staticAreaTemplate;\n  }\n\n  /**\n   * @public\n   */\n  getStaticAreaItemDomRef() {\n    if (!this.constructor._needsStaticArea()) {\n      throw new Error(\"This component does not use the static area\");\n    }\n    if (!this.staticAreaItem) {\n      this.staticAreaItem = StaticAreaItem.createInstance();\n      this.staticAreaItem.setOwnerElement(this);\n    }\n    if (!this.staticAreaItem.parentElement) {\n      getSingletonElementInstance(\"ui5-static-area\").appendChild(this.staticAreaItem);\n    }\n    return this.staticAreaItem.getDomRef();\n  }\n\n  /**\n   * @private\n   */\n  static _generateAccessors() {\n    const proto = this.prototype;\n    const slotsAreManaged = this.getMetadata().slotsAreManaged();\n\n    // Properties\n    const properties = this.getMetadata().getProperties();\n    for (const [prop, propData] of Object.entries(properties)) {\n      // eslint-disable-line\n      if (!isValidPropertyName(prop)) {\n        console.warn(`\"${prop}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n      }\n\n      if (propData.type === Boolean && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All booleans are false by default.`);\n      }\n      if (propData.type === Array) {\n        throw new Error(`Wrong type for property \"${prop}\". Properties cannot be of type Array - use \"multiple: true\" and set \"type\" to the single value type, such as \"String\", \"Object\", etc...`);\n      }\n      if (propData.type === Object && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All properties of type \"Object\" are empty objects by default.`);\n      }\n      if (propData.multiple && propData.defaultValue) {\n        throw new Error(`Cannot set a default value for property \"${prop}\". All multiple properties are empty arrays by default.`);\n      }\n      Object.defineProperty(proto, prop, {\n        get() {\n          if (this._state[prop] !== undefined) {\n            return this._state[prop];\n          }\n          const propDefaultValue = propData.defaultValue;\n          if (propData.type === Boolean) {\n            return false;\n          } else if (propData.type === String) {\n            // eslint-disable-line\n            return propDefaultValue;\n          } else if (propData.multiple) {\n            // eslint-disable-line\n            return [];\n          } else {\n            return propDefaultValue;\n          }\n        },\n        set(value) {\n          let isDifferent;\n          value = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n          const oldState = this._state[prop];\n          if (propData.multiple && propData.compareValues) {\n            isDifferent = !arraysAreEqual(oldState, value);\n          } else if (isDescendantOf(propData.type, DataType)) {\n            isDifferent = !propData.type.valuesAreEqual(oldState, value);\n          } else {\n            isDifferent = oldState !== value;\n          }\n          if (isDifferent) {\n            this._state[prop] = value;\n            _invalidate.call(this, {\n              type: \"property\",\n              name: prop,\n              newValue: value,\n              oldValue: oldState\n            });\n            this._updateAttribute(prop, value);\n          }\n        }\n      });\n    }\n\n    // Slots\n    if (slotsAreManaged) {\n      const slots = this.getMetadata().getSlots();\n      for (const [slotName, slotData] of Object.entries(slots)) {\n        // eslint-disable-line\n        if (!isValidPropertyName(slotName)) {\n          console.warn(`\"${slotName}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n        }\n\n        const propertyName = slotData.propertyName || slotName;\n        Object.defineProperty(proto, propertyName, {\n          get() {\n            if (this._state[propertyName] !== undefined) {\n              return this._state[propertyName];\n            }\n            return [];\n          },\n          set() {\n            throw new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns the metadata object for this UI5 Web Component Class\n   * @protected\n   */\n  static get metadata() {\n    return metadata;\n  }\n\n  /**\n   * Sets a new metadata object for this UI5 Web Component Class\n   * @protected\n   */\n  static set metadata(newMetadata) {\n    metadata = newMetadata;\n  }\n\n  /**\n   * Returns the CSS for this UI5 Web Component Class\n   * @protected\n   */\n  static get styles() {\n    return \"\";\n  }\n\n  /**\n   * Returns the Static Area CSS for this UI5 Web Component Class\n   * @protected\n   */\n  static get staticAreaStyles() {\n    return \"\";\n  }\n\n  /**\n   * Returns an array with the dependencies for this UI5 Web Component, which could be:\n   *  - composed components (used in its shadow root or static area item)\n   *  - slotted components that the component may need to communicate with\n   *\n   * @protected\n   */\n  static get dependencies() {\n    return [];\n  }\n\n  /**\n   * Returns a list of the unique dependencies for this UI5 Web Component\n   *\n   * @public\n   */\n  static getUniqueDependencies() {\n    if (!uniqueDependenciesCache.has(this)) {\n      const filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);\n      uniqueDependenciesCache.set(this, filtered);\n    }\n    return uniqueDependenciesCache.get(this);\n  }\n\n  /**\n   * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n   *\n   * @returns {Promise<any[]>}\n   */\n  static whenDependenciesDefined() {\n    return Promise.all(this.getUniqueDependencies().map(dep => dep.define()));\n  }\n\n  /**\n   * Hook that will be called upon custom element definition\n   *\n   * @protected\n   * @returns {Promise<void>}\n   */\n  static async onDefine() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Registers a UI5 Web Component in the browser window object\n   * @public\n   * @returns {Promise<UI5Element>}\n   */\n  static async define() {\n    await boot();\n    await Promise.all([this.whenDependenciesDefined(), this.onDefine()]);\n    const tag = this.getMetadata().getTag();\n    const altTag = this.getMetadata().getAltTag();\n    const definedLocally = isTagRegistered(tag);\n    const definedGlobally = customElements.get(tag);\n    if (definedGlobally && !definedLocally) {\n      recordTagRegistrationFailure(tag);\n    } else if (!definedGlobally) {\n      this._generateAccessors();\n      registerTag(tag);\n      window.customElements.define(tag, this);\n      preloadLinks(this);\n      if (altTag && !customElements.get(altTag)) {\n        registerTag(altTag);\n        window.customElements.define(altTag, getClassCopy(this, () => {\n          console.log(`The ${altTag} tag is deprecated and will be removed in the next release, please use ${tag} instead.`); // eslint-disable-line\n        }));\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n   * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n   * @public\n   * @returns {UI5ElementMetadata}\n   */\n  static getMetadata() {\n    if (this.hasOwnProperty(\"_metadata\")) {\n      // eslint-disable-line\n      return this._metadata;\n    }\n    const metadataObjects = [this.metadata];\n    let klass = this; // eslint-disable-line\n    while (klass !== UI5Element) {\n      klass = Object.getPrototypeOf(klass);\n      metadataObjects.unshift(klass.metadata);\n    }\n    const mergedMetadata = merge({}, ...metadataObjects);\n    this._metadata = new UI5ElementMetadata(mergedMetadata);\n    return this._metadata;\n  }\n}\nexport default UI5Element;","map":{"version":3,"names":["merge","boot","UI5ElementMetadata","EventProvider","getSingletonElementInstance","StaticAreaItem","updateShadowRoot","renderDeferred","renderImmediately","cancelRender","registerTag","isTagRegistered","recordTagRegistrationFailure","observeDOMNode","unobserveDOMNode","skipOriginalEvent","getEffectiveDir","DataType","kebabToCamelCase","camelToKebabCase","isValidPropertyName","isDescendantOf","isSlot","getSlotName","getSlottedElementsList","arraysAreEqual","getClassCopy","markAsRtlAware","preloadLinks","autoId","elementTimeouts","Map","uniqueDependenciesCache","_invalidate","changeInfo","_suppressInvalidation","onInvalidation","_changedState","push","_eventProvider","fireEvent","target","metadata","UI5Element","HTMLElement","constructor","_inDOM","_fullyConnected","_childChangeListeners","_slotChangeListeners","deferredResolve","_domRefReadyPromise","Promise","resolve","_deferredResolve","_doNotSyncAttributes","Set","_initializeState","_upgradeAllProperties","_needsShadowDOM","attachShadow","mode","_id","__id","connectedCallback","setAttribute","getMetadata","getPureTag","supportsF6FastNavigation","slotsAreManaged","_startObservingDOMChildren","_processChildren","onEnterDOM","disconnectedCallback","_stopObservingDOMChildren","onExitDOM","staticAreaItem","parentElement","removeChild","shouldObserveChildren","hasSlots","canSlotText","mutationObserverOptions","childList","subtree","characterData","bind","_updateSlots","slotsMap","getSlots","domChildren","Array","from","childNodes","children","slotsCachedContentMap","propertyNameToSlotMap","slotName","slotData","Object","entries","propertyName","set","_state","_clearSlot","autoIncrementMap","slottedChildrenMap","allChildrenUpgraded","map","child","idx","undefined","validValues","keys","join","console","warn","individualSlots","nextIndex","get","_individualSlot","localName","isCustomElement","includes","isDefined","window","customElements","whenDefinedPromise","whenDefined","timeoutPromise","setTimeout","race","upgrade","validateSlotValue","isUI5Element","invalidateOnChildChange","method","attachInvalidate","_attachChange","_getChildChangeListener","_attachSlotChange","has","all","forEach","sort","a","b","_","invalidated","call","type","name","reason","detachInvalidate","_detachChange","_detachSlotChange","callback","attachEvent","detachEvent","_onChildChange","childChangeInfo","shouldInvalidateOnChildChange","attributeChangedCallback","oldValue","newValue","properties","getProperties","realName","replace","nameInCamelCase","hasOwnProperty","propertyTypeClass","Boolean","attributeToProperty","_updateAttribute","hasAttribute","attrName","attrValue","getAttribute","removeAttribute","newAttrValue","propertyToAttribute","add","delete","_upgradeProperty","prop","value","allProps","getPropertiesList","getInitialState","_getSlotChangeListener","_onSlotChange","addEventListener","removeEventListener","_render","hasIndividualSlots","onBeforeRendering","_onComponentStateFinalized","update","_assignIndividualSlotsToChildren","onAfterRendering","_waitForDomRef","getDomRef","_getRealDomRef","shadowRoot","length","filter","getTag","getFocusDomRef","domRef","focusRef","querySelector","getFocusDomRefAsync","focus","focusDomRef","data","cancelable","bubbles","eventResult","_fireEvent","camelCaseEventName","noConflictEvent","CustomEvent","detail","composed","noConflictEventResult","dispatchEvent","normalEvent","normalEventResult","getSlottedNodes","effectiveDir","observedAttributes","getAttributesList","template","_needsStaticArea","staticAreaTemplate","getStaticAreaItemDomRef","Error","createInstance","setOwnerElement","appendChild","_generateAccessors","proto","prototype","propData","defaultValue","multiple","defineProperty","propDefaultValue","String","isDifferent","validatePropertyValue","oldState","compareValues","valuesAreEqual","slots","newMetadata","styles","staticAreaStyles","dependencies","getUniqueDependencies","filtered","dep","index","deps","indexOf","whenDependenciesDefined","define","onDefine","tag","altTag","getAltTag","definedLocally","definedGlobally","log","_metadata","metadataObjects","klass","getPrototypeOf","unshift","mergedMetadata"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/UI5Element.js"],"sourcesContent":["import merge from \"./thirdparty/merge.js\";\nimport { boot } from \"./Boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport getSingletonElementInstance from \"./util/getSingletonElementInstance.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport updateShadowRoot from \"./updateShadowRoot.js\";\nimport { renderDeferred, renderImmediately, cancelRender } from \"./Render.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport { observeDOMNode, unobserveDOMNode } from \"./DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport getEffectiveDir from \"./locale/getEffectiveDir.js\";\nimport DataType from \"./types/DataType.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { isSlot, getSlotName, getSlottedElementsList } from \"./util/SlotsHelper.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport getClassCopy from \"./util/getClassCopy.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\nimport preloadLinks from \"./theming/preloadLinks.js\";\n\nlet autoId = 0;\n\nconst elementTimeouts = new Map();\nconst uniqueDependenciesCache = new Map();\n\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\nfunction _invalidate(changeInfo) {\n\t// Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n\t// This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n\tif (this._suppressInvalidation) {\n\t\treturn;\n\t}\n\n\t// Call the onInvalidation hook\n\tthis.onInvalidation(changeInfo);\n\n\tthis._changedState.push(changeInfo);\n\trenderDeferred(this);\n\tthis._eventProvider.fireEvent(\"invalidate\", { ...changeInfo, target: this });\n}\n\nlet metadata = {};\n\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\nclass UI5Element extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n\t\tthis._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n\t\tthis._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n\t\tthis._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n\t\tthis._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n\t\tthis._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n\t\tthis._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n\t\tlet deferredResolve;\n\t\tthis._domRefReadyPromise = new Promise(resolve => {\n\t\t\tdeferredResolve = resolve;\n\t\t});\n\t\tthis._domRefReadyPromise._deferredResolve = deferredResolve;\n\t\tthis._doNotSyncAttributes = new Set(); // attributes that are excluded from attributeChangedCallback synchronization\n\n\t\tthis._initializeState();\n\t\tthis._upgradeAllProperties();\n\n\t\tif (this.constructor._needsShadowDOM()) {\n\t\t\tthis.attachShadow({ mode: \"open\" });\n\t\t}\n\t}\n\n\t/**\n\t * Returns a unique ID for this UI5 Element\n\t *\n\t * @deprecated - This property is not guaranteed in future releases\n\t * @protected\n\t */\n\tget _id() {\n\t\tif (!this.__id) {\n\t\t\tthis.__id = `ui5wc_${++autoId}`;\n\t\t}\n\n\t\treturn this.__id;\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n\t * @private\n\t */\n\tasync connectedCallback() {\n\t\tthis.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n\t\tif (this.constructor.getMetadata().supportsF6FastNavigation()) {\n\t\t\tthis.setAttribute(\"data-sap-ui-fastnavgroup\", \"true\");\n\t\t}\n\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = true;\n\n\t\tif (slotsAreManaged) {\n\t\t\t// always register the observer before yielding control to the main thread (await)\n\t\t\tthis._startObservingDOMChildren();\n\t\t\tawait this._processChildren();\n\t\t}\n\n\t\tif (!this._inDOM) { // Component removed from DOM while _processChildren was running\n\t\t\treturn;\n\t\t}\n\n\t\trenderImmediately(this);\n\t\tthis._domRefReadyPromise._deferredResolve();\n\t\tthis._fullyConnected = true;\n\t\tif (typeof this.onEnterDOM === \"function\") {\n\t\t\tthis.onEnterDOM();\n\t\t}\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n\t * @private\n\t */\n\tdisconnectedCallback() {\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = false;\n\n\t\tif (slotsAreManaged) {\n\t\t\tthis._stopObservingDOMChildren();\n\t\t}\n\n\t\tif (this._fullyConnected) {\n\t\t\tif (typeof this.onExitDOM === \"function\") {\n\t\t\t\tthis.onExitDOM();\n\t\t\t}\n\t\t\tthis._fullyConnected = false;\n\t\t}\n\n\t\tif (this.staticAreaItem && this.staticAreaItem.parentElement) {\n\t\t\tthis.staticAreaItem.parentElement.removeChild(this.staticAreaItem);\n\t\t}\n\n\t\tcancelRender(this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_startObservingDOMChildren() {\n\t\tconst shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n\t\tif (!shouldObserveChildren) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst mutationObserverOptions = {\n\t\t\tchildList: true,\n\t\t\tsubtree: canSlotText,\n\t\t\tcharacterData: canSlotText,\n\t\t};\n\t\tobserveDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_stopObservingDOMChildren() {\n\t\tunobserveDOMNode(this);\n\t}\n\n\t/**\n\t * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n\t * @private\n\t */\n\tasync _processChildren() {\n\t\tconst hasSlots = this.constructor.getMetadata().hasSlots();\n\t\tif (hasSlots) {\n\t\t\tawait this._updateSlots();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tasync _updateSlots() {\n\t\tconst slotsMap = this.constructor.getMetadata().getSlots();\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n\n\t\tconst slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n\t\tconst propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n\n\t\t// Init the _state object based on the supported slots and store the previous values\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tpropertyNameToSlotMap.set(propertyName, slotName);\n\t\t\tslotsCachedContentMap.set(propertyName, [...this._state[propertyName]]);\n\t\t\tthis._clearSlot(slotName, slotData);\n\t\t}\n\n\t\tconst autoIncrementMap = new Map();\n\t\tconst slottedChildrenMap = new Map();\n\n\t\tconst allChildrenUpgraded = domChildren.map(async (child, idx) => {\n\t\t\t// Determine the type of the child (mainly by the slot attribute)\n\t\t\tconst slotName = getSlotName(child);\n\t\t\tconst slotData = slotsMap[slotName];\n\n\t\t\t// Check if the slotName is supported\n\t\t\tif (slotData === undefined) {\n\t\t\t\tconst validValues = Object.keys(slotsMap).join(\", \");\n\t\t\t\tconsole.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For children that need individual slots, calculate them\n\t\t\tif (slotData.individualSlots) {\n\t\t\t\tconst nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n\t\t\t\tautoIncrementMap.set(slotName, nextIndex);\n\t\t\t\tchild._individualSlot = `${slotName}-${nextIndex}`;\n\t\t\t}\n\n\t\t\t// Await for not-yet-defined custom elements\n\t\t\tif (child instanceof HTMLElement) {\n\t\t\t\tconst localName = child.localName;\n\t\t\t\tconst isCustomElement = localName.includes(\"-\");\n\t\t\t\tif (isCustomElement) {\n\t\t\t\t\tconst isDefined = window.customElements.get(localName);\n\t\t\t\t\tif (!isDefined) {\n\t\t\t\t\t\tconst whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n\t\t\t\t\t\tlet timeoutPromise = elementTimeouts.get(localName);\n\t\t\t\t\t\tif (!timeoutPromise) {\n\t\t\t\t\t\t\ttimeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t\t\telementTimeouts.set(localName, timeoutPromise);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.race([whenDefinedPromise, timeoutPromise]);\n\t\t\t\t\t}\n\t\t\t\t\twindow.customElements.upgrade(child);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchild = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);\n\n\t\t\t// Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n\t\t\tif (child.isUI5Element && slotData.invalidateOnChildChange) {\n\t\t\t\tconst method = (child.attachInvalidate || child._attachChange).bind(child);\n\t\t\t\tmethod(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\t// Listen for the slotchange event if the child is a slot itself\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._attachSlotChange(child, slotName);\n\t\t\t}\n\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\n\t\t\tif (slottedChildrenMap.has(propertyName)) {\n\t\t\t\tslottedChildrenMap.get(propertyName).push({ child, idx });\n\t\t\t} else {\n\t\t\t\tslottedChildrenMap.set(propertyName, [{ child, idx }]);\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(allChildrenUpgraded);\n\n\t\t// Distribute the child in the _state object, keeping the Light DOM order,\n\t\t// not the order elements are defined.\n\t\tslottedChildrenMap.forEach((children, propertyName) => {\n\t\t\tthis._state[propertyName] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);\n\t\t});\n\n\t\t// Compare the content of each slot with the cached values and invalidate for the ones that changed\n\t\tlet invalidated = false;\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tif (!arraysAreEqual(slotsCachedContentMap.get(propertyName), this._state[propertyName])) {\n\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\ttype: \"slot\",\n\t\t\t\t\tname: propertyNameToSlotMap.get(propertyName),\n\t\t\t\t\treason: \"children\",\n\t\t\t\t});\n\t\t\t\tinvalidated = true;\n\t\t\t}\n\t\t}\n\n\t\t// If none of the slots had an invalidation due to changes to immediate children,\n\t\t// the change is considered to be text content of the default slot\n\t\tif (!invalidated) {\n\t\t\t_invalidate.call(this, {\n\t\t\t\ttype: \"slot\",\n\t\t\t\tname: \"default\",\n\t\t\t\treason: \"textcontent\",\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes all children from the slot and detaches listeners, if any\n\t * @private\n\t */\n\t_clearSlot(slotName, slotData) {\n\t\tconst propertyName = slotData.propertyName || slotName;\n\t\tconst children = this._state[propertyName];\n\n\t\tchildren.forEach(child => {\n\t\t\tif (child && child.isUI5Element) {\n\t\t\t\tconst method = (child.detachInvalidate || child._detachChange).bind(child);\n\t\t\t\tmethod(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._detachSlotChange(child, slotName);\n\t\t\t}\n\t\t});\n\n\t\tthis._state[propertyName] = [];\n\t}\n\n\t/**\n\t * Attach a callback that will be executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @public\n\t */\n\tattachInvalidate(callback) {\n\t\tthis._eventProvider.attachEvent(\"invalidate\", callback);\n\t}\n\n\t/**\n\t * Detach the callback that is executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @public\n\t */\n\tdetachInvalidate(callback) {\n\t\tthis._eventProvider.detachEvent(\"invalidate\", callback);\n\t}\n\n\t/**\n\t * Callback that is executed whenever a monitored child changes its state\n\t *\n\t * @param slotName the slot in which a child was invalidated\n\t * @param childChangeInfo the changeInfo object for the child in the given slot\n\t * @private\n\t */\n\t_onChildChange(slotName, childChangeInfo) {\n\t\tif (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The component should be invalidated as this type of change on the child is listened for\n\t\t// However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"childchange\",\n\t\t\tchild: childChangeInfo.target,\n\t\t});\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element\n\t * @private\n\t */\n\tattributeChangedCallback(name, oldValue, newValue) {\n\t\tif (this._doNotSyncAttributes.has(name)) { // This attribute is mutated internally, not by the user\n\t\t\treturn;\n\t\t}\n\n\t\tconst properties = this.constructor.getMetadata().getProperties();\n\t\tconst realName = name.replace(/^ui5-/, \"\");\n\t\tconst nameInCamelCase = kebabToCamelCase(realName);\n\t\tif (properties.hasOwnProperty(nameInCamelCase)) { // eslint-disable-line\n\t\t\tconst propertyTypeClass = properties[nameInCamelCase].type;\n\t\t\tif (propertyTypeClass === Boolean) {\n\t\t\t\tnewValue = newValue !== null;\n\t\t\t} else if (isDescendantOf(propertyTypeClass, DataType)) {\n\t\t\t\tnewValue = propertyTypeClass.attributeToProperty(newValue);\n\t\t\t}\n\t\t\tthis[nameInCamelCase] = newValue;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_updateAttribute(name, newValue) {\n\t\tif (!this.constructor.getMetadata().hasAttribute(name)) {\n\t\t\treturn;\n\t\t}\n\t\tconst properties = this.constructor.getMetadata().getProperties();\n\t\tconst propertyTypeClass = properties[name].type;\n\t\tconst attrName = camelToKebabCase(name);\n\t\tconst attrValue = this.getAttribute(attrName);\n\n\t\tif (propertyTypeClass === Boolean) {\n\t\t\tif (newValue === true && attrValue === null) {\n\t\t\t\tthis.setAttribute(attrName, \"\");\n\t\t\t} else if (newValue === false && attrValue !== null) {\n\t\t\t\tthis.removeAttribute(attrName);\n\t\t\t}\n\t\t} else if (isDescendantOf(propertyTypeClass, DataType)) {\n\t\t\tconst newAttrValue = propertyTypeClass.propertyToAttribute(newValue);\n\t\t\tif (newAttrValue === null) { // null means there must be no attribute for the current value of the property\n\t\t\t\tthis._doNotSyncAttributes.add(attrName); // skip the attributeChangedCallback call for this attribute\n\t\t\t\tthis.removeAttribute(attrName); // remove the attribute safely (will not trigger synchronization to the property value due to the above line)\n\t\t\t\tthis._doNotSyncAttributes.delete(attrName); // enable synchronization again for this attribute\n\t\t\t} else {\n\t\t\t\tthis.setAttribute(attrName, newAttrValue);\n\t\t\t}\n\t\t} else if (typeof newValue !== \"object\") {\n\t\t\tif (attrValue !== newValue) {\n\t\t\t\tthis.setAttribute(attrName, newValue);\n\t\t\t}\n\t\t} // else { return; } // old object handling\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeProperty(prop) {\n\t\tif (this.hasOwnProperty(prop)) { // eslint-disable-line\n\t\t\tconst value = this[prop];\n\t\t\tdelete this[prop];\n\t\t\tthis[prop] = value;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeAllProperties() {\n\t\tconst allProps = this.constructor.getMetadata().getPropertiesList();\n\t\tallProps.forEach(this._upgradeProperty, this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_initializeState() {\n\t\tthis._state = { ...this.constructor.getMetadata().getInitialState() };\n\t}\n\n\t/**\n\t * Returns a singleton event listener for the \"change\" event of a child in a given slot\n\t *\n\t * @param slotName the name of the slot, where the child is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getChildChangeListener(slotName) {\n\t\tif (!this._childChangeListeners.has(slotName)) {\n\t\t\tthis._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n\t\t}\n\t\treturn this._childChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getSlotChangeListener(slotName) {\n\t\tif (!this._slotChangeListeners.has(slotName)) {\n\t\t\tthis._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n\t\t}\n\t\treturn this._slotChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_attachSlotChange(child, slotName) {\n\t\tchild.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_detachSlotChange(child, slotName) {\n\t\tchild.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @private\n\t */\n\t_onSlotChange(slotName) {\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"slotchange\",\n\t\t});\n\t}\n\n\t/**\n\t * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n\t *\n\t * @param  changeInfo An object with information about the change that caused invalidation.\n\t * The object can have the following properties:\n\t *  - type: (property|slot) tells what caused the invalidation\n\t *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n\t *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n\t *\n\t *  - name: the name of the property or slot that caused the invalidation\n\t *\n\t *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n\t *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n\t *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n\t *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n\t *      Can only trigger if the child of a slot is a slot element itself.\n\t *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n\t *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n\t *\n\t *  - newValue: the new value of the property (for type=\"property\" only)\n\t *\n\t *  - oldValue: the old value of the property (for type=\"property\" only)\n\t *\n\t *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n\t *\n\t * @public\n\t */\n\tonInvalidation(changeInfo) {}\n\n\t/**\n\t * Do not call this method directly, only intended to be called by js\n\t * @protected\n\t */\n\t_render() {\n\t\tconst hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();\n\n\t\t// suppress invalidation to prevent state changes scheduling another rendering\n\t\tthis._suppressInvalidation = true;\n\n\t\tif (typeof this.onBeforeRendering === \"function\") {\n\t\t\tthis.onBeforeRendering();\n\t\t}\n\n\t\t// Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n\t\tif (this._onComponentStateFinalized) {\n\t\t\tthis._onComponentStateFinalized();\n\t\t}\n\n\t\t// resume normal invalidation handling\n\t\tthis._suppressInvalidation = false;\n\n\t\t// Update the shadow root with the render result\n\t\t/*\n\t\tif (this._changedState.length) {\n\t\t\tlet element = this.localName;\n\t\t\tif (this.id) {\n\t\t\t\telement = `${element}#${this.id}`;\n\t\t\t}\n\t\t\tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n\t\t\t\tlet res = `${x.type}`;\n\t\t\t\tif (x.reason) {\n\t\t\t\t\tres = `${res}(${x.reason})`;\n\t\t\t\t}\n\t\t\t\tres = `${res}: ${x.name}`;\n\t\t\t\tif (x.type === \"property\") {\n\t\t\t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}));\n\t\t}\n\t\t*/\n\t\tthis._changedState = [];\n\n\t\t// Update shadow root and static area item\n\t\tif (this.constructor._needsShadowDOM()) {\n\t\t\tupdateShadowRoot(this);\n\t\t}\n\t\tif (this.staticAreaItem) {\n\t\t\tthis.staticAreaItem.update();\n\t\t}\n\n\t\t// Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n\t\tif (hasIndividualSlots) {\n\t\t\tthis._assignIndividualSlotsToChildren();\n\t\t}\n\n\t\t// Call the onAfterRendering hook\n\t\tif (typeof this.onAfterRendering === \"function\") {\n\t\t\tthis.onAfterRendering();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_assignIndividualSlotsToChildren() {\n\t\tconst domChildren = Array.from(this.children);\n\n\t\tdomChildren.forEach(child => {\n\t\t\tif (child._individualSlot) {\n\t\t\t\tchild.setAttribute(\"slot\", child._individualSlot);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_waitForDomRef() {\n\t\treturn this._domRefReadyPromise;\n\t}\n\n\t/**\n\t * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n\t * *Note:* For logical (abstract) elements (items, options, etc...), returns the part of the parent's DOM that represents this option\n\t * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n\t *\n\t * @public\n\t */\n\tgetDomRef() {\n\t\t// If a component set _getRealDomRef to its children, use the return value of this function\n\t\tif (typeof this._getRealDomRef === \"function\") {\n\t\t\treturn this._getRealDomRef();\n\t\t}\n\n\t\tif (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [...this.shadowRoot.children].filter(child => ![\"link\", \"style\"].includes(child.localName));\n\t\tif (children.length !== 1) {\n\t\t\tconsole.warn(`The shadow DOM for ${this.constructor.getMetadata().getTag()} does not have a top level element, the getDomRef() method might not work as expected`); // eslint-disable-line\n\t\t}\n\n\t\treturn children[0];\n\t}\n\n\t/**\n\t * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tgetFocusDomRef() {\n\t\tconst domRef = this.getDomRef();\n\t\tif (domRef) {\n\t\t\tconst focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n\t\t\treturn focusRef || domRef;\n\t\t}\n\t}\n\n\t/**\n\t * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tasync getFocusDomRefAsync() {\n\t\tawait this._waitForDomRef();\n\t\treturn this.getFocusDomRef();\n\t}\n\n\t/**\n\t * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n\t * @public\n\t */\n\tasync focus() {\n\t\tawait this._waitForDomRef();\n\n\t\tconst focusDomRef = this.getFocusDomRef();\n\n\t\tif (focusDomRef && typeof focusDomRef.focus === \"function\") {\n\t\t\tfocusDomRef.focus();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @public\n\t * @param name - name of the event\n\t * @param data - additional data for the event\n\t * @param cancelable - true, if the user can call preventDefault on the event object\n\t * @param bubbles - true, if the event bubbles\n\t * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n\t */\n\tfireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tconst eventResult = this._fireEvent(name, data, cancelable, bubbles);\n\t\tconst camelCaseEventName = kebabToCamelCase(name);\n\n\t\tif (camelCaseEventName !== name) {\n\t\t\treturn eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n\t\t}\n\n\t\treturn eventResult;\n\t}\n\n\t_fireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tconst noConflictEvent = new CustomEvent(`ui5-${name}`, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the no-conflict event is prevented\n\t\tconst noConflictEventResult = this.dispatchEvent(noConflictEvent);\n\n\t\tif (skipOriginalEvent(name)) {\n\t\t\treturn noConflictEventResult;\n\t\t}\n\n\t\tconst normalEvent = new CustomEvent(name, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the normal event is prevented\n\t\tconst normalEventResult = this.dispatchEvent(normalEvent);\n\n\t\t// Return false if any of the two events was prevented (its result was false).\n\t\treturn normalEventResult && noConflictEventResult;\n\t}\n\n\t/**\n\t * Returns the actual children, associated with a slot.\n\t * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n\t * @public\n\t */\n\tgetSlottedNodes(slotName) {\n\t\treturn getSlottedElementsList(this[slotName]);\n\t}\n\n\t/**\n\t * Determines whether the component should be rendered in RTL mode or not.\n\t * Returns: \"rtl\", \"ltr\" or undefined\n\t *\n\t * @public\n\t * @returns {String|undefined}\n\t */\n\tget effectiveDir() {\n\t\tmarkAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n\t\treturn getEffectiveDir(this);\n\t}\n\n\t/**\n\t * Used to duck-type UI5 elements without using instanceof\n\t * @returns {boolean}\n\t * @public\n\t */\n\tget isUI5Element() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element, use metadata properties instead\n\t * @private\n\t */\n\tstatic get observedAttributes() {\n\t\treturn this.getMetadata().getAttributesList();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsShadowDOM() {\n\t\treturn !!this.template;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsStaticArea() {\n\t\treturn !!this.staticAreaTemplate;\n\t}\n\n\t/**\n\t * @public\n\t */\n\tgetStaticAreaItemDomRef() {\n\t\tif (!this.constructor._needsStaticArea()) {\n\t\t\tthrow new Error(\"This component does not use the static area\");\n\t\t}\n\n\t\tif (!this.staticAreaItem) {\n\t\t\tthis.staticAreaItem = StaticAreaItem.createInstance();\n\t\t\tthis.staticAreaItem.setOwnerElement(this);\n\t\t}\n\t\tif (!this.staticAreaItem.parentElement) {\n\t\t\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(this.staticAreaItem);\n\t\t}\n\n\t\treturn this.staticAreaItem.getDomRef();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _generateAccessors() {\n\t\tconst proto = this.prototype;\n\t\tconst slotsAreManaged = this.getMetadata().slotsAreManaged();\n\n\t\t// Properties\n\t\tconst properties = this.getMetadata().getProperties();\n\t\tfor (const [prop, propData] of Object.entries(properties)) { // eslint-disable-line\n\t\t\tif (!isValidPropertyName(prop)) {\n\t\t\t\tconsole.warn(`\"${prop}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t}\n\n\t\t\tif (propData.type === Boolean && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All booleans are false by default.`);\n\t\t\t}\n\n\t\t\tif (propData.type === Array) {\n\t\t\t\tthrow new Error(`Wrong type for property \"${prop}\". Properties cannot be of type Array - use \"multiple: true\" and set \"type\" to the single value type, such as \"String\", \"Object\", etc...`);\n\t\t\t}\n\n\t\t\tif (propData.type === Object && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All properties of type \"Object\" are empty objects by default.`);\n\t\t\t}\n\n\t\t\tif (propData.multiple && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All multiple properties are empty arrays by default.`);\n\t\t\t}\n\n\t\t\tObject.defineProperty(proto, prop, {\n\t\t\t\tget() {\n\t\t\t\t\tif (this._state[prop] !== undefined) {\n\t\t\t\t\t\treturn this._state[prop];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst propDefaultValue = propData.defaultValue;\n\n\t\t\t\t\tif (propData.type === Boolean) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (propData.type === String) {  // eslint-disable-line\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t} else if (propData.multiple) { // eslint-disable-line\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t\tlet isDifferent;\n\t\t\t\t\tvalue = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n\n\t\t\t\t\tconst oldState = this._state[prop];\n\t\t\t\t\tif (propData.multiple && propData.compareValues) {\n\t\t\t\t\t\tisDifferent = !arraysAreEqual(oldState, value);\n\t\t\t\t\t} else if (isDescendantOf(propData.type, DataType)) {\n\t\t\t\t\t\tisDifferent = !propData.type.valuesAreEqual(oldState, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisDifferent = oldState !== value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isDifferent) {\n\t\t\t\t\t\tthis._state[prop] = value;\n\t\t\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\t\t\ttype: \"property\",\n\t\t\t\t\t\t\tname: prop,\n\t\t\t\t\t\t\tnewValue: value,\n\t\t\t\t\t\t\toldValue: oldState,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis._updateAttribute(prop, value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getMetadata().getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tif (!isValidPropertyName(slotName)) {\n\t\t\t\t\tconsole.warn(`\"${slotName}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t\t}\n\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tObject.defineProperty(proto, propertyName, {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tif (this._state[propertyName] !== undefined) {\n\t\t\t\t\t\t\treturn this._state[propertyName];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t},\n\t\t\t\t\tset() {\n\t\t\t\t\t\tthrow new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the metadata object for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\t/**\n\t * Sets a new metadata object for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic set metadata(newMetadata) {\n\t\tmetadata = newMetadata;\n\t}\n\n\t/**\n\t * Returns the CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get styles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns the Static Area CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get staticAreaStyles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns an array with the dependencies for this UI5 Web Component, which could be:\n\t *  - composed components (used in its shadow root or static area item)\n\t *  - slotted components that the component may need to communicate with\n\t *\n\t * @protected\n\t */\n\tstatic get dependencies() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a list of the unique dependencies for this UI5 Web Component\n\t *\n\t * @public\n\t */\n\tstatic getUniqueDependencies() {\n\t\tif (!uniqueDependenciesCache.has(this)) {\n\t\t\tconst filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);\n\t\t\tuniqueDependenciesCache.set(this, filtered);\n\t\t}\n\n\t\treturn uniqueDependenciesCache.get(this);\n\t}\n\n\t/**\n\t * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n\t *\n\t * @returns {Promise<any[]>}\n\t */\n\tstatic whenDependenciesDefined() {\n\t\treturn Promise.all(this.getUniqueDependencies().map(dep => dep.define()));\n\t}\n\n\t/**\n\t * Hook that will be called upon custom element definition\n\t *\n\t * @protected\n\t * @returns {Promise<void>}\n\t */\n\tstatic async onDefine() {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Registers a UI5 Web Component in the browser window object\n\t * @public\n\t * @returns {Promise<UI5Element>}\n\t */\n\tstatic async define() {\n\t\tawait boot();\n\n\t\tawait Promise.all([\n\t\t\tthis.whenDependenciesDefined(),\n\t\t\tthis.onDefine(),\n\t\t]);\n\n\t\tconst tag = this.getMetadata().getTag();\n\t\tconst altTag = this.getMetadata().getAltTag();\n\n\t\tconst definedLocally = isTagRegistered(tag);\n\t\tconst definedGlobally = customElements.get(tag);\n\n\t\tif (definedGlobally && !definedLocally) {\n\t\t\trecordTagRegistrationFailure(tag);\n\t\t} else if (!definedGlobally) {\n\t\t\tthis._generateAccessors();\n\t\t\tregisterTag(tag);\n\t\t\twindow.customElements.define(tag, this);\n\t\t\tpreloadLinks(this);\n\n\t\t\tif (altTag && !customElements.get(altTag)) {\n\t\t\t\tregisterTag(altTag);\n\t\t\t\twindow.customElements.define(altTag, getClassCopy(this, () => {\n\t\t\t\t\tconsole.log(`The ${altTag} tag is deprecated and will be removed in the next release, please use ${tag} instead.`); // eslint-disable-line\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n\t * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n\t * @public\n\t * @returns {UI5ElementMetadata}\n\t */\n\tstatic getMetadata() {\n\t\tif (this.hasOwnProperty(\"_metadata\")) { // eslint-disable-line\n\t\t\treturn this._metadata;\n\t\t}\n\n\t\tconst metadataObjects = [this.metadata];\n\t\tlet klass = this; // eslint-disable-line\n\t\twhile (klass !== UI5Element) {\n\t\t\tklass = Object.getPrototypeOf(klass);\n\t\t\tmetadataObjects.unshift(klass.metadata);\n\t\t}\n\t\tconst mergedMetadata = merge({}, ...metadataObjects);\n\n\t\tthis._metadata = new UI5ElementMetadata(mergedMetadata);\n\t\treturn this._metadata;\n\t}\n}\n\nexport default UI5Element;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}