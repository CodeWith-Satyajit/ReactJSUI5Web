{"ast":null,"code":"import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScopeUtils.js\";\n\n/**\n *\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n  constructor(metadata) {\n    this.metadata = metadata;\n  }\n  getInitialState() {\n    if (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n      return this._initialState;\n    }\n    const initialState = {};\n    const slotsAreManaged = this.slotsAreManaged();\n\n    // Initialize properties\n    const props = this.getProperties();\n    for (const propName in props) {\n      // eslint-disable-line\n      const propType = props[propName].type;\n      const propDefaultValue = props[propName].defaultValue;\n      if (propType === Boolean) {\n        initialState[propName] = false;\n        if (propDefaultValue !== undefined) {\n          console.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n        }\n      } else if (props[propName].multiple) {\n        initialState[propName] = [];\n      } else if (propType === Object) {\n        initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n      } else if (propType === String) {\n        initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n      } else {\n        initialState[propName] = propDefaultValue;\n      }\n    }\n\n    // Initialize slots\n    if (slotsAreManaged) {\n      const slots = this.getSlots();\n      for (const [slotName, slotData] of Object.entries(slots)) {\n        // eslint-disable-line\n        const propertyName = slotData.propertyName || slotName;\n        initialState[propertyName] = [];\n      }\n    }\n    this._initialState = initialState;\n    return initialState;\n  }\n\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n  static validatePropertyValue(value, propData) {\n    const isMultiple = propData.multiple;\n    if (isMultiple) {\n      return value.map(propValue => validateSingleProperty(propValue, propData));\n    }\n    return validateSingleProperty(value, propData);\n  }\n\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n  static validateSlotValue(value, slotData) {\n    return validateSingleSlot(value, slotData);\n  }\n\n  /**\n   * Returns the tag of the UI5 Element without the scope\n   * @public\n   */\n  getPureTag() {\n    return this.metadata.tag;\n  }\n\n  /**\n   * Returns the tag of the UI5 Element\n   * @public\n   */\n  getTag() {\n    const pureTag = this.metadata.tag;\n    const suffix = getEffectiveScopingSuffixForTag(pureTag);\n    if (!suffix) {\n      return pureTag;\n    }\n    return `${pureTag}-${suffix}`;\n  }\n\n  /**\n   * Used to get the tag we need to register for backwards compatibility\n   * @public\n   */\n  getAltTag() {\n    const pureAltTag = this.metadata.altTag;\n    if (!pureAltTag) {\n      return;\n    }\n    const suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n    if (!suffix) {\n      return pureAltTag;\n    }\n    return `${pureAltTag}-${suffix}`;\n  }\n\n  /**\n   * Determines whether a property should have an attribute counterpart\n   * @public\n   * @param propName\n   * @returns {boolean}\n   */\n  hasAttribute(propName) {\n    const propData = this.getProperties()[propName];\n    return propData.type !== Object && !propData.noAttribute && !propData.multiple;\n  }\n\n  /**\n   * Returns an array with the properties of the UI5 Element (in camelCase)\n   * @public\n   * @returns {string[]}\n   */\n  getPropertiesList() {\n    return Object.keys(this.getProperties());\n  }\n\n  /**\n   * Returns an array with the attributes of the UI5 Element (in kebab-case)\n   * @public\n   * @returns {string[]}\n   */\n  getAttributesList() {\n    return this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n  }\n\n  /**\n   * Returns an object with key-value pairs of slots and their metadata definitions\n   * @public\n   */\n  getSlots() {\n    return this.metadata.slots || {};\n  }\n\n  /**\n   * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n   * @returns {boolean}\n   */\n  canSlotText() {\n    const defaultSlot = this.getSlots().default;\n    return defaultSlot && defaultSlot.type === Node;\n  }\n\n  /**\n   * Determines whether this UI5 Element supports any slots\n   * @public\n   */\n  hasSlots() {\n    return !!Object.entries(this.getSlots()).length;\n  }\n\n  /**\n   * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n   * @public\n   */\n  hasIndividualSlots() {\n    return this.slotsAreManaged() && Object.entries(this.getSlots()).some(_ref => {\n      let [_slotName, slotData] = _ref;\n      return slotData.individualSlots;\n    });\n  }\n\n  /**\n   * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n   * @public\n   */\n  slotsAreManaged() {\n    return !!this.metadata.managedSlots;\n  }\n\n  /**\n   * Determines whether this control supports F6 fast navigation\n   * @public\n   */\n  supportsF6FastNavigation() {\n    return !!this.metadata.fastNavigation;\n  }\n\n  /**\n   * Returns an object with key-value pairs of properties and their metadata definitions\n   * @public\n   */\n  getProperties() {\n    return this.metadata.properties || {};\n  }\n\n  /**\n   * Returns an object with key-value pairs of events and their metadata definitions\n   * @public\n   */\n  getEvents() {\n    return this.metadata.events || {};\n  }\n\n  /**\n   * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n   * @returns {boolean}\n   */\n  isLanguageAware() {\n    return !!this.metadata.languageAware;\n  }\n\n  /**\n   * Determines whether this UI5 Element has any theme dependant carachteristics.\n   * @returns {boolean}\n   */\n  isThemeAware() {\n    return !!this.metadata.themeAware;\n  }\n\n  /**\n   * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n   * and determines whether this should cause and invalidation\n   *\n   * @param slotName the name of the slot in which a child was changed\n   * @param type the type of change in the child: \"property\" or \"slot\"\n   * @param name the name of the property/slot that changed\n   * @returns {boolean}\n   */\n  shouldInvalidateOnChildChange(slotName, type, name) {\n    const config = this.getSlots()[slotName].invalidateOnChildChange;\n\n    // invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n    if (config === undefined) {\n      return false;\n    }\n\n    // The simple format was used: invalidateOnChildChange: true/false;\n    if (typeof config === \"boolean\") {\n      return config;\n    }\n\n    // The complex format was used: invalidateOnChildChange: { properties, slots }\n    if (typeof config === \"object\") {\n      // A property was changed\n      if (type === \"property\") {\n        // The config object does not have a properties field\n        if (config.properties === undefined) {\n          return false;\n        }\n\n        // The config object has the short format: properties: true/false\n        if (typeof config.properties === \"boolean\") {\n          return config.properties;\n        }\n\n        // The config object has the complex format: properties: [...]\n        if (Array.isArray(config.properties)) {\n          return config.properties.includes(name);\n        }\n        throw new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n      }\n\n      // A slot was changed\n      if (type === \"slot\") {\n        // The config object does not have a slots field\n        if (config.slots === undefined) {\n          return false;\n        }\n\n        // The config object has the short format: slots: true/false\n        if (typeof config.slots === \"boolean\") {\n          return config.slots;\n        }\n\n        // The config object has the complex format: slots: [...]\n        if (Array.isArray(config.slots)) {\n          return config.slots.includes(name);\n        }\n        throw new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n      }\n    }\n    throw new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n  }\n}\nconst validateSingleProperty = (value, propData) => {\n  const propertyType = propData.type;\n  if (propertyType === Boolean) {\n    return typeof value === \"boolean\" ? value : false;\n  }\n  if (propertyType === String) {\n    return typeof value === \"string\" || typeof value === \"undefined\" || value === null ? value : value.toString();\n  }\n  if (propertyType === Object) {\n    return typeof value === \"object\" ? value : propData.defaultValue;\n  }\n  if (isDescendantOf(propertyType, DataType)) {\n    return propertyType.isValid(value) ? value : propData.defaultValue;\n  }\n};\nconst validateSingleSlot = (value, slotData) => {\n  value && getSlottedElements(value).forEach(el => {\n    if (!(el instanceof slotData.type)) {\n      throw new Error(`${el} is not of type ${slotData.type}`);\n    }\n  });\n  return value;\n};\nexport default UI5ElementMetadata;","map":{"version":3,"names":["DataType","isDescendantOf","camelToKebabCase","getSlottedElements","getEffectiveScopingSuffixForTag","UI5ElementMetadata","constructor","metadata","getInitialState","Object","prototype","hasOwnProperty","call","_initialState","initialState","slotsAreManaged","props","getProperties","propName","propType","type","propDefaultValue","defaultValue","Boolean","undefined","console","warn","multiple","String","slots","getSlots","slotName","slotData","entries","propertyName","validatePropertyValue","value","propData","isMultiple","map","propValue","validateSingleProperty","validateSlotValue","validateSingleSlot","getPureTag","tag","getTag","pureTag","suffix","getAltTag","pureAltTag","altTag","hasAttribute","noAttribute","getPropertiesList","keys","getAttributesList","filter","canSlotText","defaultSlot","default","Node","hasSlots","length","hasIndividualSlots","some","_slotName","individualSlots","managedSlots","supportsF6FastNavigation","fastNavigation","properties","getEvents","events","isLanguageAware","languageAware","isThemeAware","themeAware","shouldInvalidateOnChildChange","name","config","invalidateOnChildChange","Array","isArray","includes","Error","propertyType","toString","isValid","forEach","el"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/UI5ElementMetadata.js"],"sourcesContent":["import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScopeUtils.js\";\n\n/**\n *\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n\tconstructor(metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\tgetInitialState() {\n\t\tif (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n\t\t\treturn this._initialState;\n\t\t}\n\n\t\tconst initialState = {};\n\t\tconst slotsAreManaged = this.slotsAreManaged();\n\n\t\t// Initialize properties\n\t\tconst props = this.getProperties();\n\t\tfor (const propName in props) { // eslint-disable-line\n\t\t\tconst propType = props[propName].type;\n\t\t\tconst propDefaultValue = props[propName].defaultValue;\n\n\t\t\tif (propType === Boolean) {\n\t\t\t\tinitialState[propName] = false;\n\n\t\t\t\tif (propDefaultValue !== undefined) {\n\t\t\t\t\tconsole.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n\t\t\t\t}\n\t\t\t} else if (props[propName].multiple) {\n\t\t\t\tinitialState[propName] = [];\n\t\t\t} else if (propType === Object) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n\t\t\t} else if (propType === String) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n\t\t\t} else {\n\t\t\t\tinitialState[propName] = propDefaultValue;\n\t\t\t}\n\t\t}\n\n\t\t// Initialize slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tinitialState[propertyName] = [];\n\t\t\t}\n\t\t}\n\n\t\tthis._initialState = initialState;\n\t\treturn initialState;\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validatePropertyValue(value, propData) {\n\t\tconst isMultiple = propData.multiple;\n\t\tif (isMultiple) {\n\t\t\treturn value.map(propValue => validateSingleProperty(propValue, propData));\n\t\t}\n\t\treturn validateSingleProperty(value, propData);\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validateSlotValue(value, slotData) {\n\t\treturn validateSingleSlot(value, slotData);\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element without the scope\n\t * @public\n\t */\n\tgetPureTag() {\n\t\treturn this.metadata.tag;\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element\n\t * @public\n\t */\n\tgetTag() {\n\t\tconst pureTag = this.metadata.tag;\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureTag);\n\t\tif (!suffix) {\n\t\t\treturn pureTag;\n\t\t}\n\n\t\treturn `${pureTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Used to get the tag we need to register for backwards compatibility\n\t * @public\n\t */\n\tgetAltTag() {\n\t\tconst pureAltTag = this.metadata.altTag;\n\t\tif (!pureAltTag) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n\t\tif (!suffix) {\n\t\t\treturn pureAltTag;\n\t\t}\n\n\t\treturn `${pureAltTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Determines whether a property should have an attribute counterpart\n\t * @public\n\t * @param propName\n\t * @returns {boolean}\n\t */\n\thasAttribute(propName) {\n\t\tconst propData = this.getProperties()[propName];\n\t\treturn propData.type !== Object && !propData.noAttribute && !propData.multiple;\n\t}\n\n\t/**\n\t * Returns an array with the properties of the UI5 Element (in camelCase)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetPropertiesList() {\n\t\treturn Object.keys(this.getProperties());\n\t}\n\n\t/**\n\t * Returns an array with the attributes of the UI5 Element (in kebab-case)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetAttributesList() {\n\t\treturn this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of slots and their metadata definitions\n\t * @public\n\t */\n\tgetSlots() {\n\t\treturn this.metadata.slots || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n\t * @returns {boolean}\n\t */\n\tcanSlotText() {\n\t\tconst defaultSlot = this.getSlots().default;\n\t\treturn defaultSlot && defaultSlot.type === Node;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots\n\t * @public\n\t */\n\thasSlots() {\n\t\treturn !!Object.entries(this.getSlots()).length;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n\t * @public\n\t */\n\thasIndividualSlots() {\n\t\treturn this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n\t * @public\n\t */\n\tslotsAreManaged() {\n\t\treturn !!this.metadata.managedSlots;\n\t}\n\n\t/**\n\t * Determines whether this control supports F6 fast navigation\n\t * @public\n\t */\n\tsupportsF6FastNavigation() {\n\t\treturn !!this.metadata.fastNavigation;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of properties and their metadata definitions\n\t * @public\n\t */\n\tgetProperties() {\n\t\treturn this.metadata.properties || {};\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of events and their metadata definitions\n\t * @public\n\t */\n\tgetEvents() {\n\t\treturn this.metadata.events || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n\t * @returns {boolean}\n\t */\n\tisLanguageAware() {\n\t\treturn !!this.metadata.languageAware;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any theme dependant carachteristics.\n\t * @returns {boolean}\n\t */\n\t isThemeAware() {\n\t\treturn !!this.metadata.themeAware;\n\t}\n\n\t/**\n\t * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n\t * and determines whether this should cause and invalidation\n\t *\n\t * @param slotName the name of the slot in which a child was changed\n\t * @param type the type of change in the child: \"property\" or \"slot\"\n\t * @param name the name of the property/slot that changed\n\t * @returns {boolean}\n\t */\n\tshouldInvalidateOnChildChange(slotName, type, name) {\n\t\tconst config = this.getSlots()[slotName].invalidateOnChildChange;\n\n\t\t// invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\t\tif (config === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The simple format was used: invalidateOnChildChange: true/false;\n\t\tif (typeof config === \"boolean\") {\n\t\t\treturn config;\n\t\t}\n\n\t\t// The complex format was used: invalidateOnChildChange: { properties, slots }\n\t\tif (typeof config === \"object\") {\n\t\t\t// A property was changed\n\t\t\tif (type === \"property\") {\n\t\t\t\t// The config object does not have a properties field\n\t\t\t\tif (config.properties === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: properties: true/false\n\t\t\t\tif (typeof config.properties === \"boolean\") {\n\t\t\t\t\treturn config.properties;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: properties: [...]\n\t\t\t\tif (Array.isArray(config.properties)) {\n\t\t\t\t\treturn config.properties.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n\t\t\t}\n\n\t\t\t// A slot was changed\n\t\t\tif (type === \"slot\") {\n\t\t\t\t// The config object does not have a slots field\n\t\t\t\tif (config.slots === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: slots: true/false\n\t\t\t\tif (typeof config.slots === \"boolean\") {\n\t\t\t\t\treturn config.slots;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: slots: [...]\n\t\t\t\tif (Array.isArray(config.slots)) {\n\t\t\t\t\treturn config.slots.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n\t}\n}\n\nconst validateSingleProperty = (value, propData) => {\n\tconst propertyType = propData.type;\n\n\tif (propertyType === Boolean) {\n\t\treturn typeof value === \"boolean\" ? value : false;\n\t}\n\tif (propertyType === String) {\n\t\treturn (typeof value === \"string\" || typeof value === \"undefined\" || value === null) ? value : value.toString();\n\t}\n\tif (propertyType === Object) {\n\t\treturn typeof value === \"object\" ? value : propData.defaultValue;\n\t}\n\tif (isDescendantOf(propertyType, DataType)) {\n\t\treturn propertyType.isValid(value) ? value : propData.defaultValue;\n\t}\n};\n\nconst validateSingleSlot = (value, slotData) => {\n\tvalue && getSlottedElements(value).forEach(el => {\n\t\tif (!(el instanceof slotData.type)) {\n\t\t\tthrow new Error(`${el} is not of type ${slotData.type}`);\n\t\t}\n\t});\n\n\treturn value;\n};\n\nexport default UI5ElementMetadata;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}