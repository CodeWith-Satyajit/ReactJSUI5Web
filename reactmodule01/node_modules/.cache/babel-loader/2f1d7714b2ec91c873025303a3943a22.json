{"ast":null,"code":"import { _$LH as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    I: l\n  } = o,\n  t = o => null === o || \"object\" != typeof o && \"function\" != typeof o,\n  i = {\n    HTML: 1,\n    SVG: 2\n  },\n  n = (o, l) => void 0 === l ? void 0 !== (null == o ? void 0 : o._$litType$) : (null == o ? void 0 : o._$litType$) === l,\n  d = o => void 0 !== (null == o ? void 0 : o._$litDirective$),\n  v = o => null == o ? void 0 : o._$litDirective$,\n  e = o => void 0 === o.strings,\n  c = () => document.createComment(\"\"),\n  r = (o, t, i) => {\n    var n;\n    const d = o._$AA.parentNode,\n      v = void 0 === t ? o._$AB : t._$AA;\n    if (void 0 === i) {\n      const t = d.insertBefore(c(), v),\n        n = d.insertBefore(c(), v);\n      i = new l(t, n, o, o.options);\n    } else {\n      const l = i._$AB.nextSibling,\n        t = i._$AM,\n        e = t !== o;\n      if (e) {\n        let l;\n        null === (n = i._$AQ) || void 0 === n || n.call(i, o), i._$AM = o, void 0 !== i._$AP && (l = o._$AU) !== t._$AU && i._$AP(l);\n      }\n      if (l !== v || e) {\n        let o = i._$AA;\n        for (; o !== l;) {\n          const l = o.nextSibling;\n          d.insertBefore(o, v), o = l;\n        }\n      }\n    }\n    return i;\n  },\n  u = function (o, l) {\n    let t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n    return o._$AI(l, t), o;\n  },\n  f = {},\n  s = function (o) {\n    let l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : f;\n    return o._$AH = l;\n  },\n  m = o => o._$AH,\n  p = o => {\n    var l;\n    null === (l = o._$AP) || void 0 === l || l.call(o, !1, !0);\n    let t = o._$AA;\n    const i = o._$AB.nextSibling;\n    for (; t !== i;) {\n      const o = t.nextSibling;\n      t.remove(), t = o;\n    }\n  },\n  a = o => {\n    o._$AR();\n  };\nexport { i as TemplateResultType, a as clearPart, m as getCommittedValue, v as getDirectiveClass, r as insertPart, d as isDirectiveResult, t as isPrimitive, e as isSingleExpression, n as isTemplateResult, p as removePart, u as setChildPartValue, s as setCommittedValue };","map":{"version":3,"mappings":";;;;;;AAeA;IAAOA,GAAYC;EAAAA,IAAaC;EAkBnBC,IAAeC,KAChB,SAAVA,KAAmC,mBAATA,KAAqC,qBAATA;EAE3CC,IAAqB;IAChCC,MAAM;IACNC,KAAK;EAAA;EASMC,IAAmB,CAC9BJ,GACAK,WAESC,MAATD,SAEkDC,OAA7CN,iBAAK,IAALA,EAAuCO,eACvCP,iBAAK,IAALA,EAAuCO,gBAAMF;EAKvCG,IAAqBR,UAEoBM,OAAnDN,uBAA6CS;EAKnCC,IAAqBV,KAE/BA,iBAAK,IAALA,EAA6CS;EAUnCE,IAAsBC,UACON,MAAvCM,EAA2BC;EAExBC,IAAe,MAAMC,SAASC,cAAc;EAcrCC,IAAa,CACxBC,GACAC,GACAP;IAAAA;IAEA,MAAMQ,IAAiBF,EAAcG,KAAaC;MAE5CC,SACQjB,MAAZa,IAAwBD,EAAcM,OAAYL,EAAQE;IAE5D,SAAaf,MAATM,GAAoB;MACtB,MAAMa,IAAiBL,EAAWM,aAAaZ,KAAgBS;QACzDI,IAAeP,EAAWM,aAAaZ,KAAgBS;MAC7DX,IAAO,IAAIf,EACT4B,GACAE,GACAT,GACAA,EAAcU,QAEjB;IAAA,OAAM;MACL,MAAMD,IAAef,EAAKY,KAAYK;QAChCC,IAAYlB,EAAKmB;QACjBC,IAAgBF,MAAcZ;MACpC,IAAIc,GAAe;QAUjB,IAAIC;QAT6B,UAAjCC,MAAKC,cAA4B,yBAKjCvB,EAAKmB,OAAWb,QAMqBZ,MAAnCM,EAAKwB,SACJH,IAAqBf,EAAcmB,UAClCP,EAAWO,QAEbzB,EAAKwB,KAA0BH,EAElC;MAAA;MACD,IAAIN,MAAYJ,KAAWS,GAAe;QACxC,IAAIM,IAAqB1B,EAAKS;QAC9B,OAAOiB,MAAUX,IAAS;UACxB,MAAMY,IAAsBD,EAAQT;UAC/BT,EAAWM,aAAaY,GAAQf,IACrCe,IAAQC,CACT;QAAA;MACF;IACF;IAED,OAAO3B,CAAI;EAAA;EAmBA4B,IAAoB,UAC/B5B,GACAZ;IAAAA,IACAyC,wEAAmC7B;IAAAA,OAEnCA,EAAK8B,KAAW1C,GAAOyC,IAChB7B;EAAAA;EAKH+B,IAAc;EAaPC,IAAoB,UAAChC;IAAAA,IAAYZ,wEAAiB2C;IAAAA,OAC5D/B,EAAKiC,OAAmB7C;EAAAA;EAgBd8C,IAAqBlC,KAAoBA,EAAKiC;EAO9CE,IAAcnC;IAAAA;IACK,UAA9BsB,MAAKE,cAAyB,sBAAG,IAAO;IACxC,IAAIE,IAA0B1B,EAAKS;IACnC,MAAM2B,IAA6BpC,EAAKY,KAAYK;IACpD,OAAOS,MAAUU,IAAK;MACpB,MAAMT,IAA2BD,EAAQT;MACnCS,EAAsBW,UAC5BX,IAAQC,CACT;IAAA;EAAA;EAGUW,IAAatC;IACxBA,EAAKuC,MAAS;EAAA;AAAA","names":["_ChildPart","ChildPart","_$LH","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","_$litType$","isDirectiveResult","_$litDirective$","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","newConnectionState","_a","_$reparentDisconnectables","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"sources":["src/directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_$LH, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}