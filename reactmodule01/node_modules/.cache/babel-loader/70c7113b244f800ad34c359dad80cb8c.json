{"ast":null,"code":"import EventProvider from \"./EventProvider.js\";\nimport RenderQueue from \"./RenderQueue.js\";\nimport { getAllRegisteredTags } from \"./CustomElementsRegistry.js\";\nimport { isRtlAware } from \"./locale/RTLAwareRegistry.js\";\nconst registeredElements = new Set();\nconst eventProvider = new EventProvider();\nconst invalidatedWebComponents = new RenderQueue(); // Queue for invalidated web components\n\nlet renderTaskPromise, renderTaskPromiseResolve;\nlet mutationObserverTimer;\nlet queuePromise;\n\n/**\n * Schedules a render task (if not already scheduled) to render the component\n *\n * @param webComponent\n * @returns {Promise}\n */\nconst renderDeferred = async webComponent => {\n  // Enqueue the web component\n  invalidatedWebComponents.add(webComponent);\n\n  // Schedule a rendering task\n  await scheduleRenderTask();\n};\n\n/**\n * Renders a component synchronously and adds it to the registry of rendered components\n *\n * @param webComponent\n */\nconst renderImmediately = webComponent => {\n  eventProvider.fireEvent(\"beforeComponentRender\", webComponent);\n  registeredElements.add(webComponent);\n  webComponent._render();\n};\n\n/**\n * Cancels the rendering of a component, if awaiting to be rendered, and removes it from the registry of rendered components\n *\n * @param webComponent\n */\nconst cancelRender = webComponent => {\n  invalidatedWebComponents.remove(webComponent);\n  registeredElements.delete(webComponent);\n};\n\n/**\n * Schedules a rendering task, if not scheduled already\n */\nconst scheduleRenderTask = async () => {\n  if (!queuePromise) {\n    queuePromise = new Promise(resolve => {\n      window.requestAnimationFrame(() => {\n        // Render all components in the queue\n\n        // console.log(`--------------------RENDER TASK START------------------------------`); // eslint-disable-line\n        invalidatedWebComponents.process(renderImmediately);\n        // console.log(`--------------------RENDER TASK END------------------------------`); // eslint-disable-line\n\n        // Resolve the promise so that callers of renderDeferred can continue\n        queuePromise = null;\n        resolve();\n\n        // Wait for Mutation observer before the render task is considered finished\n        if (!mutationObserverTimer) {\n          mutationObserverTimer = setTimeout(() => {\n            mutationObserverTimer = undefined;\n            if (invalidatedWebComponents.isEmpty()) {\n              _resolveTaskPromise();\n            }\n          }, 200);\n        }\n      });\n    });\n  }\n  await queuePromise;\n};\n\n/**\n * return a promise that will be resolved once all invalidated web components are rendered\n */\nconst whenDOMUpdated = () => {\n  if (renderTaskPromise) {\n    return renderTaskPromise;\n  }\n  renderTaskPromise = new Promise(resolve => {\n    renderTaskPromiseResolve = resolve;\n    window.requestAnimationFrame(() => {\n      if (invalidatedWebComponents.isEmpty()) {\n        renderTaskPromise = undefined;\n        resolve();\n      }\n    });\n  });\n  return renderTaskPromise;\n};\nconst whenAllCustomElementsAreDefined = () => {\n  const definedPromises = getAllRegisteredTags().map(tag => customElements.whenDefined(tag));\n  return Promise.all(definedPromises);\n};\nconst renderFinished = async () => {\n  await whenAllCustomElementsAreDefined();\n  await whenDOMUpdated();\n};\nconst _resolveTaskPromise = () => {\n  if (!invalidatedWebComponents.isEmpty()) {\n    // More updates are pending. Resolve will be called again\n    return;\n  }\n  if (renderTaskPromiseResolve) {\n    renderTaskPromiseResolve();\n    renderTaskPromiseResolve = undefined;\n    renderTaskPromise = undefined;\n  }\n};\n\n/**\n * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.\n *\n * Usage:\n * reRenderAllUI5Elements() -> re-renders all components\n * reRenderAllUI5Elements({tag: \"ui5-button\"}) -> re-renders only instances of ui5-button\n * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components\n * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components\n * reRenderAllUI5Elements({themeAware: true}) -> re-renders only themeAware components\n * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware\n * etc...\n *\n * @public\n * @param {Object|undefined} filters - Object with keys that can be \"rtlAware\" or \"languageAware\"\n * @returns {Promise<void>}\n */\nconst reRenderAllUI5Elements = async filters => {\n  registeredElements.forEach(element => {\n    const tag = element.constructor.getMetadata().getTag();\n    const rtlAware = isRtlAware(element.constructor);\n    const languageAware = element.constructor.getMetadata().isLanguageAware();\n    const themeAware = element.constructor.getMetadata().isThemeAware();\n    if (!filters || filters.tag === tag || filters.rtlAware && rtlAware || filters.languageAware && languageAware || filters.themeAware && themeAware) {\n      renderDeferred(element);\n    }\n  });\n  await renderFinished();\n};\nconst attachBeforeComponentRender = listener => {\n  eventProvider.attachEvent(\"beforeComponentRender\", listener);\n};\nconst detachBeforeComponentRender = listener => {\n  eventProvider.detachEvent(\"beforeComponentRender\", listener);\n};\nexport { renderDeferred, renderImmediately, cancelRender, renderFinished, reRenderAllUI5Elements, attachBeforeComponentRender, detachBeforeComponentRender };","map":{"version":3,"names":["EventProvider","RenderQueue","getAllRegisteredTags","isRtlAware","registeredElements","Set","eventProvider","invalidatedWebComponents","renderTaskPromise","renderTaskPromiseResolve","mutationObserverTimer","queuePromise","renderDeferred","webComponent","add","scheduleRenderTask","renderImmediately","fireEvent","_render","cancelRender","remove","delete","Promise","resolve","window","requestAnimationFrame","process","setTimeout","undefined","isEmpty","_resolveTaskPromise","whenDOMUpdated","whenAllCustomElementsAreDefined","definedPromises","map","tag","customElements","whenDefined","all","renderFinished","reRenderAllUI5Elements","filters","forEach","element","constructor","getMetadata","getTag","rtlAware","languageAware","isLanguageAware","themeAware","isThemeAware","attachBeforeComponentRender","listener","attachEvent","detachBeforeComponentRender","detachEvent"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/Render.js"],"sourcesContent":["import EventProvider from \"./EventProvider.js\";\nimport RenderQueue from \"./RenderQueue.js\";\nimport { getAllRegisteredTags } from \"./CustomElementsRegistry.js\";\nimport { isRtlAware } from \"./locale/RTLAwareRegistry.js\";\n\nconst registeredElements = new Set();\nconst eventProvider = new EventProvider();\n\nconst invalidatedWebComponents = new RenderQueue(); // Queue for invalidated web components\n\nlet renderTaskPromise,\n\trenderTaskPromiseResolve;\n\nlet mutationObserverTimer;\n\nlet queuePromise;\n\n/**\n * Schedules a render task (if not already scheduled) to render the component\n *\n * @param webComponent\n * @returns {Promise}\n */\nconst renderDeferred = async webComponent => {\n\t// Enqueue the web component\n\tinvalidatedWebComponents.add(webComponent);\n\n\t// Schedule a rendering task\n\tawait scheduleRenderTask();\n};\n\n/**\n * Renders a component synchronously and adds it to the registry of rendered components\n *\n * @param webComponent\n */\nconst renderImmediately = webComponent => {\n\teventProvider.fireEvent(\"beforeComponentRender\", webComponent);\n\tregisteredElements.add(webComponent);\n\twebComponent._render();\n};\n\n/**\n * Cancels the rendering of a component, if awaiting to be rendered, and removes it from the registry of rendered components\n *\n * @param webComponent\n */\nconst cancelRender = webComponent => {\n\tinvalidatedWebComponents.remove(webComponent);\n\tregisteredElements.delete(webComponent);\n};\n\n/**\n * Schedules a rendering task, if not scheduled already\n */\nconst scheduleRenderTask = async () => {\n\tif (!queuePromise) {\n\t\tqueuePromise = new Promise(resolve => {\n\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\t// Render all components in the queue\n\n\t\t\t\t// console.log(`--------------------RENDER TASK START------------------------------`); // eslint-disable-line\n\t\t\t\tinvalidatedWebComponents.process(renderImmediately);\n\t\t\t\t// console.log(`--------------------RENDER TASK END------------------------------`); // eslint-disable-line\n\n\t\t\t\t// Resolve the promise so that callers of renderDeferred can continue\n\t\t\t\tqueuePromise = null;\n\t\t\t\tresolve();\n\n\t\t\t\t// Wait for Mutation observer before the render task is considered finished\n\t\t\t\tif (!mutationObserverTimer) {\n\t\t\t\t\tmutationObserverTimer = setTimeout(() => {\n\t\t\t\t\t\tmutationObserverTimer = undefined;\n\t\t\t\t\t\tif (invalidatedWebComponents.isEmpty()) {\n\t\t\t\t\t\t\t_resolveTaskPromise();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 200);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tawait queuePromise;\n};\n\n/**\n * return a promise that will be resolved once all invalidated web components are rendered\n */\nconst whenDOMUpdated = () => {\n\tif (renderTaskPromise) {\n\t\treturn renderTaskPromise;\n\t}\n\n\trenderTaskPromise = new Promise(resolve => {\n\t\trenderTaskPromiseResolve = resolve;\n\t\twindow.requestAnimationFrame(() => {\n\t\t\tif (invalidatedWebComponents.isEmpty()) {\n\t\t\t\trenderTaskPromise = undefined;\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n\n\treturn renderTaskPromise;\n};\n\nconst whenAllCustomElementsAreDefined = () => {\n\tconst definedPromises = getAllRegisteredTags().map(tag => customElements.whenDefined(tag));\n\treturn Promise.all(definedPromises);\n};\n\nconst renderFinished = async () => {\n\tawait whenAllCustomElementsAreDefined();\n\tawait whenDOMUpdated();\n};\n\nconst _resolveTaskPromise = () => {\n\tif (!invalidatedWebComponents.isEmpty()) {\n\t\t// More updates are pending. Resolve will be called again\n\t\treturn;\n\t}\n\n\tif (renderTaskPromiseResolve) {\n\t\trenderTaskPromiseResolve();\n\t\trenderTaskPromiseResolve = undefined;\n\t\trenderTaskPromise = undefined;\n\t}\n};\n\n/**\n * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.\n *\n * Usage:\n * reRenderAllUI5Elements() -> re-renders all components\n * reRenderAllUI5Elements({tag: \"ui5-button\"}) -> re-renders only instances of ui5-button\n * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components\n * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components\n * reRenderAllUI5Elements({themeAware: true}) -> re-renders only themeAware components\n * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware\n * etc...\n *\n * @public\n * @param {Object|undefined} filters - Object with keys that can be \"rtlAware\" or \"languageAware\"\n * @returns {Promise<void>}\n */\nconst reRenderAllUI5Elements = async filters => {\n\tregisteredElements.forEach(element => {\n\t\tconst tag = element.constructor.getMetadata().getTag();\n\t\tconst rtlAware = isRtlAware(element.constructor);\n\t\tconst languageAware = element.constructor.getMetadata().isLanguageAware();\n\t\tconst themeAware = element.constructor.getMetadata().isThemeAware();\n\t\tif (!filters || (filters.tag === tag) || (filters.rtlAware && rtlAware) || (filters.languageAware && languageAware) || (filters.themeAware && themeAware)) {\n\t\t\trenderDeferred(element);\n\t\t}\n\t});\n\tawait renderFinished();\n};\n\nconst attachBeforeComponentRender = listener => {\n\teventProvider.attachEvent(\"beforeComponentRender\", listener);\n};\n\nconst detachBeforeComponentRender = listener => {\n\teventProvider.detachEvent(\"beforeComponentRender\", listener);\n};\n\nexport {\n\trenderDeferred,\n\trenderImmediately,\n\tcancelRender,\n\trenderFinished,\n\treRenderAllUI5Elements,\n\tattachBeforeComponentRender,\n\tdetachBeforeComponentRender,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}