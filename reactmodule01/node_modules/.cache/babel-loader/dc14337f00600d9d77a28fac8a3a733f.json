{"ast":null,"code":"import { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport Title from \"@ui5/webcomponents/dist/Title.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\nimport { VSD_DIALOG_TITLE_SORT, VSD_SUBMIT_BUTTON, VSD_CANCEL_BUTTON, VSD_RESET_BUTTON, VSD_SORT_ORDER, VSD_SORT_BY, VSD_ORDER_ASCENDING, VSD_ORDER_DESCENDING, VSD_FILTER_BY } from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n  tag: \"ui5-view-settings-dialog\",\n  managedSlots: true,\n  properties: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */{\n    /**\n     * Defines the initial sort order.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    sortDescending: {\n      type: Boolean\n    },\n    /**\n     * Keeps recently focused list in order to focus it on next dialog open.\n     *\n     * @type {object}\n     * @private\n     */\n    _recentlyFocused: {\n      type: Object\n    },\n    /**\n     * Stores settings of the dialog before the initial open.\n     *\n     * @type {object}\n     * @private\n     */\n    _initialSettings: {\n      type: Object\n    },\n    /**\n     * Stores settings of the dialog after confirmation.\n     *\n     * @type {object}\n     * @private\n     */\n    _confirmedSettings: {\n      type: Object\n    },\n    /**\n     * Stores current settings of the dialog.\n     *\n     * @type {object}\n     * @private\n     */\n    _currentSettings: {\n      type: Object\n    },\n    /**\n     * Defnies the current mode of the component.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _currentMode: {\n      type: ViewSettingsDialogMode,\n      defaultValue: ViewSettingsDialogMode.Sort\n    },\n    /**\n     * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _filterStepTwo: {\n      type: Boolean,\n      noAttribute: true\n    }\n  },\n  slots: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */{\n    /**\n     * Defines the list of items against which the user could sort data.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n     * @slot sortItems\n     * @public\n     */\n    sortItems: {\n      type: HTMLElement\n    },\n    /**\n     * Defines the <code>filterItems</code> list.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n     * @slot filterItems\n     * @public\n     */\n    filterItems: {\n      type: HTMLElement\n    }\n  },\n  events: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */{\n    /**\n     * Fired when confirmation button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @param {HTMLElement} sortByItem The currently selected <code>ui5-sort-item</code>.\n     * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n     * @param {Array} filterItems The selected filters items.\n     * @public\n     */\n    confirm: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        sortByItem: {\n          type: HTMLElement\n        },\n        sortDescending: {\n          type: Boolean\n        },\n        filters: {\n          type: Array\n        }\n      }\n    },\n    /**\n     * Fired when cancel button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @param {HTMLElement} sortByItem The currently selected <code>ui5-sort-item</code>.\n     * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n     * @param {Array} filterItems The selected filters items.\n     * @public\n     */\n    cancel: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        sortByItem: {\n          type: HTMLElement\n        },\n        sortDescending: {\n          type: Boolean\n        },\n        filters: {\n          type: Array\n        }\n      }\n    },\n    /**\n     * Fired before the component is opened. <b>This event does not bubble.</b>\n     *\n     * @public\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#before-open\n     */\n    \"before-open\": {}\n  }\n};\n\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents-fiori/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-view-settings-dialog\n * @appenddocs SortItem FilterItem FilterItemOption\n * @since 1.0.0-rc.16\n * @public\n */\nclass ViewSettingsDialog extends UI5Element {\n  constructor() {\n    super();\n    this._currentSettings = {\n      sortOrder: [],\n      sortBy: [],\n      filters: []\n    };\n  }\n  onBeforeRendering() {\n    if (this._currentSettings.filters && this._currentSettings.filters.length) {\n      this._setAdditionalTexts();\n    }\n    if (!this.shouldBuildSort && this.shouldBuildFilter) {\n      this._currentMode = ViewSettingsDialogMode.Filter;\n    }\n  }\n  _setAdditionalTexts() {\n    // Add the additional text to the filter options\n    this.filterItems.forEach((filter, index) => {\n      let selectedCount = 0;\n      for (let i = 0; i < filter.values.length; i++) {\n        if (this._currentSettings.filters[index].filterOptions[i].selected) {\n          selectedCount++;\n        }\n      }\n      filter.additionalText = !selectedCount ? \"\" : selectedCount;\n    });\n  }\n  static get render() {\n    return litRender;\n  }\n  static get metadata() {\n    return metadata;\n  }\n  static get dependencies() {\n    return [Bar, Button, Title, Dialog, Label, List, StandardListItem, GroupHeaderListItem, SegmentedButton, SegmentedButtonItem];\n  }\n  static get template() {\n    return ViewSettingsDialogTemplate;\n  }\n  static get styles() {\n    return viewSettingsDialogCSS;\n  }\n  static async onDefine() {\n    ViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n  }\n  get _selectedFilter() {\n    for (let i = 0; i < this._currentSettings.filters.length; i++) {\n      if (this._currentSettings.filters[i].selected) {\n        return this._currentSettings.filters[i];\n      }\n    }\n    return \"\";\n  }\n  get shouldBuildSort() {\n    return !!this.sortItems.length;\n  }\n  get shouldBuildFilter() {\n    return !!this.filterItems.length;\n  }\n  get hasPagination() {\n    return this.shouldBuildSort && this.shouldBuildFilter;\n  }\n  get _filterByTitle() {\n    return `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${this._selectedFilter.text}`;\n  }\n  get _dialogTitle() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_DIALOG_TITLE_SORT);\n  }\n  get _okButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n  }\n  get _cancelButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n  }\n  get _resetButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n  }\n  get _ascendingLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n  }\n  get _descendingLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n  }\n  get _sortOrderLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n  }\n  get _filterByLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n  }\n  get _sortByLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n  }\n  get _isPhone() {\n    return isPhone();\n  }\n  get _sortAscending() {\n    return !this.sortDescending;\n  }\n  get _title() {\n    return this.showBackButton ? this._filterByTitle : this._dialogTitle;\n  }\n\n  /**\n   * Determines disabled state of the <code>Reset</code> button.\n   */\n  get _disableResetButton() {\n    return this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n  }\n  get _sortSetttingsAreInitial() {\n    let settingsAreInitial = true;\n    [\"sortBy\", \"sortOrder\"].forEach(sortList => {\n      this._currentSettings[sortList].forEach((item, index) => {\n        if (item.selected !== this._initialSettings[sortList][index].selected) {\n          settingsAreInitial = false;\n        }\n      });\n    });\n    return settingsAreInitial;\n  }\n  get _filteresAreInitial() {\n    let filtersAreInitial = true;\n    this._currentSettings.filters.forEach((filter, index) => {\n      for (let i = 0; i < filter.filterOptions.length; i++) {\n        if (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n          filtersAreInitial = false;\n        }\n      }\n    });\n    return filtersAreInitial;\n  }\n\n  /**\n   * Returns the current settings (current state of all lists).\n   */\n  get _settings() {\n    return {\n      sortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n      sortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n      filters: this.filterItems.map(item => {\n        return {\n          text: item.text,\n          selected: false,\n          filterOptions: item.values.map(optionValue => {\n            return {\n              text: optionValue.text,\n              selected: optionValue.selected\n            };\n          })\n        };\n      })\n    };\n  }\n  get initSortByItems() {\n    return this.sortItems.map((item, index) => {\n      return {\n        text: item.text,\n        selected: item.selected,\n        index\n      };\n    });\n  }\n  get initSortOrderItems() {\n    return [{\n      text: this._ascendingLabel,\n      selected: !this.sortDescending\n    }, {\n      text: this._descendingLabel,\n      selected: this.sortDescending\n    }];\n  }\n  get expandContent() {\n    return this._filterStepTwo || !this.hasPagination;\n  }\n  get isModeSort() {\n    return this._currentMode === ViewSettingsDialogMode.Sort;\n  }\n  get isModeFilter() {\n    return this._currentMode === ViewSettingsDialogMode.Filter;\n  }\n  get showBackButton() {\n    return this.isModeFilter && this._filterStepTwo;\n  }\n  get _sortOrderListDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n  }\n  get _sortByList() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n  }\n  get _dialogDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-dialog]\");\n  }\n\n  /**\n   * Shows the dialog.\n   * @public\n   */\n  show() {\n    if (!this._dialog) {\n      this._sortOrder = this._sortOrderListDomRef;\n      this._sortBy = this._sortByList;\n\n      // Sorting\n      this._initialSettings = this._settings;\n      this._currentSettings = this._settings;\n      this._confirmedSettings = this._settings;\n      this._dialog = this._dialogDomRef;\n    } else {\n      this._restoreSettings(this._confirmedSettings);\n    }\n    this.fireEvent(\"before-open\", {}, true, false);\n    this._dialog.show(true);\n    this._dialog.querySelector(\"[ui5-list]\").focusFirstItem();\n  }\n  _handleModeChange(event) {\n    this._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n  }\n  _handleFilterValueItemClick(event) {\n    // Update the component state\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      if (filter.selected) {\n        filter.filterOptions.forEach(option => {\n          if (option.text === event.detail.item.innerText) {\n            option.selected = !option.selected;\n          }\n        });\n      }\n      return filter;\n    });\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n  _navigateToFilters(event) {\n    this._filterStepTwo = false;\n  }\n  _changeCurrentFilter(event) {\n    this._filterStepTwo = true;\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      filter.selected = filter.text === event.detail.item.innerText;\n      return filter;\n    });\n  }\n\n  /**\n   * Closes the dialog.\n   */\n  close() {\n    this._dialog && this._dialog.close();\n  }\n\n  /**\n   * Sets focus on recently used control within the dialog.\n   */\n  _focusRecentlyUsedControl() {\n    if (!this._recentlyFocused || !Object.keys(this._recentlyFocused).length) {\n      return;\n    }\n    const recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n      recentlyFocusedItems = this._recentlyFocused.items,\n      slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n    if (recentlyFocusedSelectedItems.length) {\n      recentlyFocusedSelectedItems[0].focus();\n    } else if (slottedNodesExist) {\n      this._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n    }\n  }\n\n  /**\n   * Stores current settings as confirmed and fires <code>confirm</code> event.\n   */\n  _confirmSettings() {\n    this.close();\n    this._confirmedSettings = this._currentSettings;\n    this.fireEvent(\"confirm\", this.eventsParams);\n  }\n\n  /**\n   * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n   */\n  _cancelSettings() {\n    this._restoreSettings(this._confirmedSettings);\n    this.fireEvent(\"cancel\", this.eventsParams);\n    this.close();\n  }\n  get eventsParams() {\n    const _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n      _currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n      sortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n      sortDescending = !this._currentSettings.sortOrder[0].selected,\n      sortBy = _currentSortBySelected && _currentSortBySelected.text,\n      sortByElementIndex = _currentSortBySelected && _currentSortBySelected.index,\n      sortByItem = this.sortItems[sortByElementIndex];\n    return {\n      sortOrder,\n      sortDescending,\n      sortBy,\n      sortByItem,\n      filters: this.selectedFilters\n    };\n  }\n  get selectedFilters() {\n    const result = [];\n    this._currentSettings.filters.forEach(filter => {\n      const selectedOptions = [];\n      filter.filterOptions.forEach(option => {\n        if (option.selected) {\n          selectedOptions.push(option.text);\n        }\n      });\n      if (selectedOptions.length) {\n        result.push({});\n        result[result.length - 1][filter.text] = selectedOptions;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n   *\n   * @param {event} evt\n   */\n  _restoreConfirmedOnEscape(evt) {\n    if (evt.detail.escPressed) {\n      this._cancelSettings();\n      this._currentMode = \"Sort\";\n      this._filterStepTwo = false;\n    }\n  }\n\n  /**\n   * Resets the control settings to their initial state.\n   */\n  _resetSettings() {\n    this._restoreSettings(this._initialSettings);\n    this._recentlyFocused = this._sortOrder;\n    this._focusRecentlyUsedControl();\n  }\n\n  /**\n   * Sets current settings to ones passed as <code>settings</code> argument.\n   *\n   * @param {Object} settings\n   */\n  _restoreSettings(settings) {\n    this._currentSettings = JSON.parse(JSON.stringify(settings));\n    this._currentMode = ViewSettingsDialogMode.Sort;\n    this._filterStepTwo = false;\n  }\n\n  /**\n   * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n   */\n  _onSortOrderChange(event) {\n    this._recentlyFocused = this._sortOrder;\n    this._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n      item.selected = item.text === event.detail.item.innerText;\n      return item;\n    });\n\n    // Invalidate\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n\n  /**\n   * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n   */\n  _onSortByChange(event) {\n    const selectedItemIndex = Number(event.detail.item.getAttribute(\"data-ui5-external-action-item-index\"));\n    this._recentlyFocused = this._sortBy;\n    this._currentSettings.sortBy = this.initSortByItems.map((item, index) => {\n      item.selected = index === selectedItemIndex;\n      return item;\n    });\n    // Invalidate\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n\n  /**\n   * Sets a JavaScript object, as settings to the <code>ui5-view-settings-dialog</code>.\n   * This method can be used after the dialog is initially open, as the dialog need to set its initial settings.\n   * The <code>ui5-view-settings-dialog</code> throws an event called \"before-open\", this can be used as trigger point.\n   * The object should have the following format:\n   * <code>\n   *  {sortOrder: \"Ascending\", sortBy: \"Name\", filters: [{\"Filter 1\": [\"Some filter 1\", \"Some filter 2\"]}, {\"Filter 2\": [\"Some filter 4\"]}]}\n   * </code>\n    * @param {Object} settings - predefined settings.\n    * @param {string} settings.sortOrder - sort order\n    * @param {string} settings.sortBy - sort by\n    * @param {Array.<Object>} settings.filters - filters\n   * @public\n   */\n  setConfirmedSettings(settings) {\n    if (settings && this._dialog && !this._dialog.isOpen()) {\n      const tempSettings = JSON.parse(JSON.stringify(this._confirmedSettings));\n      if (settings.sortOrder) {\n        for (let i = 0; i < tempSettings.sortOrder.length; i++) {\n          if (tempSettings.sortOrder[i].text === settings.sortOrder) {\n            tempSettings.sortOrder[i].selected = true;\n          } else {\n            tempSettings.sortOrder[i].selected = false;\n          }\n        }\n      }\n      if (settings.sortBy) {\n        for (let i = 0; i < tempSettings.sortBy.length; i++) {\n          if (tempSettings.sortBy[i].text === settings.sortBy) {\n            tempSettings.sortBy[i].selected = true;\n          } else {\n            tempSettings.sortBy[i].selected = false;\n          }\n        }\n      }\n      if (settings.filters) {\n        const inputFilters = {};\n        for (let i = 0; i < settings.filters.length; i++) {\n          inputFilters[Object.keys(settings.filters[i])[0]] = settings.filters[i][Object.keys(settings.filters[i])[0]];\n        }\n        for (let i = 0; i < tempSettings.filters.length; i++) {\n          for (let j = 0; j < tempSettings.filters[i].filterOptions.length; j++) {\n            if (inputFilters[tempSettings.filters[i].text] && inputFilters[tempSettings.filters[i].text].indexOf(tempSettings.filters[i].filterOptions[j].text) > -1) {\n              tempSettings.filters[i].filterOptions[j].selected = true;\n            } else {\n              tempSettings.filters[i].filterOptions[j].selected = false;\n            }\n          }\n        }\n      }\n      this._confirmedSettings = JSON.parse(JSON.stringify(tempSettings));\n    }\n  }\n}\nViewSettingsDialog.define();\nexport default ViewSettingsDialog;","map":{"version":3,"names":["getI18nBundle","isPhone","litRender","UI5Element","Dialog","Button","Label","GroupHeaderListItem","List","StandardListItem","Title","SegmentedButton","SegmentedButtonItem","Bar","ViewSettingsDialogMode","VSD_DIALOG_TITLE_SORT","VSD_SUBMIT_BUTTON","VSD_CANCEL_BUTTON","VSD_RESET_BUTTON","VSD_SORT_ORDER","VSD_SORT_BY","VSD_ORDER_ASCENDING","VSD_ORDER_DESCENDING","VSD_FILTER_BY","ViewSettingsDialogTemplate","viewSettingsDialogCSS","metadata","tag","managedSlots","properties","sortDescending","type","Boolean","_recentlyFocused","Object","_initialSettings","_confirmedSettings","_currentSettings","_currentMode","defaultValue","Sort","_filterStepTwo","noAttribute","slots","sortItems","HTMLElement","filterItems","events","confirm","detail","sortOrder","String","sortBy","sortByItem","filters","Array","cancel","ViewSettingsDialog","constructor","onBeforeRendering","length","_setAdditionalTexts","shouldBuildSort","shouldBuildFilter","Filter","forEach","filter","index","selectedCount","i","values","filterOptions","selected","additionalText","render","dependencies","template","styles","onDefine","i18nBundle","_selectedFilter","hasPagination","_filterByTitle","getText","text","_dialogTitle","_okButtonLabel","_cancelButtonLabel","_resetButtonLabel","_ascendingLabel","_descendingLabel","_sortOrderLabel","_filterByLabel","_sortByLabel","_isPhone","_sortAscending","_title","showBackButton","_disableResetButton","_dialog","_sortSetttingsAreInitial","_filteresAreInitial","settingsAreInitial","sortList","item","filtersAreInitial","_settings","JSON","parse","stringify","initSortOrderItems","initSortByItems","map","optionValue","expandContent","isModeSort","isModeFilter","_sortOrderListDomRef","shadowRoot","querySelector","_sortByList","_dialogDomRef","show","_sortOrder","_sortBy","_restoreSettings","fireEvent","focusFirstItem","_handleModeChange","event","selectedItem","getAttribute","_handleFilterValueItemClick","option","innerText","_navigateToFilters","_changeCurrentFilter","close","_focusRecentlyUsedControl","keys","recentlyFocusedSelectedItems","getSelectedItems","recentlyFocusedItems","items","slottedNodesExist","assignedNodes","focus","focusItem","_confirmSettings","eventsParams","_cancelSettings","_currentSortOrderSelected","_currentSortBySelected","sortByElementIndex","selectedFilters","result","selectedOptions","push","_restoreConfirmedOnEscape","evt","escPressed","_resetSettings","settings","_onSortOrderChange","_onSortByChange","selectedItemIndex","Number","setConfirmedSettings","isOpen","tempSettings","inputFilters","j","indexOf","define"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js"],"sourcesContent":["import { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport Title from \"@ui5/webcomponents/dist/Title.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\n\nimport {\n\tVSD_DIALOG_TITLE_SORT,\n\tVSD_SUBMIT_BUTTON,\n\tVSD_CANCEL_BUTTON,\n\tVSD_RESET_BUTTON,\n\tVSD_SORT_ORDER,\n\tVSD_SORT_BY,\n\tVSD_ORDER_ASCENDING,\n\tVSD_ORDER_DESCENDING,\n\tVSD_FILTER_BY,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-view-settings-dialog\",\n\tmanagedSlots: true,\n\tproperties: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the initial sort order.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\t sortDescending: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Keeps recently focused list in order to focus it on next dialog open.\n\t\t *\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\t _recentlyFocused: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog before the initial open.\n\t\t *\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\t _initialSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog after confirmation.\n\t\t *\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\t _confirmedSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores current settings of the dialog.\n\t\t *\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\t _currentSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Defnies the current mode of the component.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_currentMode: {\n\t\t\ttype: ViewSettingsDialogMode,\n\t\t\tdefaultValue: ViewSettingsDialogMode.Sort,\n\t\t},\n\n\t\t/**\n\t\t * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_filterStepTwo: {\n\t\t\ttype: Boolean,\n\t\t\tnoAttribute: true,\n\t\t},\n\t},\n\tslots: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the list of items against which the user could sort data.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n\t\t * @slot sortItems\n\t\t * @public\n\t\t */\n\t\t sortItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\n\t\t/**\n\t\t * Defines the <code>filterItems</code> list.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n\t\t * @slot filterItems\n\t\t * @public\n\t\t */\n\t\tfilterItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\n\t\t/**\n\t\t * Fired when confirmation button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @param {HTMLElement} sortByItem The currently selected <code>ui5-sort-item</code>.\n\t\t * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n\t\t * @param {Array} filterItems The selected filters items.\n\t\t * @public\n\t\t */\n\t\tconfirm: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tsortByItem: { type: HTMLElement },\n\t\t\t\tsortDescending: { type: Boolean },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\n\t\t/**\n\t\t * Fired when cancel button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @param {HTMLElement} sortByItem The currently selected <code>ui5-sort-item</code>.\n\t\t * @param {Boolean} sortDescending The selected sort order (true = descending, false = ascending).\n\t\t * @param {Array} filterItems The selected filters items.\n\t\t * @public\n\t\t */\n\t\tcancel: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tsortByItem: { type: HTMLElement },\n\t\t\t\tsortDescending: { type: Boolean },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\n\t\t/**\n\t\t * Fired before the component is opened. <b>This event does not bubble.</b>\n\t\t *\n\t\t * @public\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#before-open\n\t\t */\n\t\t\"before-open\": {},\n\t},\n};\n\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents-fiori/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-view-settings-dialog\n * @appenddocs SortItem FilterItem FilterItemOption\n * @since 1.0.0-rc.16\n * @public\n */\nclass ViewSettingsDialog extends UI5Element {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._currentSettings = {\n\t\t\tsortOrder: [],\n\t\t\tsortBy: [],\n\t\t\tfilters: [],\n\t\t};\n\t}\n\n\tonBeforeRendering() {\n\t\tif (this._currentSettings.filters && this._currentSettings.filters.length) {\n\t\t\tthis._setAdditionalTexts();\n\t\t}\n\n\t\tif (!this.shouldBuildSort && this.shouldBuildFilter) {\n\t\t\tthis._currentMode = ViewSettingsDialogMode.Filter;\n\t\t}\n\t}\n\n\t_setAdditionalTexts() {\n\t\t// Add the additional text to the filter options\n\t\tthis.filterItems.forEach((filter, index) => {\n\t\t\tlet selectedCount = 0;\n\t\t\tfor (let i = 0; i < filter.values.length; i++) {\n\t\t\t\tif (this._currentSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tselectedCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfilter.additionalText = !selectedCount ? \"\" : selectedCount;\n\t\t});\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [\n\t\t\tBar,\n\t\t\tButton,\n\t\t\tTitle,\n\t\t\tDialog,\n\t\t\tLabel,\n\t\t\tList,\n\t\t\tStandardListItem,\n\t\t\tGroupHeaderListItem,\n\t\t\tSegmentedButton,\n\t\t\tSegmentedButtonItem,\n\t\t];\n\t}\n\n\tstatic get template() {\n\t\treturn ViewSettingsDialogTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn viewSettingsDialogCSS;\n\t}\n\n\tstatic async onDefine() {\n\t\tViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n\t}\n\n\tget _selectedFilter() {\n\t\tfor (let i = 0; i < this._currentSettings.filters.length; i++) {\n\t\t\tif (this._currentSettings.filters[i].selected) {\n\t\t\t\treturn this._currentSettings.filters[i];\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tget shouldBuildSort() {\n\t\treturn !!this.sortItems.length;\n\t}\n\n\tget shouldBuildFilter() {\n\t\treturn !!this.filterItems.length;\n\t}\n\n\tget hasPagination() {\n\t\treturn this.shouldBuildSort && this.shouldBuildFilter;\n\t}\n\n\tget _filterByTitle() {\n\t\treturn `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${this._selectedFilter.text}`;\n\t}\n\n\tget _dialogTitle() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_DIALOG_TITLE_SORT);\n\t}\n\n\tget _okButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n\t}\n\n\tget _cancelButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n\t}\n\n\tget _resetButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n\t}\n\n\tget _ascendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n\t}\n\n\tget _descendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n\t}\n\n\tget _sortOrderLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n\t}\n\n\tget _filterByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n\t}\n\n\tget _sortByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n\t}\n\n\tget _isPhone() {\n\t\treturn isPhone();\n\t}\n\n\tget _sortAscending() {\n\t\treturn !this.sortDescending;\n\t}\n\n\tget _title() {\n\t\treturn this.showBackButton\n\t\t\t? this._filterByTitle\n\t\t\t: this._dialogTitle;\n\t}\n\n\t/**\n\t * Determines disabled state of the <code>Reset</code> button.\n\t */\n\tget _disableResetButton() {\n\t\treturn this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n\t}\n\n\tget _sortSetttingsAreInitial() {\n\t\tlet settingsAreInitial = true;\n\t\t[\"sortBy\", \"sortOrder\"].forEach(sortList => {\n\t\t\tthis._currentSettings[sortList].forEach((item, index) => {\n\t\t\t\tif (item.selected !== this._initialSettings[sortList][index].selected) {\n\t\t\t\t\tsettingsAreInitial = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn settingsAreInitial;\n\t}\n\n\tget _filteresAreInitial() {\n\t\tlet filtersAreInitial = true;\n\t\tthis._currentSettings.filters.forEach((filter, index) => {\n\t\t\tfor (let i = 0; i < filter.filterOptions.length; i++) {\n\t\t\t\tif (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tfiltersAreInitial = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn filtersAreInitial;\n\t}\n\n\t/**\n\t * Returns the current settings (current state of all lists).\n\t */\n\tget _settings() {\n\t\treturn {\n\t\t\tsortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n\t\t\tsortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n\t\t\tfilters: this.filterItems.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: item.text,\n\t\t\t\t\tselected: false,\n\t\t\t\t\tfilterOptions: item.values.map(optionValue => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: optionValue.text,\n\t\t\t\t\t\t\tselected: optionValue.selected,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tget initSortByItems() {\n\t\treturn this.sortItems.map((item, index) => {\n\t\t\treturn {\n\t\t\t\ttext: item.text,\n\t\t\t\tselected: item.selected,\n\t\t\t\tindex,\n\t\t\t};\n\t\t});\n\t}\n\n\tget initSortOrderItems() {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: this._ascendingLabel,\n\t\t\t\tselected: !this.sortDescending,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: this._descendingLabel,\n\t\t\t\tselected: this.sortDescending,\n\t\t\t},\n\t\t];\n\t}\n\n\tget expandContent() {\n\t\treturn this._filterStepTwo || !this.hasPagination;\n\t}\n\n\tget isModeSort() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Sort;\n\t}\n\n\tget isModeFilter() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Filter;\n\t}\n\n\tget showBackButton() {\n\t\treturn this.isModeFilter && this._filterStepTwo;\n\t}\n\n\tget _sortOrderListDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n\t}\n\n\tget _sortByList() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n\t}\n\n\tget _dialogDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-dialog]\");\n\t}\n\n\t/**\n\t * Shows the dialog.\n\t * @public\n\t */\n\tshow() {\n\t\tif (!this._dialog) {\n\t\t\tthis._sortOrder = this._sortOrderListDomRef;\n\t\t\tthis._sortBy = this._sortByList;\n\n\t\t\t// Sorting\n\t\t\tthis._initialSettings = this._settings;\n\t\t\tthis._currentSettings = this._settings;\n\t\t\tthis._confirmedSettings = this._settings;\n\n\t\t\tthis._dialog = this._dialogDomRef;\n\t\t} else {\n\t\t\tthis._restoreSettings(this._confirmedSettings);\n\t\t}\n\n\t\tthis.fireEvent(\"before-open\", {}, true, false);\n\t\tthis._dialog.show(true);\n\n\t\tthis._dialog.querySelector(\"[ui5-list]\").focusFirstItem();\n\t}\n\n\t_handleModeChange(event) {\n\t\tthis._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n\t}\n\n\t_handleFilterValueItemClick(event) {\n\t\t// Update the component state\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tif (filter.selected) {\n\t\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\t\tif (option.text === event.detail.item.innerText) {\n\t\t\t\t\t\toption.selected = !option.selected;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn filter;\n\t\t});\n\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t_navigateToFilters(event) {\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t_changeCurrentFilter(event) {\n\t\tthis._filterStepTwo = true;\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tfilter.selected = filter.text === event.detail.item.innerText;\n\t\t\treturn filter;\n\t\t});\n\t}\n\n\t/**\n\t * Closes the dialog.\n\t */\n\tclose() {\n\t\tthis._dialog && this._dialog.close();\n\t}\n\n\t/**\n\t * Sets focus on recently used control within the dialog.\n\t */\n\t_focusRecentlyUsedControl() {\n\t\tif (!this._recentlyFocused || !Object.keys(this._recentlyFocused).length) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n\t\t\t  recentlyFocusedItems = this._recentlyFocused.items,\n\t\t\t  slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n\n\t\tif (recentlyFocusedSelectedItems.length) {\n\t\t\trecentlyFocusedSelectedItems[0].focus();\n\t\t} else if (slottedNodesExist) {\n\t\t\tthis._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n\t\t}\n\t}\n\n\t/**\n\t * Stores current settings as confirmed and fires <code>confirm</code> event.\n\t */\n\t_confirmSettings() {\n\t\tthis.close();\n\t\tthis._confirmedSettings = this._currentSettings;\n\n\t\tthis.fireEvent(\"confirm\", this.eventsParams);\n\t}\n\n\t/**\n\t * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n\t */\n\t_cancelSettings() {\n\t\tthis._restoreSettings(this._confirmedSettings);\n\n\t\tthis.fireEvent(\"cancel\", this.eventsParams);\n\t\tthis.close();\n\t}\n\n\tget eventsParams() {\n\t\tconst _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n\t\t\t_currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n\t\t\tsortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n\t\t\tsortDescending = !this._currentSettings.sortOrder[0].selected,\n\t\t\tsortBy = _currentSortBySelected && _currentSortBySelected.text,\n\t\t\tsortByElementIndex = _currentSortBySelected && _currentSortBySelected.index,\n\t\t\tsortByItem = this.sortItems[sortByElementIndex];\n\t\treturn {\n\t\t\tsortOrder,\n\t\t\tsortDescending,\n\t\t\tsortBy,\n\t\t\tsortByItem,\n\t\t\tfilters: this.selectedFilters,\n\t\t};\n\t}\n\n\tget selectedFilters() {\n\t\tconst result = [];\n\n\t\tthis._currentSettings.filters.forEach(filter => {\n\t\t\tconst selectedOptions = [];\n\n\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\tif (option.selected) {\n\t\t\t\t\tselectedOptions.push(option.text);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (selectedOptions.length) {\n\t\t\t\tresult.push({});\n\t\t\t\tresult[result.length - 1][filter.text] = selectedOptions;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n\t *\n\t * @param {event} evt\n\t */\n\t_restoreConfirmedOnEscape(evt) {\n\t\tif (evt.detail.escPressed) {\n\t\t\tthis._cancelSettings();\n\t\t\tthis._currentMode = \"Sort\";\n\t\t\tthis._filterStepTwo = false;\n\t\t}\n\t}\n\n\t/**\n\t * Resets the control settings to their initial state.\n\t */\n\t _resetSettings() {\n\t\tthis._restoreSettings(this._initialSettings);\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._focusRecentlyUsedControl();\n\t}\n\n\t/**\n\t * Sets current settings to ones passed as <code>settings</code> argument.\n\t *\n\t * @param {Object} settings\n\t */\n\t_restoreSettings(settings) {\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(settings));\n\t\tthis._currentMode = ViewSettingsDialogMode.Sort;\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t/**\n\t * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n\t */\n\t_onSortOrderChange(event) {\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n\t\t\titem.selected = item.text === event.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n\t */\n\t _onSortByChange(event) {\n\t\tconst selectedItemIndex = Number(event.detail.item.getAttribute(\"data-ui5-external-action-item-index\"));\n\t\tthis._recentlyFocused = this._sortBy;\n\t\tthis._currentSettings.sortBy = this.initSortByItems.map((item, index) => {\n\t\t\titem.selected = index === selectedItemIndex;\n\t\t\treturn item;\n\t\t});\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Sets a JavaScript object, as settings to the <code>ui5-view-settings-dialog</code>.\n\t * This method can be used after the dialog is initially open, as the dialog need to set its initial settings.\n\t * The <code>ui5-view-settings-dialog</code> throws an event called \"before-open\", this can be used as trigger point.\n\t * The object should have the following format:\n\t * <code>\n\t *  {sortOrder: \"Ascending\", sortBy: \"Name\", filters: [{\"Filter 1\": [\"Some filter 1\", \"Some filter 2\"]}, {\"Filter 2\": [\"Some filter 4\"]}]}\n\t * </code>\n   * @param {Object} settings - predefined settings.\n   * @param {string} settings.sortOrder - sort order\n   * @param {string} settings.sortBy - sort by\n   * @param {Array.<Object>} settings.filters - filters\n\t * @public\n\t */\n\tsetConfirmedSettings(settings) {\n\t\tif (settings && this._dialog && !this._dialog.isOpen()) {\n\t\t\tconst tempSettings = JSON.parse(JSON.stringify(this._confirmedSettings));\n\t\t\tif (settings.sortOrder) {\n\t\t\t\tfor (let i = 0; i < tempSettings.sortOrder.length; i++) {\n\t\t\t\t\tif (tempSettings.sortOrder[i].text === settings.sortOrder) {\n\t\t\t\t\t\ttempSettings.sortOrder[i].selected = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempSettings.sortOrder[i].selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (settings.sortBy) {\n\t\t\t\tfor (let i = 0; i < tempSettings.sortBy.length; i++) {\n\t\t\t\t\tif (tempSettings.sortBy[i].text === settings.sortBy) {\n\t\t\t\t\t\ttempSettings.sortBy[i].selected = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempSettings.sortBy[i].selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (settings.filters) {\n\t\t\t\tconst inputFilters = {};\n\t\t\t\tfor (let i = 0; i < settings.filters.length; i++) {\n\t\t\t\t\tinputFilters[Object.keys(settings.filters[i])[0]] = settings.filters[i][Object.keys(settings.filters[i])[0]];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < tempSettings.filters.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < tempSettings.filters[i].filterOptions.length; j++) {\n\t\t\t\t\t\tif (inputFilters[tempSettings.filters[i].text] && inputFilters[tempSettings.filters[i].text].indexOf(tempSettings.filters[i].filterOptions[j].text) > -1) {\n\t\t\t\t\t\t\ttempSettings.filters[i].filterOptions[j].selected = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttempSettings.filters[i].filterOptions[j].selected = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._confirmedSettings = JSON.parse(JSON.stringify(tempSettings));\n\t\t}\n\t}\n}\n\nViewSettingsDialog.define();\n\nexport default ViewSettingsDialog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}