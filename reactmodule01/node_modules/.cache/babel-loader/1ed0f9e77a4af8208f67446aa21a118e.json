{"ast":null,"code":"import InvisibleMessageMode from \"../types/InvisibleMessageMode.js\";\nimport getSingletonElementInstance from \"./getSingletonElementInstance.js\";\nimport { attachBoot } from \"../Boot.js\";\nlet politeSpan;\nlet assertiveSpan;\nconst setOutOfViewportStyles = el => {\n  el.style.position = \"absolute\";\n  el.style.clip = \"rect(1px,1px,1px,1px)\";\n  el.style.userSelect = \"none\";\n  el.style.left = \"-1000px\";\n  el.style.top = \"-1000px\";\n  el.style.pointerEvents = \"none\";\n};\nattachBoot(() => {\n  if (politeSpan && assertiveSpan) {\n    return;\n  }\n  politeSpan = document.createElement(\"span\");\n  assertiveSpan = document.createElement(\"span\");\n  politeSpan.classList.add(\"ui5-invisiblemessage-polite\");\n  assertiveSpan.classList.add(\"ui5-invisiblemessage-assertive\");\n  politeSpan.setAttribute(\"aria-live\", \"polite\");\n  assertiveSpan.setAttribute(\"aria-live\", \"assertive\");\n  politeSpan.setAttribute(\"role\", \"alert\");\n  assertiveSpan.setAttribute(\"role\", \"alert\");\n  setOutOfViewportStyles(politeSpan);\n  setOutOfViewportStyles(assertiveSpan);\n  getSingletonElementInstance(\"ui5-static-area\").appendChild(politeSpan);\n  getSingletonElementInstance(\"ui5-static-area\").appendChild(assertiveSpan);\n});\n\n/**\n * Inserts the string into the respective span, depending on the mode provided.\n *\n * @param {string} message String to be announced by the screen reader.\n * @param {sap.ui.core.InvisibleMessageMode} mode The mode to be inserted in the aria-live attribute.\n * @public\n */\nconst announce = (message, mode) => {\n  // If no type is presented, fallback to polite announcement.\n  const span = mode === InvisibleMessageMode.Assertive ? assertiveSpan : politeSpan;\n\n  // Set textContent to empty string in order to trigger screen reader's announcement.\n  span.textContent = \"\";\n  span.textContent = message;\n  if (mode !== InvisibleMessageMode.Assertive && mode !== InvisibleMessageMode.Polite) {\n    console.warn(`You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".`); // eslint-disable-line\n  }\n\n  // clear the span in order to avoid reading it out while in JAWS reading node\n  setTimeout(() => {\n    // ensure that we clear the text node only if no announce is made in the meantime\n    if (span.textContent === message) {\n      span.textContent = \"\";\n    }\n  }, 3000);\n};\nexport default announce;","map":{"version":3,"names":["InvisibleMessageMode","getSingletonElementInstance","attachBoot","politeSpan","assertiveSpan","setOutOfViewportStyles","el","style","position","clip","userSelect","left","top","pointerEvents","document","createElement","classList","add","setAttribute","appendChild","announce","message","mode","span","Assertive","textContent","Polite","console","warn","setTimeout"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/util/InvisibleMessage.js"],"sourcesContent":["import InvisibleMessageMode from \"../types/InvisibleMessageMode.js\";\nimport getSingletonElementInstance from \"./getSingletonElementInstance.js\";\nimport { attachBoot } from \"../Boot.js\";\n\nlet politeSpan;\nlet assertiveSpan;\n\nconst setOutOfViewportStyles = el => {\n\tel.style.position = \"absolute\";\n\tel.style.clip = \"rect(1px,1px,1px,1px)\";\n\tel.style.userSelect = \"none\";\n\tel.style.left = \"-1000px\";\n\tel.style.top = \"-1000px\";\n\tel.style.pointerEvents = \"none\";\n};\n\nattachBoot(() => {\n\tif (politeSpan && assertiveSpan) {\n\t\treturn;\n\t}\n\n\tpoliteSpan = document.createElement(\"span\");\n\tassertiveSpan = document.createElement(\"span\");\n\n\tpoliteSpan.classList.add(\"ui5-invisiblemessage-polite\");\n\tassertiveSpan.classList.add(\"ui5-invisiblemessage-assertive\");\n\n\tpoliteSpan.setAttribute(\"aria-live\", \"polite\");\n\tassertiveSpan.setAttribute(\"aria-live\", \"assertive\");\n\n\tpoliteSpan.setAttribute(\"role\", \"alert\");\n\tassertiveSpan.setAttribute(\"role\", \"alert\");\n\n\tsetOutOfViewportStyles(politeSpan);\n\tsetOutOfViewportStyles(assertiveSpan);\n\n\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(politeSpan);\n\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(assertiveSpan);\n});\n\n/**\n * Inserts the string into the respective span, depending on the mode provided.\n *\n * @param {string} message String to be announced by the screen reader.\n * @param {sap.ui.core.InvisibleMessageMode} mode The mode to be inserted in the aria-live attribute.\n * @public\n */\nconst announce = (message, mode) => {\n\t// If no type is presented, fallback to polite announcement.\n\tconst span = mode === InvisibleMessageMode.Assertive ? assertiveSpan : politeSpan;\n\n\t// Set textContent to empty string in order to trigger screen reader's announcement.\n\tspan.textContent = \"\";\n\tspan.textContent = message;\n\n\tif (mode !== InvisibleMessageMode.Assertive && mode !== InvisibleMessageMode.Polite) {\n\t\tconsole.warn(`You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".`); // eslint-disable-line\n\t}\n\n\t// clear the span in order to avoid reading it out while in JAWS reading node\n\tsetTimeout(() => {\n\t\t// ensure that we clear the text node only if no announce is made in the meantime\n\t\tif (span.textContent === message) {\n\t\t\tspan.textContent = \"\";\n\t\t}\n\t}, 3000);\n};\n\nexport default announce;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,kCAAkC;AACnE,OAAOC,2BAA2B,MAAM,kCAAkC;AAC1E,SAASC,UAAU,QAAQ,YAAY;AAEvC,IAAIC,UAAU;AACd,IAAIC,aAAa;AAEjB,MAAMC,sBAAsB,GAAGC,EAAE,IAAI;EACpCA,EAAE,CAACC,KAAK,CAACC,QAAQ,GAAG,UAAU;EAC9BF,EAAE,CAACC,KAAK,CAACE,IAAI,GAAG,uBAAuB;EACvCH,EAAE,CAACC,KAAK,CAACG,UAAU,GAAG,MAAM;EAC5BJ,EAAE,CAACC,KAAK,CAACI,IAAI,GAAG,SAAS;EACzBL,EAAE,CAACC,KAAK,CAACK,GAAG,GAAG,SAAS;EACxBN,EAAE,CAACC,KAAK,CAACM,aAAa,GAAG,MAAM;AAChC,CAAC;AAEDX,UAAU,CAAC,MAAM;EAChB,IAAIC,UAAU,IAAIC,aAAa,EAAE;IAChC;EACD;EAEAD,UAAU,GAAGW,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAC3CX,aAAa,GAAGU,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EAE9CZ,UAAU,CAACa,SAAS,CAACC,GAAG,CAAC,6BAA6B,CAAC;EACvDb,aAAa,CAACY,SAAS,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAE7Dd,UAAU,CAACe,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC;EAC9Cd,aAAa,CAACc,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC;EAEpDf,UAAU,CAACe,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;EACxCd,aAAa,CAACc,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;EAE3Cb,sBAAsB,CAACF,UAAU,CAAC;EAClCE,sBAAsB,CAACD,aAAa,CAAC;EAErCH,2BAA2B,CAAC,iBAAiB,CAAC,CAACkB,WAAW,CAAChB,UAAU,CAAC;EACtEF,2BAA2B,CAAC,iBAAiB,CAAC,CAACkB,WAAW,CAACf,aAAa,CAAC;AAC1E,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgB,QAAQ,GAAG,CAACC,OAAO,EAAEC,IAAI,KAAK;EACnC;EACA,MAAMC,IAAI,GAAGD,IAAI,KAAKtB,oBAAoB,CAACwB,SAAS,GAAGpB,aAAa,GAAGD,UAAU;;EAEjF;EACAoB,IAAI,CAACE,WAAW,GAAG,EAAE;EACrBF,IAAI,CAACE,WAAW,GAAGJ,OAAO;EAE1B,IAAIC,IAAI,KAAKtB,oBAAoB,CAACwB,SAAS,IAAIF,IAAI,KAAKtB,oBAAoB,CAAC0B,MAAM,EAAE;IACpFC,OAAO,CAACC,IAAI,CAAE,0IAAyI,CAAC,CAAC,CAAC;EAC3J;;EAEA;EACAC,UAAU,CAAC,MAAM;IAChB;IACA,IAAIN,IAAI,CAACE,WAAW,KAAKJ,OAAO,EAAE;MACjCE,IAAI,CAACE,WAAW,GAAG,EAAE;IACtB;EACD,CAAC,EAAE,IAAI,CAAC;AACT,CAAC;AAED,eAAeL,QAAQ"},"metadata":{},"sourceType":"module"}