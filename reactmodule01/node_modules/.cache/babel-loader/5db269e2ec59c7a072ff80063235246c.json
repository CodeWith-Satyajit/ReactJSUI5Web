{"ast":null,"code":"import { useEffect } from 'react';\nimport { TableSelectionBehavior, TableSelectionMode } from '../../../enums';\nconst getParentIndicesRecursive = rowId => {\n  const parentIndices = {};\n  const getParentIndices = internalRowId => {\n    const lastDotIndex = internalRowId.lastIndexOf('.');\n    if (~lastDotIndex) {\n      const parentRowId = internalRowId.slice(0, lastDotIndex);\n      if (!parentIndices[parentRowId]) {\n        parentIndices[parentRowId] = true;\n        getParentIndices(parentRowId);\n      }\n    }\n  };\n  getParentIndices(rowId);\n  return parentIndices;\n};\n/**\n * A plugin hook that marks parent rows as indeterminate if a child row is selected in `MultiSelect` mode.\n * When using this hook, it is recommended to also select all sub-rows when selecting a row. (`reactTableOptions={{ selectSubRows: true }}`)\n */\nexport const useIndeterminateRowSelection = () => {\n  const toggleRowProps = (rowProps, _ref) => {\n    let {\n      row,\n      instance\n    } = _ref;\n    var _a, _b, _c;\n    let indeterminate;\n    if (instance.isAllRowsSelected) {\n      indeterminate = false;\n    } else {\n      indeterminate = (_c = (_b = (_a = instance === null || instance === void 0 ? void 0 : instance.state) === null || _a === void 0 ? void 0 : _a.indeterminateRows) === null || _b === void 0 ? void 0 : _b[row.id]) !== null && _c !== void 0 ? _c : false;\n    }\n    return [rowProps, {\n      indeterminate: indeterminate,\n      checked: indeterminate ? true : rowProps.checked\n    }];\n  };\n  const stateReducer = (newState, action, prevState, instance) => {\n    var _a;\n    if (action.type === 'INDETERMINATE_ROW_IDS') {\n      if (action.payload === 'reset') {\n        return Object.assign(Object.assign({}, newState), {\n          indeterminateRows: {}\n        });\n      }\n      let indeterminateRows = {};\n      const allSelectedRows = {};\n      let allSelected = true;\n      let currentDepth = -1;\n      (_a = instance.flatRows) === null || _a === void 0 ? void 0 : _a.filter(item => !item.original.emptyRow).sort((a, b) => b.id.localeCompare(a.id)).map(item => {\n        if (currentDepth === -1) {\n          currentDepth = item.depth;\n        } else if (currentDepth !== item.depth) {\n          currentDepth = item.depth;\n          if (allSelected && newState.selectedRowIds[item.id]) {\n            allSelectedRows[item.id] = true;\n            delete indeterminateRows[item.id];\n          }\n          allSelected = true;\n        }\n        if (newState.selectedRowIds[item.id]) {\n          const parentRowId = item.id.slice(0, item.id.lastIndexOf('.'));\n          if (parentRowId) {\n            indeterminateRows = Object.assign(Object.assign({}, indeterminateRows), getParentIndicesRecursive(item.id));\n          }\n        } else {\n          allSelected = false;\n        }\n        return item;\n      });\n      return Object.assign(Object.assign({}, newState), {\n        indeterminateRows: indeterminateRows\n      });\n    }\n  };\n  const useInstanceAfterData = instance => {\n    const {\n      data,\n      dispatch,\n      state: {\n        selectedRowIds,\n        indeterminateRows\n      },\n      webComponentsReactProperties: {\n        selectionMode,\n        selectionBehavior,\n        isTreeTable\n      }\n    } = instance;\n    useEffect(() => {\n      if (isTreeTable && selectionMode === TableSelectionMode.MultiSelect && selectionBehavior !== TableSelectionBehavior.RowOnly) {\n        dispatch({\n          type: 'INDETERMINATE_ROW_IDS'\n        });\n      } else if (typeof indeterminateRows === 'object' && Object.keys(indeterminateRows).length) {\n        dispatch({\n          type: 'INDETERMINATE_ROW_IDS',\n          payload: 'reset'\n        });\n      }\n    }, [data, selectedRowIds, isTreeTable, selectionMode, selectionBehavior]);\n  };\n  const useIndeterminate = hooks => {\n    hooks.getToggleRowSelectedProps.push(toggleRowProps);\n    hooks.stateReducers.push(stateReducer);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n  };\n  useIndeterminate.pluginName = 'useIndeterminate';\n  return useIndeterminate;\n};","map":{"version":3,"names":["useEffect","TableSelectionBehavior","TableSelectionMode","getParentIndicesRecursive","rowId","parentIndices","getParentIndices","internalRowId","lastDotIndex","lastIndexOf","parentRowId","slice","useIndeterminateRowSelection","toggleRowProps","rowProps","row","instance","_a","_b","_c","indeterminate","isAllRowsSelected","state","indeterminateRows","id","checked","stateReducer","newState","action","prevState","type","payload","Object","assign","allSelectedRows","allSelected","currentDepth","flatRows","filter","item","original","emptyRow","sort","a","b","localeCompare","map","depth","selectedRowIds","useInstanceAfterData","data","dispatch","webComponentsReactProperties","selectionMode","selectionBehavior","isTreeTable","MultiSelect","RowOnly","keys","length","useIndeterminate","hooks","getToggleRowSelectedProps","push","stateReducers","pluginName"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/pluginHooks/useIndeterminateRowSelection.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { TableSelectionBehavior, TableSelectionMode } from '../../../enums';\nconst getParentIndicesRecursive = (rowId) => {\n    const parentIndices = {};\n    const getParentIndices = (internalRowId) => {\n        const lastDotIndex = internalRowId.lastIndexOf('.');\n        if (~lastDotIndex) {\n            const parentRowId = internalRowId.slice(0, lastDotIndex);\n            if (!parentIndices[parentRowId]) {\n                parentIndices[parentRowId] = true;\n                getParentIndices(parentRowId);\n            }\n        }\n    };\n    getParentIndices(rowId);\n    return parentIndices;\n};\n/**\n * A plugin hook that marks parent rows as indeterminate if a child row is selected in `MultiSelect` mode.\n * When using this hook, it is recommended to also select all sub-rows when selecting a row. (`reactTableOptions={{ selectSubRows: true }}`)\n */\nexport const useIndeterminateRowSelection = () => {\n    const toggleRowProps = (rowProps, { row, instance }) => {\n        var _a, _b, _c;\n        let indeterminate;\n        if (instance.isAllRowsSelected) {\n            indeterminate = false;\n        }\n        else {\n            indeterminate = (_c = (_b = (_a = instance === null || instance === void 0 ? void 0 : instance.state) === null || _a === void 0 ? void 0 : _a.indeterminateRows) === null || _b === void 0 ? void 0 : _b[row.id]) !== null && _c !== void 0 ? _c : false;\n        }\n        return [\n            rowProps,\n            {\n                indeterminate: indeterminate,\n                checked: indeterminate ? true : rowProps.checked\n            }\n        ];\n    };\n    const stateReducer = (newState, action, prevState, instance) => {\n        var _a;\n        if (action.type === 'INDETERMINATE_ROW_IDS') {\n            if (action.payload === 'reset') {\n                return Object.assign(Object.assign({}, newState), { indeterminateRows: {} });\n            }\n            let indeterminateRows = {};\n            const allSelectedRows = {};\n            let allSelected = true;\n            let currentDepth = -1;\n            (_a = instance.flatRows) === null || _a === void 0 ? void 0 : _a.filter((item) => !item.original.emptyRow).sort((a, b) => b.id.localeCompare(a.id)).map((item) => {\n                if (currentDepth === -1) {\n                    currentDepth = item.depth;\n                }\n                else if (currentDepth !== item.depth) {\n                    currentDepth = item.depth;\n                    if (allSelected && newState.selectedRowIds[item.id]) {\n                        allSelectedRows[item.id] = true;\n                        delete indeterminateRows[item.id];\n                    }\n                    allSelected = true;\n                }\n                if (newState.selectedRowIds[item.id]) {\n                    const parentRowId = item.id.slice(0, item.id.lastIndexOf('.'));\n                    if (parentRowId) {\n                        indeterminateRows = Object.assign(Object.assign({}, indeterminateRows), getParentIndicesRecursive(item.id));\n                    }\n                }\n                else {\n                    allSelected = false;\n                }\n                return item;\n            });\n            return Object.assign(Object.assign({}, newState), { indeterminateRows: indeterminateRows });\n        }\n    };\n    const useInstanceAfterData = (instance) => {\n        const { data, dispatch, state: { selectedRowIds, indeterminateRows }, webComponentsReactProperties: { selectionMode, selectionBehavior, isTreeTable } } = instance;\n        useEffect(() => {\n            if (isTreeTable &&\n                selectionMode === TableSelectionMode.MultiSelect &&\n                selectionBehavior !== TableSelectionBehavior.RowOnly) {\n                dispatch({ type: 'INDETERMINATE_ROW_IDS' });\n            }\n            else if (typeof indeterminateRows === 'object' && Object.keys(indeterminateRows).length) {\n                dispatch({ type: 'INDETERMINATE_ROW_IDS', payload: 'reset' });\n            }\n        }, [data, selectedRowIds, isTreeTable, selectionMode, selectionBehavior]);\n    };\n    const useIndeterminate = (hooks) => {\n        hooks.getToggleRowSelectedProps.push(toggleRowProps);\n        hooks.stateReducers.push(stateReducer);\n        hooks.useInstanceAfterData.push(useInstanceAfterData);\n    };\n    useIndeterminate.pluginName = 'useIndeterminate';\n    return useIndeterminate;\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,sBAAsB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAC3E,MAAMC,yBAAyB,GAAIC,KAAK,IAAK;EACzC,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxB,MAAMC,gBAAgB,GAAIC,aAAa,IAAK;IACxC,MAAMC,YAAY,GAAGD,aAAa,CAACE,WAAW,CAAC,GAAG,CAAC;IACnD,IAAI,CAACD,YAAY,EAAE;MACf,MAAME,WAAW,GAAGH,aAAa,CAACI,KAAK,CAAC,CAAC,EAAEH,YAAY,CAAC;MACxD,IAAI,CAACH,aAAa,CAACK,WAAW,CAAC,EAAE;QAC7BL,aAAa,CAACK,WAAW,CAAC,GAAG,IAAI;QACjCJ,gBAAgB,CAACI,WAAW,CAAC;MACjC;IACJ;EACJ,CAAC;EACDJ,gBAAgB,CAACF,KAAK,CAAC;EACvB,OAAOC,aAAa;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,MAAMO,4BAA4B,GAAG,MAAM;EAC9C,MAAMC,cAAc,GAAG,CAACC,QAAQ,WAAwB;IAAA,IAAtB;MAAEC,GAAG;MAAEC;IAAS,CAAC;IAC/C,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACd,IAAIC,aAAa;IACjB,IAAIJ,QAAQ,CAACK,iBAAiB,EAAE;MAC5BD,aAAa,GAAG,KAAK;IACzB,CAAC,MACI;MACDA,aAAa,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGD,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACM,KAAK,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,iBAAiB,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACH,GAAG,CAACS,EAAE,CAAC,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;IAC5P;IACA,OAAO,CACHL,QAAQ,EACR;MACIM,aAAa,EAAEA,aAAa;MAC5BK,OAAO,EAAEL,aAAa,GAAG,IAAI,GAAGN,QAAQ,CAACW;IAC7C,CAAC,CACJ;EACL,CAAC;EACD,MAAMC,YAAY,GAAG,CAACC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEb,QAAQ,KAAK;IAC5D,IAAIC,EAAE;IACN,IAAIW,MAAM,CAACE,IAAI,KAAK,uBAAuB,EAAE;MACzC,IAAIF,MAAM,CAACG,OAAO,KAAK,OAAO,EAAE;QAC5B,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,QAAQ,CAAC,EAAE;UAAEJ,iBAAiB,EAAE,CAAC;QAAE,CAAC,CAAC;MAChF;MACA,IAAIA,iBAAiB,GAAG,CAAC,CAAC;MAC1B,MAAMW,eAAe,GAAG,CAAC,CAAC;MAC1B,IAAIC,WAAW,GAAG,IAAI;MACtB,IAAIC,YAAY,GAAG,CAAC,CAAC;MACrB,CAACnB,EAAE,GAAGD,QAAQ,CAACqB,QAAQ,MAAM,IAAI,IAAIpB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACqB,MAAM,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACpB,EAAE,CAACqB,aAAa,CAACF,CAAC,CAACnB,EAAE,CAAC,CAAC,CAACsB,GAAG,CAAEP,IAAI,IAAK;QAC9J,IAAIH,YAAY,KAAK,CAAC,CAAC,EAAE;UACrBA,YAAY,GAAGG,IAAI,CAACQ,KAAK;QAC7B,CAAC,MACI,IAAIX,YAAY,KAAKG,IAAI,CAACQ,KAAK,EAAE;UAClCX,YAAY,GAAGG,IAAI,CAACQ,KAAK;UACzB,IAAIZ,WAAW,IAAIR,QAAQ,CAACqB,cAAc,CAACT,IAAI,CAACf,EAAE,CAAC,EAAE;YACjDU,eAAe,CAACK,IAAI,CAACf,EAAE,CAAC,GAAG,IAAI;YAC/B,OAAOD,iBAAiB,CAACgB,IAAI,CAACf,EAAE,CAAC;UACrC;UACAW,WAAW,GAAG,IAAI;QACtB;QACA,IAAIR,QAAQ,CAACqB,cAAc,CAACT,IAAI,CAACf,EAAE,CAAC,EAAE;UAClC,MAAMd,WAAW,GAAG6B,IAAI,CAACf,EAAE,CAACb,KAAK,CAAC,CAAC,EAAE4B,IAAI,CAACf,EAAE,CAACf,WAAW,CAAC,GAAG,CAAC,CAAC;UAC9D,IAAIC,WAAW,EAAE;YACba,iBAAiB,GAAGS,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEV,iBAAiB,CAAC,EAAEpB,yBAAyB,CAACoC,IAAI,CAACf,EAAE,CAAC,CAAC;UAC/G;QACJ,CAAC,MACI;UACDW,WAAW,GAAG,KAAK;QACvB;QACA,OAAOI,IAAI;MACf,CAAC,CAAC;MACF,OAAOP,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,QAAQ,CAAC,EAAE;QAAEJ,iBAAiB,EAAEA;MAAkB,CAAC,CAAC;IAC/F;EACJ,CAAC;EACD,MAAM0B,oBAAoB,GAAIjC,QAAQ,IAAK;IACvC,MAAM;MAAEkC,IAAI;MAAEC,QAAQ;MAAE7B,KAAK,EAAE;QAAE0B,cAAc;QAAEzB;MAAkB,CAAC;MAAE6B,4BAA4B,EAAE;QAAEC,aAAa;QAAEC,iBAAiB;QAAEC;MAAY;IAAE,CAAC,GAAGvC,QAAQ;IAClKhB,SAAS,CAAC,MAAM;MACZ,IAAIuD,WAAW,IACXF,aAAa,KAAKnD,kBAAkB,CAACsD,WAAW,IAChDF,iBAAiB,KAAKrD,sBAAsB,CAACwD,OAAO,EAAE;QACtDN,QAAQ,CAAC;UAAErB,IAAI,EAAE;QAAwB,CAAC,CAAC;MAC/C,CAAC,MACI,IAAI,OAAOP,iBAAiB,KAAK,QAAQ,IAAIS,MAAM,CAAC0B,IAAI,CAACnC,iBAAiB,CAAC,CAACoC,MAAM,EAAE;QACrFR,QAAQ,CAAC;UAAErB,IAAI,EAAE,uBAAuB;UAAEC,OAAO,EAAE;QAAQ,CAAC,CAAC;MACjE;IACJ,CAAC,EAAE,CAACmB,IAAI,EAAEF,cAAc,EAAEO,WAAW,EAAEF,aAAa,EAAEC,iBAAiB,CAAC,CAAC;EAC7E,CAAC;EACD,MAAMM,gBAAgB,GAAIC,KAAK,IAAK;IAChCA,KAAK,CAACC,yBAAyB,CAACC,IAAI,CAAClD,cAAc,CAAC;IACpDgD,KAAK,CAACG,aAAa,CAACD,IAAI,CAACrC,YAAY,CAAC;IACtCmC,KAAK,CAACZ,oBAAoB,CAACc,IAAI,CAACd,oBAAoB,CAAC;EACzD,CAAC;EACDW,gBAAgB,CAACK,UAAU,GAAG,kBAAkB;EAChD,OAAOL,gBAAgB;AAC3B,CAAC"},"metadata":{},"sourceType":"module"}