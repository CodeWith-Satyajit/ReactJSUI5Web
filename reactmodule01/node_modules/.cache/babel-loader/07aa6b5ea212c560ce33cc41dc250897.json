{"ast":null,"code":"import { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n\n/**\n * @public\n */\nconst metadata = {\n  tag: \"ui5-daterange-picker\",\n  properties: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */{\n    /**\n     * Determines the symbol which separates the dates.\n     * If not supplied, the default time interval delimiter for the current locale will be used.\n     *\n     * @type {string}\n     * @public\n     */\n    delimiter: {\n      type: String,\n      defaultValue: \"-\"\n    },\n    /**\n     * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n     * @private\n     */\n    _tempValue: {\n      type: String\n    }\n  }\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends sap.ui.webcomponents.main.DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\nclass DateRangePicker extends DatePicker {\n  static get metadata() {\n    return metadata;\n  }\n  static get styles() {\n    return [DatePicker.styles, DateRangePickerCss];\n  }\n  constructor() {\n    super();\n    this._prevDelimiter = null;\n  }\n\n  /**\n   * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n   *\n   * @readonly\n   * @type {Date}\n   * @public\n   */\n  get dateValue() {\n    return null;\n  }\n\n  /**\n   * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n   *\n   * @readonly\n   * @type {Date}\n   * @public\n   */\n  get dateValueUTC() {\n    return null;\n  }\n  get _startDateTimestamp() {\n    return this._extractFirstTimestamp(this.value);\n  }\n  get _endDateTimestamp() {\n    return this._extractLastTimestamp(this.value);\n  }\n  get _tempTimestamp() {\n    return this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n  }\n\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n  get _calendarSelectionMode() {\n    return \"Range\";\n  }\n\n  /**\n   * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n   * @override\n   */\n  get _calendarTimestamp() {\n    return this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n  }\n\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n  get _calendarSelectedDates() {\n    if (this._tempValue) {\n      return [this._tempValue];\n    }\n    if (this.value && this._checkValueValidity(this.value)) {\n      return this._splitValueByDelimiter(this.value);\n    }\n    return [];\n  }\n\n  /**\n   * Returns the start date of the currently selected range as JavaScript Date instance.\n   *\n   * @readonly\n   * @type {Date}\n   * @public\n   */\n  get startDateValue() {\n    return CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n  }\n\n  /**\n   * Returns the end date of the currently selected range as JavaScript Date instance.\n   *\n   * @readonly\n   * @type {Date}\n   * @public\n   */\n  get endDateValue() {\n    return CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n  }\n\n  /**\n   * @override\n   */\n  get _placeholder() {\n    return this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n  }\n  get dateAriaDescription() {\n    return DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n  }\n\n  /**\n   * @override\n   */\n  async _onInputSubmit(event) {\n    const input = this._getInput();\n    const caretPos = input.getCaretPosition();\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n  }\n\n  /**\n   * @override\n   */\n  onResponsivePopoverAfterClose() {\n    this._tempValue = \"\"; // reset _tempValue on popover close\n    super.onResponsivePopoverAfterClose();\n  }\n\n  /**\n   * @override\n   */\n  isValid(value) {\n    const parts = this._splitValueByDelimiter(value);\n    return parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n  }\n\n  /**\n   * @override\n   */\n  isInValidRange(value) {\n    return this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n  }\n\n  /**\n   * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n   * @override\n   */\n  normalizeValue(value) {\n    const firstDateTimestamp = this._extractFirstTimestamp(value);\n    const lastDateTimestamp = this._extractLastTimestamp(value);\n    if (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) {\n      // if both are timestamps (not undefined), flip if necessary\n      return this._buildValue(lastDateTimestamp, firstDateTimestamp);\n    }\n    return this._buildValue(firstDateTimestamp, lastDateTimestamp);\n  }\n\n  /**\n   * @override\n   */\n  onSelectedDatesChange(event) {\n    event.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n    const values = event.detail.values;\n    if (values.length === 0) {\n      return;\n    }\n    if (values.length === 1) {\n      // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n      this._tempValue = values[0];\n      return;\n    }\n    const newValue = this._buildValue(...event.detail.dates); // the value will be normalized so we don't need to order them here\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n    this.closePicker();\n  }\n\n  /**\n   * @override\n   */\n  async _modifyDateValue(amount, unit) {\n    if (!this._endDateTimestamp) {\n      // If empty or only one date -> treat as datepicker entirely\n      return super._modifyDateValue(amount, unit);\n    }\n    const input = this._getInput();\n    let caretPos = input.getCaretPosition();\n    let newValue;\n    if (caretPos <= this.value.indexOf(this._effectiveDelimiter)) {\n      // The user is focusing the first date -> change it and keep the seoond date\n      const startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n      const newStartDateTimestamp = startDateModified.valueOf() / 1000;\n      if (newStartDateTimestamp > this._endDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the last date\n        caretPos += Math.ceil(this.value.length / 2);\n      }\n      newValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n    } else {\n      const endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n      const newEndDateTimestamp = endDateModified.valueOf() / 1000;\n      newValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n      if (newEndDateTimestamp < this._startDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the first date\n        caretPos -= Math.ceil(this.value.length / 2);\n      }\n    }\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n  }\n\n  get _effectiveDelimiter() {\n    return this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n  }\n\n  _splitValueByDelimiter(value) {\n    const valuesArray = [];\n    const partsArray = value.split(this._prevDelimiter || this._effectiveDelimiter);\n\n    // if format successfully parse the value, the value contains only single date\n    if (this.getFormat().parse(value)) {\n      valuesArray[0] = partsArray.join(this._effectiveDelimiter);\n      valuesArray[1] = \"\";\n    } else {\n      valuesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n      valuesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n    }\n    return valuesArray;\n  }\n\n  /**\n   * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n   * @private\n   */\n  _extractFirstTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n    const dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n    return this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n  }\n\n  /**\n   * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n   * @private\n   */\n  _extractLastTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n    const dateStrings = this._splitValueByDelimiter(value);\n    if (dateStrings[1]) {\n      return this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n    }\n    return undefined;\n  }\n\n  /**\n   * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n   * @private\n   */\n  _buildValue(firstDateTimestamp, lastDateTimestamp) {\n    this._prevDelimiter = this._effectiveDelimiter;\n    if (firstDateTimestamp) {\n      const firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n      if (!lastDateTimestamp) {\n        return firstDateString;\n      }\n      const lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n      return `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n    }\n    return \"\";\n  }\n}\nDateRangePicker.define();\nexport default DateRangePicker;","map":{"version":3,"names":["renderFinished","CalendarDate","modifyDateBy","getTodayUTCTimestamp","DATERANGE_DESCRIPTION","DateRangePickerCss","DatePicker","metadata","tag","properties","delimiter","type","String","defaultValue","_tempValue","DateRangePicker","styles","constructor","_prevDelimiter","dateValue","dateValueUTC","_startDateTimestamp","_extractFirstTimestamp","value","_endDateTimestamp","_extractLastTimestamp","_tempTimestamp","getFormat","parse","getTime","_calendarSelectionMode","_calendarTimestamp","_primaryCalendarType","_calendarSelectedDates","_checkValueValidity","_splitValueByDelimiter","startDateValue","fromTimestamp","toLocalJSDate","endDateValue","_placeholder","placeholder","undefined","_displayFormat","_effectiveDelimiter","dateAriaDescription","i18nBundle","getText","_onInputSubmit","event","input","_getInput","caretPos","getCaretPosition","setCaretPosition","onResponsivePopoverAfterClose","isValid","parts","length","every","dateString","isInValidRange","normalizeValue","firstDateTimestamp","lastDateTimestamp","_buildValue","onSelectedDatesChange","preventDefault","values","detail","newValue","dates","_updateValueAndFireEvents","closePicker","_modifyDateValue","amount","unit","indexOf","startDateModified","_minDate","_maxDate","newStartDateTimestamp","valueOf","Math","ceil","endDateModified","newEndDateTimestamp","getMetadata","getProperties","valuesArray","partsArray","split","join","slice","dateStrings","firstDateString","_getStringFromTimestamp","lastDateString","define"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents/dist/DateRangePicker.js"],"sourcesContent":["import { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-daterange-picker\",\n\tproperties: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {\n\t\t/**\n\t\t * Determines the symbol which separates the dates.\n\t\t * If not supplied, the default time interval delimiter for the current locale will be used.\n\t\t *\n\t\t * @type {string}\n\t\t * @public\n\t\t */\n\t\tdelimiter: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: \"-\",\n\t\t},\n\n\t\t/**\n\t\t * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n\t\t * @private\n\t\t */\n\t\t_tempValue: {\n\t\t\ttype: String,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends sap.ui.webcomponents.main.DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\nclass DateRangePicker extends DatePicker {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get styles() {\n\t\treturn [DatePicker.styles, DateRangePickerCss];\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._prevDelimiter = null;\n\t}\n\n\t/**\n\t * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n\t *\n\t * @readonly\n\t * @type {Date}\n\t * @public\n\t */\n\tget dateValue() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n\t *\n\t * @readonly\n\t * @type {Date}\n\t * @public\n\t */\n\tget dateValueUTC() {\n\t\treturn null;\n\t}\n\n\tget _startDateTimestamp() {\n\t\treturn this._extractFirstTimestamp(this.value);\n\t}\n\n\tget _endDateTimestamp() {\n\t\treturn this._extractLastTimestamp(this.value);\n\t}\n\n\tget _tempTimestamp() {\n\t\treturn this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectionMode() {\n\t\treturn \"Range\";\n\t}\n\n\t/**\n\t * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n\t * @override\n\t */\n\tget _calendarTimestamp() {\n\t\treturn this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectedDates() {\n\t\tif (this._tempValue) {\n\t\t\treturn [this._tempValue];\n\t\t}\n\t\tif (this.value && this._checkValueValidity(this.value)) {\n\t\t\treturn this._splitValueByDelimiter(this.value);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns the start date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type {Date}\n\t * @public\n\t */\n\tget startDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * Returns the end date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type {Date}\n\t * @public\n\t */\n\tget endDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget _placeholder() {\n\t\treturn this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n\t}\n\n\tget dateAriaDescription() {\n\t\treturn DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _onInputSubmit(event) {\n\t\tconst input = this._getInput();\n\t\tconst caretPos = input.getCaretPosition();\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n\t}\n\n\t/**\n\t * @override\n\t */\n\t onResponsivePopoverAfterClose() {\n\t\tthis._tempValue = \"\"; // reset _tempValue on popover close\n\t\tsuper.onResponsivePopoverAfterClose();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisValid(value) {\n\t\tconst parts = this._splitValueByDelimiter(value);\n\t\treturn parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisInValidRange(value) {\n\t\treturn this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n\t}\n\n\t/**\n\t * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n\t * @override\n\t */\n\tnormalizeValue(value) {\n\t\tconst firstDateTimestamp = this._extractFirstTimestamp(value);\n\t\tconst lastDateTimestamp = this._extractLastTimestamp(value);\n\t\tif (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) { // if both are timestamps (not undefined), flip if necessary\n\t\t\treturn this._buildValue(lastDateTimestamp, firstDateTimestamp);\n\t\t}\n\t\treturn this._buildValue(firstDateTimestamp, lastDateTimestamp);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tonSelectedDatesChange(event) {\n\t\tevent.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\t\tconst values = event.detail.values;\n\n\t\tif (values.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (values.length === 1) { // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n\t\t\tthis._tempValue = values[0];\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this._buildValue(...event.detail.dates); // the value will be normalized so we don't need to order them here\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _modifyDateValue(amount, unit) {\n\t\tif (!this._endDateTimestamp) { // If empty or only one date -> treat as datepicker entirely\n\t\t\treturn super._modifyDateValue(amount, unit);\n\t\t}\n\n\t\tconst input = this._getInput();\n\t\tlet caretPos = input.getCaretPosition();\n\t\tlet newValue;\n\n\t\tif (caretPos <= this.value.indexOf(this._effectiveDelimiter)) { // The user is focusing the first date -> change it and keep the seoond date\n\t\t\tconst startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\t\t\tif (newStartDateTimestamp > this._endDateTimestamp) { // dates flipped -> move the caret to the same position but on the last date\n\t\t\t\tcaretPos += Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t\tnewValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t} else {\n\t\t\tconst endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newEndDateTimestamp = endDateModified.valueOf() / 1000;\n\t\t\tnewValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t\tif (newEndDateTimestamp < this._startDateTimestamp) { // dates flipped -> move the caret to the same position but on the first date\n\t\t\t\tcaretPos -= Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t}\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n\t}\n\n\tget _effectiveDelimiter() {\n\t\treturn this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n\t}\n\n\t_splitValueByDelimiter(value) {\n\t\tconst valuesArray = [];\n\t\tconst partsArray = value.split(this._prevDelimiter || this._effectiveDelimiter);\n\n\t\t// if format successfully parse the value, the value contains only single date\n\t\tif (this.getFormat().parse(value)) {\n\t\t\tvaluesArray[0] = partsArray.join(this._effectiveDelimiter);\n\t\t\tvaluesArray[1] = \"\";\n\t\t} else {\n\t\t\tvaluesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n\t\t\tvaluesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n\t\t}\n\n\t\treturn valuesArray;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n\t * @private\n\t */\n\t_extractFirstTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\t\treturn this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n\t * @private\n\t */\n\t_extractLastTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value);\n\t\tif (dateStrings[1]) {\n\t\t\treturn this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n\t * @private\n\t */\n\t_buildValue(firstDateTimestamp, lastDateTimestamp) {\n\t\tthis._prevDelimiter = this._effectiveDelimiter;\n\t\tif (firstDateTimestamp) {\n\t\t\tconst firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n\t\t\tif (!lastDateTimestamp) {\n\t\t\t\treturn firstDateString;\n\t\t\t}\n\n\t\t\tconst lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\t\t\treturn `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n\t\t}\n\n\t\treturn \"\";\n\t}\n}\n\nDateRangePicker.define();\n\nexport default DateRangePicker;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}