{"ast":null,"code":"import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\nconst cache = new Map();\nconst getLocaleInstance = lang => {\n  if (!cache.has(lang)) {\n    cache.set(lang, new Locale(lang));\n  }\n  return cache.get(lang);\n};\nconst convertToLocaleOrNull = lang => {\n  try {\n    if (lang && typeof lang === \"string\") {\n      return getLocaleInstance(lang);\n    }\n  } catch (e) {\n    // ignore\n  }\n};\n\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\nconst getLocale = lang => {\n  if (lang) {\n    return convertToLocaleOrNull(lang);\n  }\n  if (getConfigLanguage()) {\n    return getLocaleInstance(getConfigLanguage());\n  }\n  return convertToLocaleOrNull(detectNavigatorLanguage());\n};\nexport default getLocale;","map":{"version":3,"names":["detectNavigatorLanguage","getLanguage","getConfigLanguage","Locale","cache","Map","getLocaleInstance","lang","has","set","get","convertToLocaleOrNull","e","getLocale"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/locale/getLocale.js"],"sourcesContent":["import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\n\nconst cache = new Map();\n\nconst getLocaleInstance = lang => {\n\tif (!cache.has(lang)) {\n\t\tcache.set(lang, new Locale(lang));\n\t}\n\n\treturn cache.get(lang);\n};\n\nconst convertToLocaleOrNull = lang => {\n\ttry {\n\t\tif (lang && typeof lang === \"string\") {\n\t\t\treturn getLocaleInstance(lang);\n\t\t}\n\t} catch (e) {\n\t\t// ignore\n\t}\n};\n\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\nconst getLocale = lang => {\n\tif (lang) {\n\t\treturn convertToLocaleOrNull(lang);\n\t}\n\n\tif (getConfigLanguage()) {\n\t\treturn getLocaleInstance(getConfigLanguage());\n\t}\n\n\treturn convertToLocaleOrNull(detectNavigatorLanguage());\n};\n\nexport default getLocale;\n"],"mappings":"AAAA,OAAOA,uBAAuB,MAAM,oCAAoC;AACxE,SAASC,WAAW,IAAIC,iBAAiB,QAAQ,uBAAuB;AACxE,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,KAAK,GAAG,IAAIC,GAAG,EAAE;AAEvB,MAAMC,iBAAiB,GAAGC,IAAI,IAAI;EACjC,IAAI,CAACH,KAAK,CAACI,GAAG,CAACD,IAAI,CAAC,EAAE;IACrBH,KAAK,CAACK,GAAG,CAACF,IAAI,EAAE,IAAIJ,MAAM,CAACI,IAAI,CAAC,CAAC;EAClC;EAEA,OAAOH,KAAK,CAACM,GAAG,CAACH,IAAI,CAAC;AACvB,CAAC;AAED,MAAMI,qBAAqB,GAAGJ,IAAI,IAAI;EACrC,IAAI;IACH,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACrC,OAAOD,iBAAiB,CAACC,IAAI,CAAC;IAC/B;EACD,CAAC,CAAC,OAAOK,CAAC,EAAE;IACX;EAAA;AAEF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGN,IAAI,IAAI;EACzB,IAAIA,IAAI,EAAE;IACT,OAAOI,qBAAqB,CAACJ,IAAI,CAAC;EACnC;EAEA,IAAIL,iBAAiB,EAAE,EAAE;IACxB,OAAOI,iBAAiB,CAACJ,iBAAiB,EAAE,CAAC;EAC9C;EAEA,OAAOS,qBAAqB,CAACX,uBAAuB,EAAE,CAAC;AACxD,CAAC;AAED,eAAea,SAAS"},"metadata":{},"sourceType":"module"}