{"ast":null,"code":"import { DEFAULT_LOCALE } from \"../generated/AssetParameters.js\";\nconst localeRegEX = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;\nconst SAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;\n\n/* Map for old language names for a few ISO639 codes. */\nconst M_ISO639_NEW_TO_OLD = {\n  \"he\": \"iw\",\n  \"yi\": \"ji\",\n  \"id\": \"in\",\n  \"sr\": \"sh\"\n};\n\n/**\n * Normalizes the given locale in BCP-47 syntax.\n * @param {string} locale locale to normalize\n * @returns {string} Normalized locale, \"undefined\" if the locale can't be normalized or the default locale, if no locale provided.\n */\nconst normalizeLocale = locale => {\n  let m;\n  if (!locale) {\n    return DEFAULT_LOCALE;\n  }\n  if (typeof locale === \"string\" && (m = localeRegEX.exec(locale.replace(/_/g, \"-\")))) {\n    /* eslint-disable-line */\n    let language = m[1].toLowerCase();\n    let region = m[3] ? m[3].toUpperCase() : undefined;\n    const script = m[2] ? m[2].toLowerCase() : undefined;\n    const variants = m[4] ? m[4].slice(1) : undefined;\n    const isPrivate = m[6];\n    language = M_ISO639_NEW_TO_OLD[language] || language;\n\n    // recognize and convert special SAP supportability locales (overwrites m[]!)\n    if (isPrivate && (m = SAPSupportabilityLocales.exec(isPrivate)) /* eslint-disable-line */ || variants && (m = SAPSupportabilityLocales.exec(variants))) {\n      /* eslint-disable-line */\n      return `en_US_${m[1].toLowerCase()}`; // for now enforce en_US (agreed with SAP SLS)\n    }\n\n    // Chinese: when no region but a script is specified, use default region for each script\n    if (language === \"zh\" && !region) {\n      if (script === \"hans\") {\n        region = \"CN\";\n      } else if (script === \"hant\") {\n        region = \"TW\";\n      }\n    }\n    return language + (region ? \"_\" + region + (variants ? \"_\" + variants.replace(\"-\", \"_\") : \"\") : \"\"); /* eslint-disable-line */\n  }\n};\n\nexport default normalizeLocale;","map":{"version":3,"names":["DEFAULT_LOCALE","localeRegEX","SAPSupportabilityLocales","M_ISO639_NEW_TO_OLD","normalizeLocale","locale","m","exec","replace","language","toLowerCase","region","toUpperCase","undefined","script","variants","slice","isPrivate"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/locale/normalizeLocale.js"],"sourcesContent":["import { DEFAULT_LOCALE } from \"../generated/AssetParameters.js\";\n\nconst localeRegEX = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;\nconst SAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;\n\n/* Map for old language names for a few ISO639 codes. */\nconst M_ISO639_NEW_TO_OLD = {\n\t\"he\": \"iw\",\n\t\"yi\": \"ji\",\n\t\"id\": \"in\",\n\t\"sr\": \"sh\",\n};\n\n/**\n * Normalizes the given locale in BCP-47 syntax.\n * @param {string} locale locale to normalize\n * @returns {string} Normalized locale, \"undefined\" if the locale can't be normalized or the default locale, if no locale provided.\n */\nconst normalizeLocale = locale => {\n\tlet m;\n\n\tif (!locale) {\n\t\treturn DEFAULT_LOCALE;\n\t}\n\n\tif (typeof locale === \"string\" && (m = localeRegEX.exec(locale.replace(/_/g, \"-\")))) {/* eslint-disable-line */\n\t\tlet language = m[1].toLowerCase();\n\t\tlet region = m[3] ? m[3].toUpperCase() : undefined;\n\t\tconst script = m[2] ? m[2].toLowerCase() : undefined;\n\t\tconst variants = m[4] ? m[4].slice(1) : undefined;\n\t\tconst isPrivate = m[6];\n\n\t\tlanguage = M_ISO639_NEW_TO_OLD[language] || language;\n\n\t\t// recognize and convert special SAP supportability locales (overwrites m[]!)\n\t\tif ((isPrivate && (m = SAPSupportabilityLocales.exec(isPrivate))) /* eslint-disable-line */ ||\n\t\t\t(variants && (m = SAPSupportabilityLocales.exec(variants)))) {/* eslint-disable-line */\n\t\t\treturn `en_US_${m[1].toLowerCase()}`; // for now enforce en_US (agreed with SAP SLS)\n\t\t}\n\n\t\t// Chinese: when no region but a script is specified, use default region for each script\n\t\tif (language === \"zh\" && !region) {\n\t\t\tif (script === \"hans\") {\n\t\t\t\tregion = \"CN\";\n\t\t\t} else if (script === \"hant\") {\n\t\t\t\tregion = \"TW\";\n\t\t\t}\n\t\t}\n\n\t\treturn language + (region ? \"_\" + region + (variants ? \"_\" + variants.replace(\"-\", \"_\") : \"\") : \"\"); /* eslint-disable-line */\n\t}\n};\n\nexport default normalizeLocale;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,iCAAiC;AAEhE,MAAMC,WAAW,GAAG,4MAA4M;AAChO,MAAMC,wBAAwB,GAAG,gCAAgC;;AAEjE;AACA,MAAMC,mBAAmB,GAAG;EAC3B,IAAI,EAAE,IAAI;EACV,IAAI,EAAE,IAAI;EACV,IAAI,EAAE,IAAI;EACV,IAAI,EAAE;AACP,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGC,MAAM,IAAI;EACjC,IAAIC,CAAC;EAEL,IAAI,CAACD,MAAM,EAAE;IACZ,OAAOL,cAAc;EACtB;EAEA,IAAI,OAAOK,MAAM,KAAK,QAAQ,KAAKC,CAAC,GAAGL,WAAW,CAACM,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE;IAAC;IACrF,IAAIC,QAAQ,GAAGH,CAAC,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE;IACjC,IAAIC,MAAM,GAAGL,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACM,WAAW,EAAE,GAAGC,SAAS;IAClD,MAAMC,MAAM,GAAGR,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE,GAAGG,SAAS;IACpD,MAAME,QAAQ,GAAGT,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGH,SAAS;IACjD,MAAMI,SAAS,GAAGX,CAAC,CAAC,CAAC,CAAC;IAEtBG,QAAQ,GAAGN,mBAAmB,CAACM,QAAQ,CAAC,IAAIA,QAAQ;;IAEpD;IACA,IAAKQ,SAAS,KAAKX,CAAC,GAAGJ,wBAAwB,CAACK,IAAI,CAACU,SAAS,CAAC,CAAC,CAAE,6BAChEF,QAAQ,KAAKT,CAAC,GAAGJ,wBAAwB,CAACK,IAAI,CAACQ,QAAQ,CAAC,CAAE,EAAE;MAAC;MAC9D,OAAQ,SAAQT,CAAC,CAAC,CAAC,CAAC,CAACI,WAAW,EAAG,EAAC,CAAC,CAAC;IACvC;;IAEA;IACA,IAAID,QAAQ,KAAK,IAAI,IAAI,CAACE,MAAM,EAAE;MACjC,IAAIG,MAAM,KAAK,MAAM,EAAE;QACtBH,MAAM,GAAG,IAAI;MACd,CAAC,MAAM,IAAIG,MAAM,KAAK,MAAM,EAAE;QAC7BH,MAAM,GAAG,IAAI;MACd;IACD;IAEA,OAAOF,QAAQ,IAAIE,MAAM,GAAG,GAAG,GAAGA,MAAM,IAAII,QAAQ,GAAG,GAAG,GAAGA,QAAQ,CAACP,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACtG;AACD,CAAC;;AAED,eAAeJ,eAAe"},"metadata":{},"sourceType":"module"}