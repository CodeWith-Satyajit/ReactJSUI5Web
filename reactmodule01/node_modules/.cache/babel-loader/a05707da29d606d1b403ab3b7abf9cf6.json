{"ast":null,"code":"const getEffectiveAriaLabelText = el => {\n  if (!el.accessibleNameRef) {\n    if (el.accessibleName) {\n      return el.accessibleName;\n    }\n    return undefined;\n  }\n  return getAriaLabelledByTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {Document|HTMLElement} ownerDocument (Optional) Defines the document or element where you want to search for the texts\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\nconst getAriaLabelledByTexts = function (el, ownerDocument) {\n  let readyIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  const ids = readyIds && readyIds.split(\" \") || el.accessibleNameRef.split(\" \");\n  const owner = ownerDocument || el.getRootNode();\n  let result = \"\";\n  ids.forEach((elementId, index) => {\n    const element = owner.querySelector(`[id='${elementId}']`);\n    result += `${element ? element.textContent : \"\"}`;\n    if (index < ids.length - 1) {\n      result += \" \";\n    }\n  });\n  return result;\n};\n\n/**\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related \"label for\" texts\n */\nconst getAssociatedLabelForTexts = el => {\n  const results = [];\n  const labels = el.getRootNode().querySelectorAll(`[ui5-label][for=\"${el.id}\"],label[for=\"${el.id}\"]`);\n  labels.forEach(label => results.push(label.textContent));\n  if (results.length) {\n    return results.join(\" \");\n  }\n  return undefined;\n};\nexport { getEffectiveAriaLabelText, getAriaLabelledByTexts, getAssociatedLabelForTexts };","map":{"version":3,"names":["getEffectiveAriaLabelText","el","accessibleNameRef","accessibleName","undefined","getAriaLabelledByTexts","ownerDocument","readyIds","ids","split","owner","getRootNode","result","forEach","elementId","index","element","querySelector","textContent","length","getAssociatedLabelForTexts","results","labels","querySelectorAll","id","label","push","join"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/util/AriaLabelHelper.js"],"sourcesContent":["const getEffectiveAriaLabelText = el => {\n\tif (!el.accessibleNameRef) {\n\t\tif (el.accessibleName) {\n\t\t\treturn el.accessibleName;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\treturn getAriaLabelledByTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {Document|HTMLElement} ownerDocument (Optional) Defines the document or element where you want to search for the texts\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\nconst getAriaLabelledByTexts = (el, ownerDocument, readyIds = \"\") => {\n\tconst ids = (readyIds && readyIds.split(\" \")) || el.accessibleNameRef.split(\" \");\n\tconst owner = ownerDocument || el.getRootNode();\n\tlet result = \"\";\n\n\tids.forEach((elementId, index) => {\n\t\tconst element = owner.querySelector(`[id='${elementId}']`);\n\t\tresult += `${element ? element.textContent : \"\"}`;\n\n\t\tif (index < ids.length - 1) {\n\t\t\tresult += \" \";\n\t\t}\n\t});\n\n\treturn result;\n};\n\n/**\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related \"label for\" texts\n */\nconst getAssociatedLabelForTexts = el => {\n\tconst results = [];\n\tconst labels = el.getRootNode().querySelectorAll(`[ui5-label][for=\"${el.id}\"],label[for=\"${el.id}\"]`);\n\n\tlabels.forEach(label => results.push(label.textContent));\n\n\tif (results.length) {\n\t\treturn results.join(\" \");\n\t}\n\n\treturn undefined;\n};\n\nexport {\n\tgetEffectiveAriaLabelText,\n\tgetAriaLabelledByTexts,\n\tgetAssociatedLabelForTexts,\n};\n"],"mappings":"AAAA,MAAMA,yBAAyB,GAAGC,EAAE,IAAI;EACvC,IAAI,CAACA,EAAE,CAACC,iBAAiB,EAAE;IAC1B,IAAID,EAAE,CAACE,cAAc,EAAE;MACtB,OAAOF,EAAE,CAACE,cAAc;IACzB;IAEA,OAAOC,SAAS;EACjB;EAEA,OAAOC,sBAAsB,CAACJ,EAAE,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,GAAG,UAACJ,EAAE,EAAEK,aAAa,EAAoB;EAAA,IAAlBC,QAAQ,uEAAG,EAAE;EAC/D,MAAMC,GAAG,GAAID,QAAQ,IAAIA,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC,IAAKR,EAAE,CAACC,iBAAiB,CAACO,KAAK,CAAC,GAAG,CAAC;EAChF,MAAMC,KAAK,GAAGJ,aAAa,IAAIL,EAAE,CAACU,WAAW,EAAE;EAC/C,IAAIC,MAAM,GAAG,EAAE;EAEfJ,GAAG,CAACK,OAAO,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACjC,MAAMC,OAAO,GAAGN,KAAK,CAACO,aAAa,CAAE,QAAOH,SAAU,IAAG,CAAC;IAC1DF,MAAM,IAAK,GAAEI,OAAO,GAAGA,OAAO,CAACE,WAAW,GAAG,EAAG,EAAC;IAEjD,IAAIH,KAAK,GAAGP,GAAG,CAACW,MAAM,GAAG,CAAC,EAAE;MAC3BP,MAAM,IAAI,GAAG;IACd;EACD,CAAC,CAAC;EAEF,OAAOA,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA,MAAMQ,0BAA0B,GAAGnB,EAAE,IAAI;EACxC,MAAMoB,OAAO,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAGrB,EAAE,CAACU,WAAW,EAAE,CAACY,gBAAgB,CAAE,oBAAmBtB,EAAE,CAACuB,EAAG,iBAAgBvB,EAAE,CAACuB,EAAG,IAAG,CAAC;EAErGF,MAAM,CAACT,OAAO,CAACY,KAAK,IAAIJ,OAAO,CAACK,IAAI,CAACD,KAAK,CAACP,WAAW,CAAC,CAAC;EAExD,IAAIG,OAAO,CAACF,MAAM,EAAE;IACnB,OAAOE,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC;EACzB;EAEA,OAAOvB,SAAS;AACjB,CAAC;AAED,SACCJ,yBAAyB,EACzBK,sBAAsB,EACtBe,0BAA0B"},"metadata":{},"sourceType":"module"}