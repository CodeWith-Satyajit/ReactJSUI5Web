{"ast":null,"code":"import { TableScaleWidthMode } from '../../../enums/TableScaleWidthMode';\nimport { DEFAULT_COLUMN_WIDTH } from '../defaults/Column';\nconst ROW_SAMPLE_SIZE = 20;\nconst DEFAULT_HEADER_NUM_CHAR = 10;\nconst MAX_WIDTH = 700;\nconst CELL_PADDING_PX = 18; /* padding left and right 0.5rem each (16px) + borders (1px) + buffer (1px) */\n// a function, which approximates header px sizes given a character length\nconst approximateHeaderPxFromCharLength = charLength => charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;\nconst approximateContentPxFromCharLength = charLength => 8 * charLength;\nconst columnsDeps = (deps, _ref) => {\n  let {\n    instance: {\n      state,\n      webComponentsReactProperties,\n      visibleColumns,\n      data,\n      rows\n    }\n  } = _ref;\n  const isLoadingPlaceholder = !(data === null || data === void 0 ? void 0 : data.length) && webComponentsReactProperties.loading;\n  const hasRows = (rows === null || rows === void 0 ? void 0 : rows.length) > 0;\n  return [...deps, hasRows, !state.tableColResized && state.tableClientWidth, state.hiddenColumns.length, visibleColumns === null || visibleColumns === void 0 ? void 0 : visibleColumns.length, webComponentsReactProperties.scaleWidthMode, isLoadingPlaceholder, webComponentsReactProperties.scaleXFactor];\n};\nconst stringToPx = (dataPoint, id) => {\n  const ruler = document.getElementById(`smartScaleModeHelper-${id}`);\n  if (ruler) {\n    ruler.innerHTML = `${dataPoint}`;\n    return ruler.offsetWidth;\n  }\n  return 0;\n};\nconst smartColumns = (columns, instance, hiddenColumns) => {\n  const {\n    rows,\n    state,\n    webComponentsReactProperties\n  } = instance;\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const {\n    tableClientWidth: totalWidth\n  } = state;\n  const visibleColumns = columns.filter(column => {\n    var _a, _b;\n    return ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor);\n  });\n  const columnMeta = visibleColumns.reduce((metadata, column) => {\n    var _a;\n    const columnIdOrAccessor = (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      metadata[columnIdOrAccessor] = {\n        headerPx: column.width || column.minWidth || 60,\n        contentPxAvg: 0\n      };\n      return metadata;\n    }\n    const contentPxAvg = rowSample.reduce((acc, item) => {\n      var _a;\n      const dataPoint = (_a = item.values) === null || _a === void 0 ? void 0 : _a[columnIdOrAccessor];\n      let val = 0;\n      if (dataPoint) {\n        val = stringToPx(dataPoint, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX;\n      }\n      return acc + val;\n    }, 0) / (rowSample.length || 1);\n    metadata[columnIdOrAccessor] = {\n      headerPx: typeof column.Header === 'string' ? Math.max(stringToPx(column.Header, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX, 60) : 60,\n      contentPxAvg: contentPxAvg\n    };\n    return metadata;\n  }, {});\n  let totalContentPxAvgPrio1 = 0;\n  let totalNumberColPrio2 = 0;\n  // width reserved by predefined widths or columns defined by header\n  const reservedWidth = visibleColumns.reduce((acc, column) => {\n    var _a;\n    const columnIdOrAccessor = (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor;\n    const {\n      contentPxAvg,\n      headerPx\n    } = columnMeta[columnIdOrAccessor];\n    if (contentPxAvg > headerPx) {\n      if (!column.minWidth && !column.width) {\n        totalContentPxAvgPrio1 += columnMeta[columnIdOrAccessor].contentPxAvg;\n        totalNumberColPrio2++;\n        return acc;\n      } else {\n        return acc + Math.max(column.minWidth || 0, column.width || 0);\n      }\n    } else {\n      if (!column.minWidth && !column.width) {\n        totalNumberColPrio2++;\n      }\n      const max = Math.max(column.minWidth || 0, column.width || 0, headerPx);\n      columnMeta[columnIdOrAccessor].headerDefinesWidth = true;\n      return acc + max;\n    }\n  }, 0);\n  const availableWidthPrio1 = totalWidth - reservedWidth;\n  let availableWidthPrio2 = availableWidthPrio1;\n  // Step 1: Give columns defined by content more space (priority 1)\n  const visibleColumnsAdaptedPrio1 = visibleColumns.map(column => {\n    var _a;\n    const columnIdOrAccessor = (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    if (meta && !column.minWidth && !column.width && !meta.headerDefinesWidth) {\n      let targetWidth;\n      const {\n        contentPxAvg,\n        headerPx\n      } = meta;\n      if (availableWidthPrio1 > 0) {\n        const factor = contentPxAvg / totalContentPxAvgPrio1;\n        targetWidth = Math.min(availableWidthPrio1 * factor, contentPxAvg);\n        availableWidthPrio2 -= targetWidth;\n      }\n      return Object.assign(Object.assign({}, column), {\n        nextWidth: targetWidth || headerPx\n      });\n    }\n    return column;\n  });\n  // Step 2: Give all columns more space (priority 2)\n  return visibleColumnsAdaptedPrio1.map(column => {\n    var _a;\n    const columnIdOrAccessor = (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor;\n    const meta = columnMeta[columnIdOrAccessor];\n    const {\n      headerPx\n    } = meta;\n    if (meta && !column.minWidth && !column.width) {\n      let targetWidth = column.nextWidth || headerPx;\n      if (availableWidthPrio2 > 0) {\n        targetWidth = targetWidth + availableWidthPrio2 * (1 / totalNumberColPrio2);\n      }\n      return Object.assign(Object.assign({}, column), {\n        width: targetWidth\n      });\n    } else {\n      return Object.assign(Object.assign({}, column), {\n        width: Math.max(column.width || 0, 60, headerPx)\n      });\n    }\n  });\n};\nconst columns = (columns, _ref2) => {\n  let {\n    instance\n  } = _ref2;\n  if (!instance.state || !instance.rows) {\n    return columns;\n  }\n  const {\n    rows,\n    state\n  } = instance;\n  const {\n    hiddenColumns,\n    tableClientWidth: totalWidth\n  } = state;\n  const {\n    scaleWidthMode,\n    loading\n  } = instance.webComponentsReactProperties;\n  if (columns.length === 0 || !totalWidth || !TableScaleWidthMode[scaleWidthMode]) {\n    return columns;\n  }\n  // map columns to visibleColumns\n  const visibleColumns = instance.visibleColumns.map(visCol => {\n    const column = columns.find(col => {\n      return col.id === visCol.id || col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id;\n    });\n    if (column) {\n      return column;\n    }\n    return column !== null && column !== void 0 ? column : false;\n  }).filter(Boolean);\n  if (scaleWidthMode === TableScaleWidthMode.Smart) {\n    return smartColumns(columns, instance, hiddenColumns);\n  }\n  const calculateDefaultTableWidth = () => {\n    const columnsWithWidthProperties = visibleColumns.filter(column => {\n      var _a, _b, _c;\n      return (_c = (_b = (_a = column.width) !== null && _a !== void 0 ? _a : column.minWidth) !== null && _b !== void 0 ? _b : column.maxWidth) !== null && _c !== void 0 ? _c : false;\n    }).map(column => {\n      var _a;\n      return {\n        accessor: (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor,\n        minWidth: column.minWidth,\n        width: column.width,\n        maxWidth: column.maxWidth\n      };\n    });\n    let availableWidth = totalWidth;\n    let defaultColumnsCount = visibleColumns.length;\n    const columnsWithFixedWidth = columnsWithWidthProperties.map(column => {\n      const {\n        width,\n        minWidth,\n        maxWidth,\n        accessor\n      } = column;\n      if (width) {\n        // necessary because of default minWidth\n        const acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && accessor !== '__ui5wcr__internal_navigation_column' && width < 60 ? 60 : width;\n        availableWidth -= acceptedWidth;\n        defaultColumnsCount--;\n        return acceptedWidth;\n      }\n      const columnsWithMaxWidth = columnsWithWidthProperties.filter(item => item.maxWidth);\n      const aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce((acc, cur) => acc + cur.maxWidth, 0);\n      const aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(item => item.minWidth && !item.maxWidth).reduce((acc, cur) => acc + cur.minWidth, 0);\n      if (minWidth > availableWidth / defaultColumnsCount) {\n        // don't apply minWidth if enough space is available because of maxWidth properties\n        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {\n          // apply minWidth only if it's larger than the calculated available width\n          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {\n            availableWidth -= minWidth;\n            defaultColumnsCount--;\n            return minWidth;\n          }\n          return false;\n        }\n        availableWidth -= minWidth;\n        defaultColumnsCount--;\n        return minWidth;\n      }\n      if (maxWidth < availableWidth / defaultColumnsCount) {\n        availableWidth -= maxWidth;\n        defaultColumnsCount--;\n        return maxWidth;\n      }\n      return false;\n    }).filter(Boolean);\n    const fixedWidth = columnsWithFixedWidth.reduce((acc, val) => acc + val, 0);\n    // check if columns are visible and table has width\n    if (visibleColumns.length > 0 && totalWidth > 0) {\n      // set fixedWidth as defaultWidth if all visible columns have fixed value\n      if (visibleColumns.length === columnsWithFixedWidth.length) {\n        return fixedWidth / visibleColumns.length;\n      }\n      // spread default columns\n      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {\n        return (totalWidth - fixedWidth) / defaultColumnsCount;\n      }\n    }\n    return DEFAULT_COLUMN_WIDTH;\n  };\n  const hasData = instance.data.length > 0;\n  if (scaleWidthMode === TableScaleWidthMode.Default || !hasData && loading) {\n    const defaultWidth = calculateDefaultTableWidth();\n    return columns.map(column => {\n      var _a;\n      return Object.assign(Object.assign({}, column), {\n        width: (_a = column.width) !== null && _a !== void 0 ? _a : defaultWidth\n      });\n    });\n  }\n  const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n  const columnMeta = visibleColumns.reduce((acc, column) => {\n    var _a, _b;\n    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {\n      acc[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor] = {\n        minHeaderWidth: column.width,\n        fullWidth: column.width,\n        contentCharAvg: 0\n      };\n      return acc;\n    }\n    const headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR;\n    // max character length\n    const contentMaxCharLength = Math.max(headerLength, ...rowSample.map(row => {\n      var _a, _b;\n      const dataPoint = (_a = row.values) === null || _a === void 0 ? void 0 : _a[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor];\n      if (dataPoint) {\n        if (typeof dataPoint === 'string') return dataPoint.length;\n        if (typeof dataPoint === 'number') return (dataPoint + '').length;\n      }\n      return 0;\n    }));\n    // avg character length\n    const contentCharAvg = rowSample.reduce((acc, item) => {\n      var _a, _b;\n      const dataPoint = (_a = item.values) === null || _a === void 0 ? void 0 : _a[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor];\n      let val = 0;\n      if (dataPoint) {\n        if (typeof dataPoint === 'string') val = dataPoint.length;\n        if (typeof dataPoint === 'number') val = (dataPoint + '').length;\n      }\n      return acc + val;\n    }, 0) / rowSample.length;\n    const minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);\n    acc[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor] = {\n      minHeaderWidth,\n      fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),\n      contentCharAvg\n    };\n    return acc;\n  }, {});\n  const totalCharNum = Object.values(columnMeta).reduce((acc, item) => acc + item.contentCharAvg, 0);\n  let reservedWidth = visibleColumns.reduce((acc, column) => {\n    var _a;\n    const {\n      minHeaderWidth,\n      fullWidth\n    } = columnMeta[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor];\n    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.Grow ? fullWidth : 0) || 0;\n  }, 0);\n  let availableWidth = totalWidth - reservedWidth;\n  if (availableWidth > 0) {\n    if (scaleWidthMode === TableScaleWidthMode.Grow) {\n      reservedWidth = visibleColumns.reduce((acc, column) => {\n        var _a;\n        const {\n          minHeaderWidth\n        } = columnMeta[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor];\n        return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;\n      }, 0);\n      availableWidth = totalWidth - reservedWidth;\n    }\n    return columns.map(column => {\n      var _a, _b, _c, _d, _e;\n      const isColumnVisible = ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor);\n      const meta = columnMeta[(_c = column.id) !== null && _c !== void 0 ? _c : column.accessor];\n      if (isColumnVisible && meta) {\n        const {\n          minHeaderWidth,\n          contentCharAvg\n        } = meta;\n        const additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;\n        const targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;\n        return Object.assign(Object.assign({}, column), {\n          width: (_d = column.width) !== null && _d !== void 0 ? _d : targetWidth,\n          minWidth: (_e = column.minWidth) !== null && _e !== void 0 ? _e : minHeaderWidth\n        });\n      }\n      return column;\n    });\n  }\n  // TableScaleWidthMode Grow\n  return columns.map(column => {\n    var _a, _b, _c, _d;\n    const isColumnVisible = ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor);\n    const meta = columnMeta[(_c = column.id) !== null && _c !== void 0 ? _c : column.accessor];\n    if (isColumnVisible && meta) {\n      const {\n        fullWidth\n      } = meta;\n      return Object.assign(Object.assign({}, column), {\n        width: (_d = column.width) !== null && _d !== void 0 ? _d : fullWidth,\n        maxWidth: MAX_WIDTH\n      });\n    }\n    return column;\n  });\n};\nexport const useDynamicColumnWidths = hooks => {\n  hooks.columns.push(columns);\n  hooks.columnsDeps.push(columnsDeps);\n};","map":{"version":3,"names":["TableScaleWidthMode","DEFAULT_COLUMN_WIDTH","ROW_SAMPLE_SIZE","DEFAULT_HEADER_NUM_CHAR","MAX_WIDTH","CELL_PADDING_PX","approximateHeaderPxFromCharLength","charLength","Math","sqrt","approximateContentPxFromCharLength","columnsDeps","deps","instance","state","webComponentsReactProperties","visibleColumns","data","rows","isLoadingPlaceholder","length","loading","hasRows","tableColResized","tableClientWidth","hiddenColumns","scaleWidthMode","scaleXFactor","stringToPx","dataPoint","id","ruler","document","getElementById","innerHTML","offsetWidth","smartColumns","columns","rowSample","slice","totalWidth","filter","column","_a","_b","isVisible","includes","accessor","columnMeta","reduce","metadata","columnIdOrAccessor","headerPx","width","minWidth","contentPxAvg","acc","item","values","val","uniqueId","Header","max","totalContentPxAvgPrio1","totalNumberColPrio2","reservedWidth","headerDefinesWidth","availableWidthPrio1","availableWidthPrio2","visibleColumnsAdaptedPrio1","map","meta","targetWidth","factor","min","Object","assign","nextWidth","visCol","find","col","undefined","Boolean","Smart","calculateDefaultTableWidth","columnsWithWidthProperties","_c","maxWidth","availableWidth","defaultColumnsCount","columnsWithFixedWidth","acceptedWidth","columnsWithMaxWidth","aggregatedColumnsMaxWidth","cur","aggregatedColumnsMinWidth","fixedWidth","hasData","Default","defaultWidth","minHeaderWidth","fullWidth","contentCharAvg","headerLength","contentMaxCharLength","row","totalCharNum","Grow","_d","_e","isColumnVisible","additionalSpaceFactor","useDynamicColumnWidths","hooks","push"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/hooks/useDynamicColumnWidths.js"],"sourcesContent":["import { TableScaleWidthMode } from '../../../enums/TableScaleWidthMode';\nimport { DEFAULT_COLUMN_WIDTH } from '../defaults/Column';\nconst ROW_SAMPLE_SIZE = 20;\nconst DEFAULT_HEADER_NUM_CHAR = 10;\nconst MAX_WIDTH = 700;\nconst CELL_PADDING_PX = 18; /* padding left and right 0.5rem each (16px) + borders (1px) + buffer (1px) */\n// a function, which approximates header px sizes given a character length\nconst approximateHeaderPxFromCharLength = (charLength) => charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;\nconst approximateContentPxFromCharLength = (charLength) => 8 * charLength;\nconst columnsDeps = (deps, { instance: { state, webComponentsReactProperties, visibleColumns, data, rows } }) => {\n    const isLoadingPlaceholder = !(data === null || data === void 0 ? void 0 : data.length) && webComponentsReactProperties.loading;\n    const hasRows = (rows === null || rows === void 0 ? void 0 : rows.length) > 0;\n    return [\n        ...deps,\n        hasRows,\n        !state.tableColResized && state.tableClientWidth,\n        state.hiddenColumns.length,\n        visibleColumns === null || visibleColumns === void 0 ? void 0 : visibleColumns.length,\n        webComponentsReactProperties.scaleWidthMode,\n        isLoadingPlaceholder,\n        webComponentsReactProperties.scaleXFactor\n    ];\n};\nconst stringToPx = (dataPoint, id) => {\n    const ruler = document.getElementById(`smartScaleModeHelper-${id}`);\n    if (ruler) {\n        ruler.innerHTML = `${dataPoint}`;\n        return ruler.offsetWidth;\n    }\n    return 0;\n};\nconst smartColumns = (columns, instance, hiddenColumns) => {\n    const { rows, state, webComponentsReactProperties } = instance;\n    const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n    const { tableClientWidth: totalWidth } = state;\n    const visibleColumns = columns.filter((column) => { var _a, _b; return ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor); });\n    const columnMeta = visibleColumns.reduce((metadata, column) => {\n        var _a;\n        const columnIdOrAccessor = ((_a = column.id) !== null && _a !== void 0 ? _a : column.accessor);\n        if (column.id === '__ui5wcr__internal_selection_column' ||\n            column.id === '__ui5wcr__internal_highlight_column' ||\n            column.id === '__ui5wcr__internal_navigation_column') {\n            metadata[columnIdOrAccessor] = {\n                headerPx: column.width || column.minWidth || 60,\n                contentPxAvg: 0\n            };\n            return metadata;\n        }\n        const contentPxAvg = rowSample.reduce((acc, item) => {\n            var _a;\n            const dataPoint = (_a = item.values) === null || _a === void 0 ? void 0 : _a[columnIdOrAccessor];\n            let val = 0;\n            if (dataPoint) {\n                val = stringToPx(dataPoint, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX;\n            }\n            return acc + val;\n        }, 0) / (rowSample.length || 1);\n        metadata[columnIdOrAccessor] = {\n            headerPx: typeof column.Header === 'string'\n                ? Math.max(stringToPx(column.Header, webComponentsReactProperties.uniqueId) + CELL_PADDING_PX, 60)\n                : 60,\n            contentPxAvg: contentPxAvg\n        };\n        return metadata;\n    }, {});\n    let totalContentPxAvgPrio1 = 0;\n    let totalNumberColPrio2 = 0;\n    // width reserved by predefined widths or columns defined by header\n    const reservedWidth = visibleColumns.reduce((acc, column) => {\n        var _a;\n        const columnIdOrAccessor = ((_a = column.id) !== null && _a !== void 0 ? _a : column.accessor);\n        const { contentPxAvg, headerPx } = columnMeta[columnIdOrAccessor];\n        if (contentPxAvg > headerPx) {\n            if (!column.minWidth && !column.width) {\n                totalContentPxAvgPrio1 += columnMeta[columnIdOrAccessor].contentPxAvg;\n                totalNumberColPrio2++;\n                return acc;\n            }\n            else {\n                return acc + Math.max(column.minWidth || 0, column.width || 0);\n            }\n        }\n        else {\n            if (!column.minWidth && !column.width) {\n                totalNumberColPrio2++;\n            }\n            const max = Math.max(column.minWidth || 0, column.width || 0, headerPx);\n            columnMeta[columnIdOrAccessor].headerDefinesWidth = true;\n            return acc + max;\n        }\n    }, 0);\n    const availableWidthPrio1 = totalWidth - reservedWidth;\n    let availableWidthPrio2 = availableWidthPrio1;\n    // Step 1: Give columns defined by content more space (priority 1)\n    const visibleColumnsAdaptedPrio1 = visibleColumns.map((column) => {\n        var _a;\n        const columnIdOrAccessor = ((_a = column.id) !== null && _a !== void 0 ? _a : column.accessor);\n        const meta = columnMeta[columnIdOrAccessor];\n        if (meta && !column.minWidth && !column.width && !meta.headerDefinesWidth) {\n            let targetWidth;\n            const { contentPxAvg, headerPx } = meta;\n            if (availableWidthPrio1 > 0) {\n                const factor = contentPxAvg / totalContentPxAvgPrio1;\n                targetWidth = Math.min(availableWidthPrio1 * factor, contentPxAvg);\n                availableWidthPrio2 -= targetWidth;\n            }\n            return Object.assign(Object.assign({}, column), { nextWidth: targetWidth || headerPx });\n        }\n        return column;\n    });\n    // Step 2: Give all columns more space (priority 2)\n    return visibleColumnsAdaptedPrio1.map((column) => {\n        var _a;\n        const columnIdOrAccessor = ((_a = column.id) !== null && _a !== void 0 ? _a : column.accessor);\n        const meta = columnMeta[columnIdOrAccessor];\n        const { headerPx } = meta;\n        if (meta && !column.minWidth && !column.width) {\n            let targetWidth = column.nextWidth || headerPx;\n            if (availableWidthPrio2 > 0) {\n                targetWidth = targetWidth + availableWidthPrio2 * (1 / totalNumberColPrio2);\n            }\n            return Object.assign(Object.assign({}, column), { width: targetWidth });\n        }\n        else {\n            return Object.assign(Object.assign({}, column), { width: Math.max(column.width || 0, 60, headerPx) });\n        }\n    });\n};\nconst columns = (columns, { instance }) => {\n    if (!instance.state || !instance.rows) {\n        return columns;\n    }\n    const { rows, state } = instance;\n    const { hiddenColumns, tableClientWidth: totalWidth } = state;\n    const { scaleWidthMode, loading } = instance.webComponentsReactProperties;\n    if (columns.length === 0 || !totalWidth || !TableScaleWidthMode[scaleWidthMode]) {\n        return columns;\n    }\n    // map columns to visibleColumns\n    const visibleColumns = instance.visibleColumns\n        .map((visCol) => {\n        const column = columns.find((col) => {\n            return (col.id === visCol.id || (col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id));\n        });\n        if (column) {\n            return column;\n        }\n        return column !== null && column !== void 0 ? column : false;\n    })\n        .filter(Boolean);\n    if (scaleWidthMode === TableScaleWidthMode.Smart) {\n        return smartColumns(columns, instance, hiddenColumns);\n    }\n    const calculateDefaultTableWidth = () => {\n        const columnsWithWidthProperties = visibleColumns\n            .filter((column) => { var _a, _b, _c; return (_c = (_b = (_a = column.width) !== null && _a !== void 0 ? _a : column.minWidth) !== null && _b !== void 0 ? _b : column.maxWidth) !== null && _c !== void 0 ? _c : false; })\n            .map((column) => {\n            var _a;\n            return ({\n                accessor: (_a = column.id) !== null && _a !== void 0 ? _a : column.accessor,\n                minWidth: column.minWidth,\n                width: column.width,\n                maxWidth: column.maxWidth\n            });\n        });\n        let availableWidth = totalWidth;\n        let defaultColumnsCount = visibleColumns.length;\n        const columnsWithFixedWidth = columnsWithWidthProperties\n            .map((column) => {\n            const { width, minWidth, maxWidth, accessor } = column;\n            if (width) {\n                // necessary because of default minWidth\n                const acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' &&\n                    accessor !== '__ui5wcr__internal_selection_column' &&\n                    accessor !== '__ui5wcr__internal_navigation_column' &&\n                    width < 60\n                    ? 60\n                    : width;\n                availableWidth -= acceptedWidth;\n                defaultColumnsCount--;\n                return acceptedWidth;\n            }\n            const columnsWithMaxWidth = columnsWithWidthProperties.filter((item) => item.maxWidth);\n            const aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce((acc, cur) => acc + cur.maxWidth, 0);\n            const aggregatedColumnsMinWidth = columnsWithWidthProperties\n                .filter((item) => item.minWidth && !item.maxWidth)\n                .reduce((acc, cur) => acc + cur.minWidth, 0);\n            if (minWidth > availableWidth / defaultColumnsCount) {\n                // don't apply minWidth if enough space is available because of maxWidth properties\n                if (availableWidth - aggregatedColumnsMaxWidth >\n                    aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {\n                    // apply minWidth only if it's larger than the calculated available width\n                    if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {\n                        availableWidth -= minWidth;\n                        defaultColumnsCount--;\n                        return minWidth;\n                    }\n                    return false;\n                }\n                availableWidth -= minWidth;\n                defaultColumnsCount--;\n                return minWidth;\n            }\n            if (maxWidth < availableWidth / defaultColumnsCount) {\n                availableWidth -= maxWidth;\n                defaultColumnsCount--;\n                return maxWidth;\n            }\n            return false;\n        })\n            .filter(Boolean);\n        const fixedWidth = columnsWithFixedWidth.reduce((acc, val) => acc + val, 0);\n        // check if columns are visible and table has width\n        if (visibleColumns.length > 0 && totalWidth > 0) {\n            // set fixedWidth as defaultWidth if all visible columns have fixed value\n            if (visibleColumns.length === columnsWithFixedWidth.length) {\n                return fixedWidth / visibleColumns.length;\n            }\n            // spread default columns\n            if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {\n                return (totalWidth - fixedWidth) / defaultColumnsCount;\n            }\n        }\n        return DEFAULT_COLUMN_WIDTH;\n    };\n    const hasData = instance.data.length > 0;\n    if (scaleWidthMode === TableScaleWidthMode.Default || (!hasData && loading)) {\n        const defaultWidth = calculateDefaultTableWidth();\n        return columns.map((column) => { var _a; return (Object.assign(Object.assign({}, column), { width: (_a = column.width) !== null && _a !== void 0 ? _a : defaultWidth })); });\n    }\n    const rowSample = rows.slice(0, ROW_SAMPLE_SIZE);\n    const columnMeta = visibleColumns.reduce((acc, column) => {\n        var _a, _b;\n        if (column.id === '__ui5wcr__internal_selection_column' ||\n            column.id === '__ui5wcr__internal_highlight_column' ||\n            column.id === '__ui5wcr__internal_navigation_column') {\n            acc[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor] = {\n                minHeaderWidth: column.width,\n                fullWidth: column.width,\n                contentCharAvg: 0\n            };\n            return acc;\n        }\n        const headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR;\n        // max character length\n        const contentMaxCharLength = Math.max(headerLength, ...rowSample.map((row) => {\n            var _a, _b;\n            const dataPoint = (_a = row.values) === null || _a === void 0 ? void 0 : _a[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor];\n            if (dataPoint) {\n                if (typeof dataPoint === 'string')\n                    return dataPoint.length;\n                if (typeof dataPoint === 'number')\n                    return (dataPoint + '').length;\n            }\n            return 0;\n        }));\n        // avg character length\n        const contentCharAvg = rowSample.reduce((acc, item) => {\n            var _a, _b;\n            const dataPoint = (_a = item.values) === null || _a === void 0 ? void 0 : _a[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor];\n            let val = 0;\n            if (dataPoint) {\n                if (typeof dataPoint === 'string')\n                    val = dataPoint.length;\n                if (typeof dataPoint === 'number')\n                    val = (dataPoint + '').length;\n            }\n            return acc + val;\n        }, 0) / rowSample.length;\n        const minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);\n        acc[(_b = column.id) !== null && _b !== void 0 ? _b : column.accessor] = {\n            minHeaderWidth,\n            fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),\n            contentCharAvg\n        };\n        return acc;\n    }, {});\n    const totalCharNum = Object.values(columnMeta).reduce((acc, item) => acc + item.contentCharAvg, 0);\n    let reservedWidth = visibleColumns.reduce((acc, column) => {\n        var _a;\n        const { minHeaderWidth, fullWidth } = columnMeta[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor];\n        return (acc +\n            Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.Grow ? fullWidth : 0) || 0);\n    }, 0);\n    let availableWidth = totalWidth - reservedWidth;\n    if (availableWidth > 0) {\n        if (scaleWidthMode === TableScaleWidthMode.Grow) {\n            reservedWidth = visibleColumns.reduce((acc, column) => {\n                var _a;\n                const { minHeaderWidth } = columnMeta[(_a = column.id) !== null && _a !== void 0 ? _a : column.accessor];\n                return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;\n            }, 0);\n            availableWidth = totalWidth - reservedWidth;\n        }\n        return columns.map((column) => {\n            var _a, _b, _c, _d, _e;\n            const isColumnVisible = ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor);\n            const meta = columnMeta[(_c = column.id) !== null && _c !== void 0 ? _c : column.accessor];\n            if (isColumnVisible && meta) {\n                const { minHeaderWidth, contentCharAvg } = meta;\n                const additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;\n                const targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;\n                return Object.assign(Object.assign({}, column), { width: (_d = column.width) !== null && _d !== void 0 ? _d : targetWidth, minWidth: (_e = column.minWidth) !== null && _e !== void 0 ? _e : minHeaderWidth });\n            }\n            return column;\n        });\n    }\n    // TableScaleWidthMode Grow\n    return columns.map((column) => {\n        var _a, _b, _c, _d;\n        const isColumnVisible = ((_a = column.isVisible) !== null && _a !== void 0 ? _a : true) && !hiddenColumns.includes((_b = column.id) !== null && _b !== void 0 ? _b : column.accessor);\n        const meta = columnMeta[(_c = column.id) !== null && _c !== void 0 ? _c : column.accessor];\n        if (isColumnVisible && meta) {\n            const { fullWidth } = meta;\n            return Object.assign(Object.assign({}, column), { width: (_d = column.width) !== null && _d !== void 0 ? _d : fullWidth, maxWidth: MAX_WIDTH });\n        }\n        return column;\n    });\n};\nexport const useDynamicColumnWidths = (hooks) => {\n    hooks.columns.push(columns);\n    hooks.columnsDeps.push(columnsDeps);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}