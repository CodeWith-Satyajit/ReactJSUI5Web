{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as i, Directive as s, PartType as r } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst o = i(class extends s {\n  constructor(t) {\n    var i;\n    if (super(t), t.type !== r.ATTRIBUTE || \"class\" !== t.name || (null === (i = t.strings) || void 0 === i ? void 0 : i.length) > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n  }\n  render(t) {\n    return \" \" + Object.keys(t).filter(i => t[i]).join(\" \") + \" \";\n  }\n  update(i, _ref) {\n    let [s] = _ref;\n    var r, o;\n    if (void 0 === this.nt) {\n      this.nt = new Set(), void 0 !== i.strings && (this.st = new Set(i.strings.join(\" \").split(/\\s/).filter(t => \"\" !== t)));\n      for (const t in s) s[t] && !(null === (r = this.st) || void 0 === r ? void 0 : r.has(t)) && this.nt.add(t);\n      return this.render(s);\n    }\n    const e = i.element.classList;\n    this.nt.forEach(t => {\n      t in s || (e.remove(t), this.nt.delete(t));\n    });\n    for (const t in s) {\n      const i = !!s[t];\n      i === this.nt.has(t) || (null === (o = this.st) || void 0 === o ? void 0 : o.has(t)) || (i ? (e.add(t), this.nt.add(t)) : (e.remove(t), this.nt.delete(t)));\n    }\n    return t;\n  }\n});\nexport { o as classMap };","map":{"version":3,"mappings":";;;;;;;MA2HaA,IAAWC,EArGxB,cAAgCC;EAQ9BC,YAAYC;IAAAA;IAEV,IADAC,MAAMD,IAEJA,EAASE,SAASC,EAASC,aACT,YAAlBJ,EAASK,mBACRC,MAASC,sCAASC,UAAoB,GAEvC,MAAUC,MACR,qGAIL;EAAA;EAEDC,OAAOC;IAEL,OACE,MACAC,OAAOC,KAAKF,GACTG,OAAQC,KAAQJ,EAAUI,IAC1BC,KAAK,OACR,GAEH;EAAA;EAEQC,OAAOC,SAAsBP;IAAAA,IAAtBO,CAAsBP;IAAAA;IAEpC,SAA8BQ,MAA1BC,KAAKC,IAAgC;MACvCD,KAAKC,KAAmB,IAAIC,YACPH,MAAjBD,EAAKX,YACPa,KAAKG,KAAiB,IAAID,IACxBJ,EAAKX,QACFS,KAAK,KACLQ,MAAM,MACNV,OAAQW,KAAY,OAANA;MAGrB,KAAK,MAAMpB,KAAQM,GACbA,EAAUN,QAA+B,UAArBC,SAAKiB,YAAgB,yBAAIlB,OAC/Ce,KAAKC,GAAiBK,IAAIrB;MAG9B,OAAOe,KAAKV,OAAOC,EACpB;IAAA;IAED,MAAMgB,IAAYT,EAAKU,QAAQD;IAK/BP,KAAKC,GAAiBQ,QAASxB;MACvBA,KAAQM,MACZgB,EAAUG,OAAOzB,IACjBe,KAAKC,GAAkBU,OAAO1B,GAC/B;IAAA;IAIH,KAAK,MAAMA,KAAQM,GAAW;MAG5B,MAAMqB,MAAUrB,EAAUN;MAExB2B,MAAUZ,KAAKC,GAAiBY,IAAI5B,OACd,UAArB6B,SAAKX,YAAgB,yBAAIlB,QAEtB2B,KACFL,EAAUD,IAAIrB,IACde,KAAKC,GAAiBK,IAAIrB,OAE1BsB,EAAUG,OAAOzB,IACjBe,KAAKC,GAAiBU,OAAO1B,IAGlC;IAAA;IACD,OAAO8B,CACR;EAAA;AAAA;AAAA","names":["classMap","directive","Directive","constructor","partInfo","super","type","PartType","ATTRIBUTE","name","_a","strings","length","Error","render","classInfo","Object","keys","filter","key","join","update","part","undefined","this","_previousClasses","Set","_staticClasses","split","s","add","classList","element","forEach","remove","delete","value","has","_b","noChange"],"sources":["../src/directives/class-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"]},"metadata":{},"sourceType":"module"}