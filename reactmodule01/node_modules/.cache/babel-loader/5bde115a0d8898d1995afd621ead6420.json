{"ast":null,"code":"let resizeObserver;\nconst observedElements = new Map();\nconst getResizeObserver = () => {\n  if (!resizeObserver) {\n    resizeObserver = new window.ResizeObserver(entries => {\n      entries.forEach(entry => {\n        const callbacks = observedElements.get(entry.target);\n        callbacks.forEach(callback => callback());\n      });\n    });\n  }\n  return resizeObserver;\n};\nlet observe = (element, callback) => {\n  const callbacks = observedElements.get(element) || [];\n\n  // if no callbacks have been added for this element - start observing it\n  if (!callbacks.length) {\n    getResizeObserver().observe(element);\n  }\n\n  // save the callbacks in an array\n  observedElements.set(element, [...callbacks, callback]);\n};\nlet unobserve = (element, callback) => {\n  const callbacks = observedElements.get(element) || [];\n  if (callbacks.length === 0) {\n    return;\n  }\n  const filteredCallbacks = callbacks.filter(fn => fn !== callback);\n  if (filteredCallbacks.length === 0) {\n    getResizeObserver().unobserve(element);\n    observedElements.delete(element);\n  } else {\n    observedElements.set(element, filteredCallbacks);\n  }\n};\n\n/**\n * Allows to register/deregister resize observers for a DOM element\n *\n * @public\n * @class\n  */\nclass ResizeHandler {\n  /**\n   * @static\n   * @public\n   * @param {*} element UI5 Web Component or DOM Element to be observed\n   * @param {*} callback Callback to be executed\n   */\n  static register(element, callback) {\n    if (element.isUI5Element) {\n      element = element.getDomRef();\n    }\n    if (element instanceof HTMLElement) {\n      observe(element, callback);\n    } else {\n      console.warn(\"Cannot register ResizeHandler for element\", element); // eslint-disable-line\n    }\n  }\n\n  /**\n   * @static\n   * @public\n   * @param {*} element UI5 Web Component or DOM Element to be unobserved\n   * @param {*} callback Callback to be removed\n   */\n  static deregister(element, callback) {\n    if (element.isUI5Element) {\n      element = element.getDomRef();\n    }\n    if (element instanceof HTMLElement) {\n      unobserve(element, callback);\n    } else {\n      console.warn(\"Cannot deregister ResizeHandler for element\", element); // eslint-disable-line\n    }\n  }\n}\n\n/**\n * Set a function to be executed whenever a DOM node needs to be observed for size change.\n * @public\n * @param fn\n */\nconst setResizeHandlerObserveFn = fn => {\n  observe = fn;\n};\n\n/**\n * Set a function to be executed whenever a DOM node needs to no longer be observed for size changes\n * @public\n * @param fn\n */\nconst setResizeHandlerUnobserveFn = fn => {\n  unobserve = fn;\n};\nexport default ResizeHandler;\nexport { setResizeHandlerObserveFn, setResizeHandlerUnobserveFn };","map":{"version":3,"names":["resizeObserver","observedElements","Map","getResizeObserver","window","ResizeObserver","entries","forEach","entry","callbacks","get","target","callback","observe","element","length","set","unobserve","filteredCallbacks","filter","fn","delete","ResizeHandler","register","isUI5Element","getDomRef","HTMLElement","console","warn","deregister","setResizeHandlerObserveFn","setResizeHandlerUnobserveFn"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/delegate/ResizeHandler.js"],"sourcesContent":["let resizeObserver;\nconst observedElements = new Map();\n\nconst getResizeObserver = () => {\n\tif (!resizeObserver) {\n\t\tresizeObserver = new window.ResizeObserver(entries => {\n\t\t\tentries.forEach(entry => {\n\t\t\t\tconst callbacks = observedElements.get(entry.target);\n\t\t\t\tcallbacks.forEach(callback => callback());\n\t\t\t});\n\t\t});\n\t}\n\treturn resizeObserver;\n};\n\nlet observe = (element, callback) => {\n\tconst callbacks = observedElements.get(element) || [];\n\n\t// if no callbacks have been added for this element - start observing it\n\tif (!callbacks.length) {\n\t\tgetResizeObserver().observe(element);\n\t}\n\n\t// save the callbacks in an array\n\tobservedElements.set(element, [...callbacks, callback]);\n};\n\nlet unobserve = (element, callback) => {\n\tconst callbacks = observedElements.get(element) || [];\n\tif (callbacks.length === 0) {\n\t\treturn;\n\t}\n\n\tconst filteredCallbacks = callbacks.filter(fn => fn !== callback);\n\tif (filteredCallbacks.length === 0) {\n\t\tgetResizeObserver().unobserve(element);\n\t\tobservedElements.delete(element);\n\t} else {\n\t\tobservedElements.set(element, filteredCallbacks);\n\t}\n};\n\n/**\n * Allows to register/deregister resize observers for a DOM element\n *\n * @public\n * @class\n  */\nclass ResizeHandler {\n\t/**\n\t * @static\n\t * @public\n\t * @param {*} element UI5 Web Component or DOM Element to be observed\n\t * @param {*} callback Callback to be executed\n\t */\n\tstatic register(element, callback) {\n\t\tif (element.isUI5Element) {\n\t\t\telement = element.getDomRef();\n\t\t}\n\n\t\tif (element instanceof HTMLElement) {\n\t\t\tobserve(element, callback);\n\t\t} else {\n\t\t\tconsole.warn(\"Cannot register ResizeHandler for element\", element); // eslint-disable-line\n\t\t}\n\t}\n\n\t/**\n\t * @static\n\t * @public\n\t * @param {*} element UI5 Web Component or DOM Element to be unobserved\n\t * @param {*} callback Callback to be removed\n\t */\n\tstatic deregister(element, callback) {\n\t\tif (element.isUI5Element) {\n\t\t\telement = element.getDomRef();\n\t\t}\n\n\t\tif (element instanceof HTMLElement) {\n\t\t\tunobserve(element, callback);\n\t\t} else {\n\t\t\tconsole.warn(\"Cannot deregister ResizeHandler for element\", element); // eslint-disable-line\n\t\t}\n\t}\n}\n\n/**\n * Set a function to be executed whenever a DOM node needs to be observed for size change.\n * @public\n * @param fn\n */\nconst setResizeHandlerObserveFn = fn => {\n\tobserve = fn;\n};\n\n/**\n * Set a function to be executed whenever a DOM node needs to no longer be observed for size changes\n * @public\n * @param fn\n */\nconst setResizeHandlerUnobserveFn = fn => {\n\tunobserve = fn;\n};\n\nexport default ResizeHandler;\nexport { setResizeHandlerObserveFn, setResizeHandlerUnobserveFn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}