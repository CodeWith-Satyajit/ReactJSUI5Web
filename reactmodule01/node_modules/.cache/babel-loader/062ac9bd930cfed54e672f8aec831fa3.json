{"ast":null,"code":"/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"00ffff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"0000ff\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"00ffff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgrey: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"ff00ff\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  grey: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgrey: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"778899\",\n  lightslategrey: \"778899\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"00ff00\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"ff00ff\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  red: \"ff0000\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"ffffff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ffff00\",\n  yellowgreen: \"9acd32\",\n  transparent: \"00000000\"\n};\nconst getRGBColor = color => {\n  if (color.startsWith(\"rgba\")) {\n    return RGBAToRGB(color);\n  }\n  if (color.startsWith(\"rgb\")) {\n    return RGBStringToRGBObject(color);\n  }\n\n  // HEX\n  if (color.indexOf(\"#\") === 0) {\n    // Shorthand Syntax\n    if (color.length === 4) {\n      color = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n    } else {\n      color = color.slice(1, color.length);\n    }\n  }\n\n  // Css Color\n  if (Object.keys(CSSColors).includes(color)) {\n    color = CSSColors[color];\n  }\n  return HEXToRGB(color);\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\nconst RGBAToRGB = color => {\n  const openingBracketIndex = color.indexOf(\"(\"),\n    commasIndexes = [];\n  for (let i = 0; i < color.length; i++) {\n    if (color[i] === \",\") {\n      commasIndexes.push(i);\n    }\n  }\n  return {\n    r: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n    g: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n    b: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim())\n  };\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\nconst RGBStringToRGBObject = color => {\n  const openingBracketIndex = color.indexOf(\"(\"),\n    closingBraketIndex = color.indexOf(\")\"),\n    commasIndexes = [];\n  for (let i = 0; i < color.length; i++) {\n    if (color[i] === \",\") {\n      commasIndexes.push(i);\n    }\n  }\n  return {\n    r: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n    g: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n    b: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim())\n  };\n};\nconst HSLToRGB = function () {\n  let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    h: undefined,\n    s: undefined,\n    l: undefined\n  };\n  // Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n  const C = (1 - Math.abs(2 * color.l - 1)) * color.s,\n    X = C * (1 - Math.abs(color.h / 60 % 2 - 1)),\n    m = color.l - C / 2;\n  let tempColor = {};\n  switch (Math.round(color.h / 60)) {\n    // 0 ≤ H < 60\n    case 0:\n      tempColor = {\n        r: C,\n        g: X,\n        b: 0\n      };\n      break;\n\n    // 60 ≤ H < 120\n    case 1:\n      tempColor = {\n        r: X,\n        g: C,\n        b: 0\n      };\n      break;\n\n    // 120 ≤ H < 180\n    case 2:\n      tempColor = {\n        r: 0,\n        g: C,\n        b: X\n      };\n      break;\n\n    // 180 ≤ H < 240\n    case 3:\n      tempColor = {\n        r: 0,\n        g: X,\n        b: C\n      };\n      break;\n\n    // 240 ≤ H < 300\n    case 4:\n      tempColor = {\n        r: X,\n        g: 0,\n        b: C\n      };\n      break;\n\n    // 300 ≤ H < 360\n    default:\n      tempColor = {\n        r: C,\n        g: 0,\n        b: X\n      };\n  }\n  return {\n    r: Math.floor((tempColor.r + m) * 255),\n    g: Math.floor((tempColor.g + m) * 255),\n    b: Math.floor((tempColor.b + m) * 255)\n  };\n};\nconst HEXToRGB = hex => {\n  // Please make sure you pass a valid 6 digit hex color\n  // In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n\n  const rgbValues = {\n    r: hex.substr(0, 2),\n    g: hex.substr(2, 2),\n    b: hex.substr(4, 2)\n  };\n  const rgbKeys = Object.keys(rgbValues);\n  rgbKeys.forEach(key => {\n    rgbValues[key] = parseInt(rgbValues[key], 16);\n  });\n  return rgbValues;\n};\n\n/**\n * Returns the hex value of the color as string\n * @param {Object} color Receives an object with the properties for each of the main colors(r, g, b)\n */\nconst RGBtoHEX = color => {\n  const hexMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"];\n  let hexValue = \"#\";\n  let divisionNumber = color.r / 16;\n  let remainder = color.r % 16;\n  hexValue += String(hexMap[Math.floor(divisionNumber)]);\n  hexValue += String(hexMap[remainder]);\n  divisionNumber = color.g / 16;\n  remainder = color.g % 16;\n  hexValue += String(hexMap[Math.floor(divisionNumber)]);\n  hexValue += String(hexMap[remainder]);\n  divisionNumber = color.b / 16;\n  remainder = color.b % 16;\n  hexValue += String(hexMap[Math.floor(divisionNumber)]);\n  hexValue += String(hexMap[remainder]);\n  return hexValue;\n};\nconst RGBToHSL = function () {\n  let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    r: undefined,\n    g: undefined,\n    b: undefined\n  };\n  const R = color.r / 255,\n    G = color.g / 255,\n    B = color.b / 255,\n    max = Math.max(R, G, B),\n    min = Math.min(R, G, B),\n    delta = max - min;\n  let h, s;\n\n  // Hue calculation\n  if (delta === 0) {\n    h = 0;\n  } else if (max === R) {\n    h = 60 * ((G - B) / delta % 6);\n  } else if (max === G) {\n    h = 60 * ((B - R) / delta + 2);\n  } else if (max === B) {\n    h = 60 * ((R - G) / delta + 4);\n  }\n\n  // Lightness calculation\n  const l = (max + min) / 2;\n\n  // Saturation calculation\n  if (delta === 0) {\n    s = 0;\n  } else {\n    s = delta / (1 - Math.abs(2 * l - 1));\n  }\n  return {\n    h,\n    s,\n    l\n  };\n};\nexport { getRGBColor, HSLToRGB, HEXToRGB, RGBToHSL, RGBStringToRGBObject, RGBtoHEX };","map":{"version":3,"names":["CSSColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","transparent","getRGBColor","color","startsWith","RGBAToRGB","RGBStringToRGBObject","indexOf","length","slice","Object","keys","includes","HEXToRGB","openingBracketIndex","commasIndexes","i","push","r","parseInt","trim","g","b","closingBraketIndex","HSLToRGB","h","undefined","s","l","C","Math","abs","X","m","tempColor","round","floor","hex","rgbValues","substr","rgbKeys","forEach","key","RGBtoHEX","hexMap","hexValue","divisionNumber","remainder","String","RGBToHSL","R","G","B","max","min","delta"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/util/ColorConversion.js"],"sourcesContent":["/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = {\n\taliceblue: \"f0f8ff\",\n\tantiquewhite: \"faebd7\",\n\taqua: \"00ffff\",\n\taquamarine: \"7fffd4\",\n\tazure: \"f0ffff\",\n\tbeige: \"f5f5dc\",\n\tbisque: \"ffe4c4\",\n\tblack: \"000000\",\n\tblanchedalmond: \"ffebcd\",\n\tblue: \"0000ff\",\n\tblueviolet: \"8a2be2\",\n\tbrown: \"a52a2a\",\n\tburlywood: \"deb887\",\n\tcadetblue: \"5f9ea0\",\n\tchartreuse: \"7fff00\",\n\tchocolate: \"d2691e\",\n\tcoral: \"ff7f50\",\n\tcornflowerblue: \"6495ed\",\n\tcornsilk: \"fff8dc\",\n\tcrimson: \"dc143c\",\n\tcyan: \"00ffff\",\n\tdarkblue: \"00008b\",\n\tdarkcyan: \"008b8b\",\n\tdarkgoldenrod: \"b8860b\",\n\tdarkgray: \"a9a9a9\",\n\tdarkgrey: \"a9a9a9\",\n\tdarkgreen: \"006400\",\n\tdarkkhaki: \"bdb76b\",\n\tdarkmagenta: \"8b008b\",\n\tdarkolivegreen: \"556b2f\",\n\tdarkorange: \"ff8c00\",\n\tdarkorchid: \"9932cc\",\n\tdarkred: \"8b0000\",\n\tdarksalmon: \"e9967a\",\n\tdarkseagreen: \"8fbc8f\",\n\tdarkslateblue: \"483d8b\",\n\tdarkslategray: \"2f4f4f\",\n\tdarkslategrey: \"2f4f4f\",\n\tdarkturquoise: \"00ced1\",\n\tdarkviolet: \"9400d3\",\n\tdeeppink: \"ff1493\",\n\tdeepskyblue: \"00bfff\",\n\tdimgray: \"696969\",\n\tdimgrey: \"696969\",\n\tdodgerblue: \"1e90ff\",\n\tfirebrick: \"b22222\",\n\tfloralwhite: \"fffaf0\",\n\tforestgreen: \"228b22\",\n\tfuchsia: \"ff00ff\",\n\tgainsboro: \"dcdcdc\",\n\tghostwhite: \"f8f8ff\",\n\tgold: \"ffd700\",\n\tgoldenrod: \"daa520\",\n\tgray: \"808080\",\n\tgrey: \"808080\",\n\tgreen: \"008000\",\n\tgreenyellow: \"adff2f\",\n\thoneydew: \"f0fff0\",\n\thotpink: \"ff69b4\",\n\tindianred: \"cd5c5c\",\n\tindigo: \"4b0082\",\n\tivory: \"fffff0\",\n\tkhaki: \"f0e68c\",\n\tlavender: \"e6e6fa\",\n\tlavenderblush: \"fff0f5\",\n\tlawngreen: \"7cfc00\",\n\tlemonchiffon: \"fffacd\",\n\tlightblue: \"add8e6\",\n\tlightcoral: \"f08080\",\n\tlightcyan: \"e0ffff\",\n\tlightgoldenrodyellow: \"fafad2\",\n\tlightgray: \"d3d3d3\",\n\tlightgrey: \"d3d3d3\",\n\tlightgreen: \"90ee90\",\n\tlightpink: \"ffb6c1\",\n\tlightsalmon: \"ffa07a\",\n\tlightseagreen: \"20b2aa\",\n\tlightskyblue: \"87cefa\",\n\tlightslategray: \"778899\",\n\tlightslategrey: \"778899\",\n\tlightsteelblue: \"b0c4de\",\n\tlightyellow: \"ffffe0\",\n\tlime: \"00ff00\",\n\tlimegreen: \"32cd32\",\n\tlinen: \"faf0e6\",\n\tmagenta: \"ff00ff\",\n\tmaroon: \"800000\",\n\tmediumaquamarine: \"66cdaa\",\n\tmediumblue: \"0000cd\",\n\tmediumorchid: \"ba55d3\",\n\tmediumpurple: \"9370db\",\n\tmediumseagreen: \"3cb371\",\n\tmediumslateblue: \"7b68ee\",\n\tmediumspringgreen: \"00fa9a\",\n\tmediumturquoise: \"48d1cc\",\n\tmediumvioletred: \"c71585\",\n\tmidnightblue: \"191970\",\n\tmintcream: \"f5fffa\",\n\tmistyrose: \"ffe4e1\",\n\tmoccasin: \"ffe4b5\",\n\tnavajowhite: \"ffdead\",\n\tnavy: \"000080\",\n\toldlace: \"fdf5e6\",\n\tolive: \"808000\",\n\tolivedrab: \"6b8e23\",\n\torange: \"ffa500\",\n\torangered: \"ff4500\",\n\torchid: \"da70d6\",\n\tpalegoldenrod: \"eee8aa\",\n\tpalegreen: \"98fb98\",\n\tpaleturquoise: \"afeeee\",\n\tpalevioletred: \"db7093\",\n\tpapayawhip: \"ffefd5\",\n\tpeachpuff: \"ffdab9\",\n\tperu: \"cd853f\",\n\tpink: \"ffc0cb\",\n\tplum: \"dda0dd\",\n\tpowderblue: \"b0e0e6\",\n\tpurple: \"800080\",\n\tred: \"ff0000\",\n\trosybrown: \"bc8f8f\",\n\troyalblue: \"4169e1\",\n\tsaddlebrown: \"8b4513\",\n\tsalmon: \"fa8072\",\n\tsandybrown: \"f4a460\",\n\tseagreen: \"2e8b57\",\n\tseashell: \"fff5ee\",\n\tsienna: \"a0522d\",\n\tsilver: \"c0c0c0\",\n\tskyblue: \"87ceeb\",\n\tslateblue: \"6a5acd\",\n\tslategray: \"708090\",\n\tslategrey: \"708090\",\n\tsnow: \"fffafa\",\n\tspringgreen: \"00ff7f\",\n\tsteelblue: \"4682b4\",\n\ttan: \"d2b48c\",\n\tteal: \"008080\",\n\tthistle: \"d8bfd8\",\n\ttomato: \"ff6347\",\n\tturquoise: \"40e0d0\",\n\tviolet: \"ee82ee\",\n\twheat: \"f5deb3\",\n\twhite: \"ffffff\",\n\twhitesmoke: \"f5f5f5\",\n\tyellow: \"ffff00\",\n\tyellowgreen: \"9acd32\",\n\ttransparent: \"00000000\",\n};\n\nconst getRGBColor = color => {\n\tif (color.startsWith(\"rgba\")) {\n\t\treturn RGBAToRGB(color);\n\t}\n\n\tif (color.startsWith(\"rgb\")) {\n\t\treturn RGBStringToRGBObject(color);\n\t}\n\n\t// HEX\n\tif (color.indexOf(\"#\") === 0) {\n\t\t// Shorthand Syntax\n\t\tif (color.length === 4) {\n\t\t\tcolor = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n\t\t} else {\n\t\t\tcolor = color.slice(1, color.length);\n\t\t}\n\t}\n\n\t// Css Color\n\tif (Object.keys(CSSColors).includes(color)) {\n\t\tcolor = CSSColors[color];\n\t}\n\n\treturn HEXToRGB(color);\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\nconst RGBAToRGB = color => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim()),\n\t};\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\nconst RGBStringToRGBObject = color => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tclosingBraketIndex = color.indexOf(\")\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim()),\n\t};\n};\n\nconst HSLToRGB = (color = {\n\th: undefined,\n\ts: undefined,\n\tl: undefined,\n}) => {\n\t// Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n\tconst C = (1 - Math.abs((2 * color.l) - 1)) * color.s,\n\t\tX = C * (1 - Math.abs(((color.h / 60) % 2) - 1)),\n\t\tm = color.l - C / 2;\n\n\tlet tempColor = {};\n\tswitch (Math.round(color.h / 60)) {\n\t// 0 ≤ H < 60\n\tcase 0:\n\t\ttempColor = {\n\t\t\tr: C,\n\t\t\tg: X,\n\t\t\tb: 0,\n\t\t};\n\t\tbreak;\n\n\t// 60 ≤ H < 120\n\tcase 1:\n\t\ttempColor = {\n\t\t\tr: X,\n\t\t\tg: C,\n\t\t\tb: 0,\n\t\t};\n\t\tbreak;\n\n\t// 120 ≤ H < 180\n\tcase 2:\n\t\ttempColor = {\n\t\t\tr: 0,\n\t\t\tg: C,\n\t\t\tb: X,\n\t\t};\n\t\tbreak;\n\n\t// 180 ≤ H < 240\n\tcase 3:\n\t\ttempColor = {\n\t\t\tr: 0,\n\t\t\tg: X,\n\t\t\tb: C,\n\t\t};\n\t\tbreak;\n\n\t// 240 ≤ H < 300\n\tcase 4:\n\t\ttempColor = {\n\t\t\tr: X,\n\t\t\tg: 0,\n\t\t\tb: C,\n\t\t};\n\t\tbreak;\n\n\t// 300 ≤ H < 360\n\tdefault:\n\t\ttempColor = {\n\t\t\tr: C,\n\t\t\tg: 0,\n\t\t\tb: X,\n\t\t};\n\t}\n\n\treturn {\n\t\tr: Math.floor((tempColor.r + m) * 255),\n\t\tg: Math.floor((tempColor.g + m) * 255),\n\t\tb: Math.floor((tempColor.b + m) * 255),\n\t};\n};\n\nconst HEXToRGB = hex => {\n\t// Please make sure you pass a valid 6 digit hex color\n\t// In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n\n\tconst rgbValues = {\n\t\tr: hex.substr(0, 2),\n\t\tg: hex.substr(2, 2),\n\t\tb: hex.substr(4, 2),\n\t};\n\n\tconst rgbKeys = Object.keys(rgbValues);\n\n\trgbKeys.forEach(key => {\n\t\trgbValues[key] = parseInt(rgbValues[key], 16);\n\t});\n\n\treturn rgbValues;\n};\n\n/**\n * Returns the hex value of the color as string\n * @param {Object} color Receives an object with the properties for each of the main colors(r, g, b)\n */\nconst RGBtoHEX = color => {\n\tconst hexMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"];\n\tlet hexValue = \"#\";\n\n\tlet divisionNumber = color.r / 16;\n\tlet remainder = color.r % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.g / 16;\n\tremainder = color.g % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.b / 16;\n\tremainder = color.b % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\treturn hexValue;\n};\n\nconst RGBToHSL = (color = {\n\tr: undefined,\n\tg: undefined,\n\tb: undefined,\n}) => {\n\tconst R = color.r / 255,\n\t\tG = color.g / 255,\n\t\tB = color.b / 255,\n\t\tmax = Math.max(R, G, B),\n\t\tmin = Math.min(R, G, B),\n\t\tdelta = max - min;\n\n\tlet h,\n\t\ts;\n\n\t// Hue calculation\n\tif (delta === 0) {\n\t\th = 0;\n\t} else if (max === R) {\n\t\th = 60 * (((G - B) / delta) % 6);\n\t} else if (max === G) {\n\t\th = 60 * (((B - R) / delta) + 2);\n\t} else if (max === B) {\n\t\th = 60 * (((R - G) / delta) + 4);\n\t}\n\n\t// Lightness calculation\n\tconst l = (max + min) / 2;\n\n\t// Saturation calculation\n\tif (delta === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = delta / (1 - Math.abs(2 * l - 1));\n\t}\n\n\treturn {\n\t\th,\n\t\ts,\n\t\tl,\n\t};\n};\n\nexport {\n\tgetRGBColor,\n\tHSLToRGB,\n\tHEXToRGB,\n\tRGBToHSL,\n\tRGBStringToRGBObject,\n\tRGBtoHEX,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,SAAS,GAAG;EACjBC,SAAS,EAAE,QAAQ;EACnBC,YAAY,EAAE,QAAQ;EACtBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,cAAc,EAAE,QAAQ;EACxBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,KAAK,EAAE,QAAQ;EACfC,cAAc,EAAE,QAAQ;EACxBC,QAAQ,EAAE,QAAQ;EAClBC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,QAAQ;EAClBC,aAAa,EAAE,QAAQ;EACvBC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,QAAQ;EAClBC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,WAAW,EAAE,QAAQ;EACrBC,cAAc,EAAE,QAAQ;EACxBC,UAAU,EAAE,QAAQ;EACpBC,UAAU,EAAE,QAAQ;EACpBC,OAAO,EAAE,QAAQ;EACjBC,UAAU,EAAE,QAAQ;EACpBC,YAAY,EAAE,QAAQ;EACtBC,aAAa,EAAE,QAAQ;EACvBC,aAAa,EAAE,QAAQ;EACvBC,aAAa,EAAE,QAAQ;EACvBC,aAAa,EAAE,QAAQ;EACvBC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE,QAAQ;EAClBC,WAAW,EAAE,QAAQ;EACrBC,OAAO,EAAE,QAAQ;EACjBC,OAAO,EAAE,QAAQ;EACjBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,WAAW,EAAE,QAAQ;EACrBC,WAAW,EAAE,QAAQ;EACrBC,OAAO,EAAE,QAAQ;EACjBC,SAAS,EAAE,QAAQ;EACnBC,UAAU,EAAE,QAAQ;EACpBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,QAAQ;EACnBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,WAAW,EAAE,QAAQ;EACrBC,QAAQ,EAAE,QAAQ;EAClBC,OAAO,EAAE,QAAQ;EACjBC,SAAS,EAAE,QAAQ;EACnBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,QAAQ;EAClBC,aAAa,EAAE,QAAQ;EACvBC,SAAS,EAAE,QAAQ;EACnBC,YAAY,EAAE,QAAQ;EACtBC,SAAS,EAAE,QAAQ;EACnBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,oBAAoB,EAAE,QAAQ;EAC9BC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,WAAW,EAAE,QAAQ;EACrBC,aAAa,EAAE,QAAQ;EACvBC,YAAY,EAAE,QAAQ;EACtBC,cAAc,EAAE,QAAQ;EACxBC,cAAc,EAAE,QAAQ;EACxBC,cAAc,EAAE,QAAQ;EACxBC,WAAW,EAAE,QAAQ;EACrBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,QAAQ;EACnBC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,MAAM,EAAE,QAAQ;EAChBC,gBAAgB,EAAE,QAAQ;EAC1BC,UAAU,EAAE,QAAQ;EACpBC,YAAY,EAAE,QAAQ;EACtBC,YAAY,EAAE,QAAQ;EACtBC,cAAc,EAAE,QAAQ;EACxBC,eAAe,EAAE,QAAQ;EACzBC,iBAAiB,EAAE,QAAQ;EAC3BC,eAAe,EAAE,QAAQ;EACzBC,eAAe,EAAE,QAAQ;EACzBC,YAAY,EAAE,QAAQ;EACtBC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,QAAQ,EAAE,QAAQ;EAClBC,WAAW,EAAE,QAAQ;EACrBC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,QAAQ;EACjBC,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,QAAQ;EACnBC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE,QAAQ;EACnBC,MAAM,EAAE,QAAQ;EAChBC,aAAa,EAAE,QAAQ;EACvBC,SAAS,EAAE,QAAQ;EACnBC,aAAa,EAAE,QAAQ;EACvBC,aAAa,EAAE,QAAQ;EACvBC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,QAAQ;EACnBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,QAAQ;EACbC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE,QAAQ;EAChBC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,QAAQ;EACjBC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,SAAS,EAAE,QAAQ;EACnBC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,QAAQ;EACrBC,SAAS,EAAE,QAAQ;EACnBC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,QAAQ;EACjBC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE,QAAQ;EACnBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,UAAU,EAAE,QAAQ;EACpBC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,QAAQ;EACrBC,WAAW,EAAE;AACd,CAAC;AAED,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAC5B,IAAIA,KAAK,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE;IAC7B,OAAOC,SAAS,CAACF,KAAK,CAAC;EACxB;EAEA,IAAIA,KAAK,CAACC,UAAU,CAAC,KAAK,CAAC,EAAE;IAC5B,OAAOE,oBAAoB,CAACH,KAAK,CAAC;EACnC;;EAEA;EACA,IAAIA,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC7B;IACA,IAAIJ,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;MACvBL,KAAK,GAAI,GAAEA,KAAK,CAAC,CAAC,CAAE,GAAEA,KAAK,CAAC,CAAC,CAAE,GAAEA,KAAK,CAAC,CAAC,CAAE,GAAEA,KAAK,CAAC,CAAC,CAAE,GAAEA,KAAK,CAAC,CAAC,CAAE,GAAEA,KAAK,CAAC,CAAC,CAAE,EAAC;IAC7E,CAAC,MAAM;MACNA,KAAK,GAAGA,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACK,MAAM,CAAC;IACrC;EACD;;EAEA;EACA,IAAIE,MAAM,CAACC,IAAI,CAAC9J,SAAS,CAAC,CAAC+J,QAAQ,CAACT,KAAK,CAAC,EAAE;IAC3CA,KAAK,GAAGtJ,SAAS,CAACsJ,KAAK,CAAC;EACzB;EAEA,OAAOU,QAAQ,CAACV,KAAK,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAGF,KAAK,IAAI;EAC1B,MAAMW,mBAAmB,GAAGX,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC;IAC7CQ,aAAa,GAAG,EAAE;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACK,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACtC,IAAIb,KAAK,CAACa,CAAC,CAAC,KAAK,GAAG,EAAE;MACrBD,aAAa,CAACE,IAAI,CAACD,CAAC,CAAC;IACtB;EACD;EAEA,OAAO;IACNE,CAAC,EAAEC,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACK,mBAAmB,GAAG,CAAC,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC;IAC1EC,CAAC,EAAEF,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACM,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC;IACvEE,CAAC,EAAEH,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACM,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE;EACvE,CAAC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMd,oBAAoB,GAAGH,KAAK,IAAI;EACrC,MAAMW,mBAAmB,GAAGX,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC;IAC7CgB,kBAAkB,GAAGpB,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC;IACvCQ,aAAa,GAAG,EAAE;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACK,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACtC,IAAIb,KAAK,CAACa,CAAC,CAAC,KAAK,GAAG,EAAE;MACrBD,aAAa,CAACE,IAAI,CAACD,CAAC,CAAC;IACtB;EACD;EAEA,OAAO;IACNE,CAAC,EAAEC,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACK,mBAAmB,GAAG,CAAC,EAAEC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC;IAC1EC,CAAC,EAAEF,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACM,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAAC;IACvEE,CAAC,EAAEH,QAAQ,CAAChB,KAAK,CAACM,KAAK,CAACM,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEQ,kBAAkB,CAAC,CAACH,IAAI,EAAE;EACzE,CAAC;AACF,CAAC;AAED,MAAMI,QAAQ,GAAG,YAIX;EAAA,IAJYrB,KAAK,uEAAG;IACzBsB,CAAC,EAAEC,SAAS;IACZC,CAAC,EAAED,SAAS;IACZE,CAAC,EAAEF;EACJ,CAAC;EACA;EACA,MAAMG,CAAC,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAE,CAAC,GAAG5B,KAAK,CAACyB,CAAC,GAAI,CAAC,CAAC,IAAIzB,KAAK,CAACwB,CAAC;IACpDK,CAAC,GAAGH,CAAC,IAAI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAG5B,KAAK,CAACsB,CAAC,GAAG,EAAE,GAAI,CAAC,GAAI,CAAC,CAAC,CAAC;IAChDQ,CAAC,GAAG9B,KAAK,CAACyB,CAAC,GAAGC,CAAC,GAAG,CAAC;EAEpB,IAAIK,SAAS,GAAG,CAAC,CAAC;EAClB,QAAQJ,IAAI,CAACK,KAAK,CAAChC,KAAK,CAACsB,CAAC,GAAG,EAAE,CAAC;IAChC;IACA,KAAK,CAAC;MACLS,SAAS,GAAG;QACXhB,CAAC,EAAEW,CAAC;QACJR,CAAC,EAAEW,CAAC;QACJV,CAAC,EAAE;MACJ,CAAC;MACD;;IAED;IACA,KAAK,CAAC;MACLY,SAAS,GAAG;QACXhB,CAAC,EAAEc,CAAC;QACJX,CAAC,EAAEQ,CAAC;QACJP,CAAC,EAAE;MACJ,CAAC;MACD;;IAED;IACA,KAAK,CAAC;MACLY,SAAS,GAAG;QACXhB,CAAC,EAAE,CAAC;QACJG,CAAC,EAAEQ,CAAC;QACJP,CAAC,EAAEU;MACJ,CAAC;MACD;;IAED;IACA,KAAK,CAAC;MACLE,SAAS,GAAG;QACXhB,CAAC,EAAE,CAAC;QACJG,CAAC,EAAEW,CAAC;QACJV,CAAC,EAAEO;MACJ,CAAC;MACD;;IAED;IACA,KAAK,CAAC;MACLK,SAAS,GAAG;QACXhB,CAAC,EAAEc,CAAC;QACJX,CAAC,EAAE,CAAC;QACJC,CAAC,EAAEO;MACJ,CAAC;MACD;;IAED;IACA;MACCK,SAAS,GAAG;QACXhB,CAAC,EAAEW,CAAC;QACJR,CAAC,EAAE,CAAC;QACJC,CAAC,EAAEU;MACJ,CAAC;EAAC;EAGH,OAAO;IACNd,CAAC,EAAEY,IAAI,CAACM,KAAK,CAAC,CAACF,SAAS,CAAChB,CAAC,GAAGe,CAAC,IAAI,GAAG,CAAC;IACtCZ,CAAC,EAAES,IAAI,CAACM,KAAK,CAAC,CAACF,SAAS,CAACb,CAAC,GAAGY,CAAC,IAAI,GAAG,CAAC;IACtCX,CAAC,EAAEQ,IAAI,CAACM,KAAK,CAAC,CAACF,SAAS,CAACZ,CAAC,GAAGW,CAAC,IAAI,GAAG;EACtC,CAAC;AACF,CAAC;AAED,MAAMpB,QAAQ,GAAGwB,GAAG,IAAI;EACvB;EACA;;EAEA,MAAMC,SAAS,GAAG;IACjBpB,CAAC,EAAEmB,GAAG,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACnBlB,CAAC,EAAEgB,GAAG,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACnBjB,CAAC,EAAEe,GAAG,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,MAAMC,OAAO,GAAG9B,MAAM,CAACC,IAAI,CAAC2B,SAAS,CAAC;EAEtCE,OAAO,CAACC,OAAO,CAACC,GAAG,IAAI;IACtBJ,SAAS,CAACI,GAAG,CAAC,GAAGvB,QAAQ,CAACmB,SAAS,CAACI,GAAG,CAAC,EAAE,EAAE,CAAC;EAC9C,CAAC,CAAC;EAEF,OAAOJ,SAAS;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMK,QAAQ,GAAGxC,KAAK,IAAI;EACzB,MAAMyC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC1F,IAAIC,QAAQ,GAAG,GAAG;EAElB,IAAIC,cAAc,GAAG3C,KAAK,CAACe,CAAC,GAAG,EAAE;EACjC,IAAI6B,SAAS,GAAG5C,KAAK,CAACe,CAAC,GAAG,EAAE;EAC5B2B,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACd,IAAI,CAACM,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC;EACtDD,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACG,SAAS,CAAC,CAAC;EAErCD,cAAc,GAAG3C,KAAK,CAACkB,CAAC,GAAG,EAAE;EAC7B0B,SAAS,GAAG5C,KAAK,CAACkB,CAAC,GAAG,EAAE;EACxBwB,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACd,IAAI,CAACM,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC;EACtDD,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACG,SAAS,CAAC,CAAC;EAErCD,cAAc,GAAG3C,KAAK,CAACmB,CAAC,GAAG,EAAE;EAC7ByB,SAAS,GAAG5C,KAAK,CAACmB,CAAC,GAAG,EAAE;EACxBuB,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACd,IAAI,CAACM,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC;EACtDD,QAAQ,IAAIG,MAAM,CAACJ,MAAM,CAACG,SAAS,CAAC,CAAC;EAErC,OAAOF,QAAQ;AAChB,CAAC;AAED,MAAMI,QAAQ,GAAG,YAIX;EAAA,IAJY9C,KAAK,uEAAG;IACzBe,CAAC,EAAEQ,SAAS;IACZL,CAAC,EAAEK,SAAS;IACZJ,CAAC,EAAEI;EACJ,CAAC;EACA,MAAMwB,CAAC,GAAG/C,KAAK,CAACe,CAAC,GAAG,GAAG;IACtBiC,CAAC,GAAGhD,KAAK,CAACkB,CAAC,GAAG,GAAG;IACjB+B,CAAC,GAAGjD,KAAK,CAACmB,CAAC,GAAG,GAAG;IACjB+B,GAAG,GAAGvB,IAAI,CAACuB,GAAG,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACvBE,GAAG,GAAGxB,IAAI,CAACwB,GAAG,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACvBG,KAAK,GAAGF,GAAG,GAAGC,GAAG;EAElB,IAAI7B,CAAC,EACJE,CAAC;;EAEF;EACA,IAAI4B,KAAK,KAAK,CAAC,EAAE;IAChB9B,CAAC,GAAG,CAAC;EACN,CAAC,MAAM,IAAI4B,GAAG,KAAKH,CAAC,EAAE;IACrBzB,CAAC,GAAG,EAAE,IAAK,CAAC0B,CAAC,GAAGC,CAAC,IAAIG,KAAK,GAAI,CAAC,CAAC;EACjC,CAAC,MAAM,IAAIF,GAAG,KAAKF,CAAC,EAAE;IACrB1B,CAAC,GAAG,EAAE,IAAK,CAAC2B,CAAC,GAAGF,CAAC,IAAIK,KAAK,GAAI,CAAC,CAAC;EACjC,CAAC,MAAM,IAAIF,GAAG,KAAKD,CAAC,EAAE;IACrB3B,CAAC,GAAG,EAAE,IAAK,CAACyB,CAAC,GAAGC,CAAC,IAAII,KAAK,GAAI,CAAC,CAAC;EACjC;;EAEA;EACA,MAAM3B,CAAC,GAAG,CAACyB,GAAG,GAAGC,GAAG,IAAI,CAAC;;EAEzB;EACA,IAAIC,KAAK,KAAK,CAAC,EAAE;IAChB5B,CAAC,GAAG,CAAC;EACN,CAAC,MAAM;IACNA,CAAC,GAAG4B,KAAK,IAAI,CAAC,GAAGzB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,CAAC,CAAC;EACtC;EAEA,OAAO;IACNH,CAAC;IACDE,CAAC;IACDC;EACD,CAAC;AACF,CAAC;AAED,SACC1B,WAAW,EACXsB,QAAQ,EACRX,QAAQ,EACRoC,QAAQ,EACR3C,oBAAoB,EACpBqC,QAAQ"},"metadata":{},"sourceType":"module"}