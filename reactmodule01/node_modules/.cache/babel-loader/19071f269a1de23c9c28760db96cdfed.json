{"ast":null,"code":"import { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nconst themeStyles = new Map();\nconst loaders = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - the style content directly\n * @deprecated\n */\nconst registerThemeProperties = (_packageName, _themeName, _style) => {\n  throw new Error(\"`registerThemeProperties` has been depracated. Use `registerThemePropertiesLoader` instead.\");\n};\nconst registerThemePropertiesLoader = (packageName, themeName, loader) => {\n  loaders.set(`${packageName}/${themeName}`, loader);\n  registeredPackages.add(packageName);\n  registeredThemes.add(themeName);\n};\nconst getThemeProperties = async (packageName, themeName) => {\n  const style = themeStyles.get(`${packageName}_${themeName}`);\n  if (style !== undefined) {\n    // it's valid for style to be an empty string\n    return style;\n  }\n  if (!registeredThemes.has(themeName)) {\n    const regThemesStr = [...registeredThemes.values()].join(\", \");\n    console.warn(`You have requested a non-registered theme ${themeName} - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n    return _getThemeProperties(packageName, DEFAULT_THEME);\n  }\n  return _getThemeProperties(packageName, themeName);\n};\nconst _getThemeProperties = async (packageName, themeName) => {\n  const loader = loaders.get(`${packageName}/${themeName}`);\n  if (!loader) {\n    // no themes for package\n    console.error(`Theme [${themeName}] not registered for package [${packageName}]`); /* eslint-disable-line */\n    return;\n  }\n  let data;\n  try {\n    data = await loader(themeName);\n  } catch (e) {\n    console.error(packageName, e.message); /* eslint-disable-line */\n    return;\n  }\n  const themeProps = data._ || data;\n  themeStyles.set(`${packageName}_${themeName}`, themeProps);\n  return themeProps;\n};\nconst getRegisteredPackages = () => {\n  return registeredPackages;\n};\nconst isThemeRegistered = theme => {\n  return registeredThemes.has(theme);\n};\nexport { registerThemePropertiesLoader, registerThemeProperties, getThemeProperties, getRegisteredPackages, isThemeRegistered };","map":{"version":3,"names":["DEFAULT_THEME","themeStyles","Map","loaders","registeredPackages","Set","registeredThemes","registerThemeProperties","_packageName","_themeName","_style","Error","registerThemePropertiesLoader","packageName","themeName","loader","set","add","getThemeProperties","style","get","undefined","has","regThemesStr","values","join","console","warn","_getThemeProperties","error","data","e","message","themeProps","_","getRegisteredPackages","isThemeRegistered","theme"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/asset-registries/Themes.js"],"sourcesContent":["import { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\n\nconst themeStyles = new Map();\nconst loaders = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - the style content directly\n * @deprecated\n */\nconst registerThemeProperties = (_packageName, _themeName, _style) => {\n\tthrow new Error(\"`registerThemeProperties` has been depracated. Use `registerThemePropertiesLoader` instead.\");\n};\n\nconst registerThemePropertiesLoader = (packageName, themeName, loader) => {\n\tloaders.set(`${packageName}/${themeName}`, loader);\n\tregisteredPackages.add(packageName);\n\tregisteredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n\tconst style = themeStyles.get(`${packageName}_${themeName}`);\n\tif (style !== undefined) { // it's valid for style to be an empty string\n\t\treturn style;\n\t}\n\n\tif (!registeredThemes.has(themeName)) {\n\t\tconst regThemesStr = [...registeredThemes.values()].join(\", \");\n\t\tconsole.warn(`You have requested a non-registered theme ${themeName} - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n\t\treturn _getThemeProperties(packageName, DEFAULT_THEME);\n\t}\n\n\treturn _getThemeProperties(packageName, themeName);\n};\n\nconst _getThemeProperties = async (packageName, themeName) => {\n\tconst loader = loaders.get(`${packageName}/${themeName}`);\n\tif (!loader) {\n\t\t// no themes for package\n\t\tconsole.error(`Theme [${themeName}] not registered for package [${packageName}]`); /* eslint-disable-line */\n\t\treturn;\n\t}\n\tlet data;\n\ttry {\n\t\tdata = await loader(themeName);\n\t} catch (e) {\n\t\tconsole.error(packageName, e.message); /* eslint-disable-line */\n\t\treturn;\n\t}\n\tconst themeProps = data._ || data;\n\n\tthemeStyles.set(`${packageName}_${themeName}`, themeProps);\n\treturn themeProps;\n};\n\nconst getRegisteredPackages = () => {\n\treturn registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n\treturn registeredThemes.has(theme);\n};\n\nexport {\n\tregisterThemePropertiesLoader,\n\tregisterThemeProperties,\n\tgetThemeProperties,\n\tgetRegisteredPackages,\n\tisThemeRegistered,\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iCAAiC;AAE/D,MAAMC,WAAW,GAAG,IAAIC,GAAG,EAAE;AAC7B,MAAMC,OAAO,GAAG,IAAID,GAAG,EAAE;AACzB,MAAME,kBAAkB,GAAG,IAAIC,GAAG,EAAE;AACpC,MAAMC,gBAAgB,GAAG,IAAID,GAAG,EAAE;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,uBAAuB,GAAG,CAACC,YAAY,EAAEC,UAAU,EAAEC,MAAM,KAAK;EACrE,MAAM,IAAIC,KAAK,CAAC,6FAA6F,CAAC;AAC/G,CAAC;AAED,MAAMC,6BAA6B,GAAG,CAACC,WAAW,EAAEC,SAAS,EAAEC,MAAM,KAAK;EACzEZ,OAAO,CAACa,GAAG,CAAE,GAAEH,WAAY,IAAGC,SAAU,EAAC,EAAEC,MAAM,CAAC;EAClDX,kBAAkB,CAACa,GAAG,CAACJ,WAAW,CAAC;EACnCP,gBAAgB,CAACW,GAAG,CAACH,SAAS,CAAC;AAChC,CAAC;AAED,MAAMI,kBAAkB,GAAG,OAAOL,WAAW,EAAEC,SAAS,KAAK;EAC5D,MAAMK,KAAK,GAAGlB,WAAW,CAACmB,GAAG,CAAE,GAAEP,WAAY,IAAGC,SAAU,EAAC,CAAC;EAC5D,IAAIK,KAAK,KAAKE,SAAS,EAAE;IAAE;IAC1B,OAAOF,KAAK;EACb;EAEA,IAAI,CAACb,gBAAgB,CAACgB,GAAG,CAACR,SAAS,CAAC,EAAE;IACrC,MAAMS,YAAY,GAAG,CAAC,GAAGjB,gBAAgB,CAACkB,MAAM,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC9DC,OAAO,CAACC,IAAI,CAAE,6CAA4Cb,SAAU,sBAAqBd,aAAc,4BAA2BuB,YAAa,EAAC,CAAC,CAAC,CAAC;IACnJ,OAAOK,mBAAmB,CAACf,WAAW,EAAEb,aAAa,CAAC;EACvD;EAEA,OAAO4B,mBAAmB,CAACf,WAAW,EAAEC,SAAS,CAAC;AACnD,CAAC;AAED,MAAMc,mBAAmB,GAAG,OAAOf,WAAW,EAAEC,SAAS,KAAK;EAC7D,MAAMC,MAAM,GAAGZ,OAAO,CAACiB,GAAG,CAAE,GAAEP,WAAY,IAAGC,SAAU,EAAC,CAAC;EACzD,IAAI,CAACC,MAAM,EAAE;IACZ;IACAW,OAAO,CAACG,KAAK,CAAE,UAASf,SAAU,iCAAgCD,WAAY,GAAE,CAAC,CAAC,CAAC;IACnF;EACD;EACA,IAAIiB,IAAI;EACR,IAAI;IACHA,IAAI,GAAG,MAAMf,MAAM,CAACD,SAAS,CAAC;EAC/B,CAAC,CAAC,OAAOiB,CAAC,EAAE;IACXL,OAAO,CAACG,KAAK,CAAChB,WAAW,EAAEkB,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;IACvC;EACD;EACA,MAAMC,UAAU,GAAGH,IAAI,CAACI,CAAC,IAAIJ,IAAI;EAEjC7B,WAAW,CAACe,GAAG,CAAE,GAAEH,WAAY,IAAGC,SAAU,EAAC,EAAEmB,UAAU,CAAC;EAC1D,OAAOA,UAAU;AAClB,CAAC;AAED,MAAME,qBAAqB,GAAG,MAAM;EACnC,OAAO/B,kBAAkB;AAC1B,CAAC;AAED,MAAMgC,iBAAiB,GAAGC,KAAK,IAAI;EAClC,OAAO/B,gBAAgB,CAACgB,GAAG,CAACe,KAAK,CAAC;AACnC,CAAC;AAED,SACCzB,6BAA6B,EAC7BL,uBAAuB,EACvBW,kBAAkB,EAClBiB,qBAAqB,EACrBC,iBAAiB"},"metadata":{},"sourceType":"module"}