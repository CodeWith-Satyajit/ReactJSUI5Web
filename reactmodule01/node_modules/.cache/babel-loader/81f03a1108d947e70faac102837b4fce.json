{"ast":null,"code":"import UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\nclass CalendarDate {\n  constructor() {\n    let aArgs = arguments,\n      // eslint-disable-line\n      oJSDate,\n      oNow,\n      sCalendarType;\n    switch (aArgs.length) {\n      case 0:\n        // defaults to the current date\n        oNow = new Date();\n        return this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n      case 1: // CalendarDate\n      case 2:\n        // CalendarDate, sCalendarType\n        if (!(aArgs[0] instanceof CalendarDate)) {\n          throw new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n        }\n        sCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;\n        // Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n        // source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n        oJSDate = new Date(aArgs[0].valueOf());\n\n        // Make this date really local. Now getters are safe.\n        oJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n        oJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n      case 3: // year, month, date\n      case 4:\n        // year, month, date, sCalendarType\n        checkNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n        checkNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n        checkNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n        oJSDate = new Date(0, 0, 1);\n        oJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n        if (aArgs[3]) {\n          sCalendarType = aArgs[3];\n        }\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n      default:\n        throw new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\" + \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n    }\n  }\n  getYear() {\n    return this._oUDate.getUTCFullYear();\n  }\n  setYear(year) {\n    checkNumericLike(year, `Invalid year: ${year}`);\n    this._oUDate.setUTCFullYear(year);\n    return this;\n  }\n  getMonth() {\n    return this._oUDate.getUTCMonth();\n  }\n\n  /**\n   * Sets the given month as ordinal month of the year.\n   * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n   * equivalent month names for the given calendar).\n   * If the specified value is is outside of the expected range, this method attempts to update the date information\n   * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n   * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n   * 0 will result in the previous month's last day.\n   * -1 will result in the day before the previous month's last day.\n   * 32 will result in:\n   * - first day of the next month if the current month has 31 days.\n   * - second day of the next month if the current month has 30 days.\n   * Other value will result in adding or subtracting days according to the given value.\n   * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n   */\n  setMonth(month, date) {\n    checkNumericLike(month, `Invalid month: ${month}`);\n    if (date || date === 0) {\n      checkNumericLike(date, `Invalid date: ${date}`);\n      this._oUDate.setUTCMonth(month, date);\n    } else {\n      this._oUDate.setUTCMonth(month);\n    }\n    return this;\n  }\n  getDate() {\n    return this._oUDate.getUTCDate();\n  }\n  setDate(date) {\n    checkNumericLike(date, `Invalid date: ${date}`);\n    this._oUDate.setUTCDate(date);\n    return this;\n  }\n  getDay() {\n    return this._oUDate.getUTCDay();\n  }\n  getCalendarType() {\n    return this._oUDate.sCalendarType;\n  }\n  isBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() < oCalendarDate.valueOf();\n  }\n  isAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() > oCalendarDate.valueOf();\n  }\n  isSameOrBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() <= oCalendarDate.valueOf();\n  }\n  isSameOrAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() >= oCalendarDate.valueOf();\n  }\n  isSame(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() === oCalendarDate.valueOf();\n  }\n  toLocalJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oLocalDate = new Date(this._oUDate.getTime());\n\n    // Make this date really local. Now getters are safe.\n    oLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n    oLocalDate.setHours(0, 0, 0, 0);\n    return oLocalDate;\n  }\n  toUTCJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oUTCDate = new Date(this._oUDate.getTime());\n    oUTCDate.setUTCHours(0, 0, 0, 0);\n    return oUTCDate;\n  }\n  toString() {\n    return `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n  }\n  valueOf() {\n    return this._oUDate.getTime();\n  }\n  static fromLocalJSDate(oJSDate, sCalendarType) {\n    // Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n    // because Date object in the test is different than the Date object in the application (due to the iframe).\n    // We can use jQuery.type or this method:\n    function isValidDate(date) {\n      return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n    }\n\n    if (!isValidDate(oJSDate)) {\n      throw new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n    }\n    return new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n  }\n  static fromTimestamp(iTimestamp, sCalendarType) {\n    const oCalDate = new CalendarDate(0, 0, 1);\n    let oUDate;\n    try {\n      oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n    } catch (e) {\n      oUDate = new Date(NaN); // UniversalDate.getInstance may now throw an Exception - keep the old behavior\n    }\n\n    oCalDate._oUDate = oUDate;\n    return oCalDate;\n  }\n}\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n  if (sCalendarType) {\n    return UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n  }\n  return new UniversalDate(createUTCDate(oDate).getTime());\n}\n\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate) {\n  const oUTCDate = new Date(Date.UTC(0, 0, 1));\n  oUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n  return oUTCDate;\n}\nfunction checkCalendarDate(oCalendarDate) {\n  if (!(oCalendarDate instanceof CalendarDate)) {\n    throw new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);\n  }\n}\n\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value, message) {\n  if (value === undefined || value === Infinity || isNaN(value)) {\n    // eslint-disable-line\n    throw message;\n  }\n}\nexport default CalendarDate;","map":{"version":3,"names":["UniversalDate","CalendarDate","constructor","aArgs","arguments","oJSDate","oNow","sCalendarType","length","Date","getFullYear","getMonth","getDate","Error","_oUDate","valueOf","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","createUniversalUTCDate","checkNumericLike","getYear","setYear","year","setUTCFullYear","setMonth","month","date","setUTCMonth","setDate","setUTCDate","getDay","getUTCDay","getCalendarType","isBefore","oCalendarDate","checkCalendarDate","isAfter","isSameOrBefore","isSameOrAfter","isSame","toLocalJSDate","oLocalDate","getTime","toUTCJSDate","oUTCDate","setUTCHours","toString","fromLocalJSDate","isValidDate","Object","prototype","call","isNaN","fromTimestamp","iTimestamp","oCalDate","oUDate","getInstance","e","NaN","oDate","createUTCDate","UTC","value","message","undefined","Infinity"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-localization/dist/dates/CalendarDate.js"],"sourcesContent":["import UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\n\nclass CalendarDate {\n\tconstructor() {\n\t\tlet aArgs = arguments, // eslint-disable-line\n\t\t\toJSDate,\n\t\t\toNow,\n\t\t\tsCalendarType;\n\n\t\tswitch (aArgs.length) {\n\t\tcase 0: // defaults to the current date\n\t\t\toNow = new Date();\n\t\t\treturn this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n\n\t\tcase 1: // CalendarDate\n\t\tcase 2: // CalendarDate, sCalendarType\n\t\t\tif (!(aArgs[0] instanceof CalendarDate)) {\n\t\t\t\tthrow new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n\t\t\t}\n\t\t\tsCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;\n\t\t\t// Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n\t\t\t// source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\t\t\toJSDate = new Date(aArgs[0].valueOf());\n\n\t\t\t// Make this date really local. Now getters are safe.\n\t\t\toJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n\t\t\toJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tcase 3: // year, month, date\n\t\tcase 4: // year, month, date, sCalendarType\n\t\t\tcheckNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n\t\t\tcheckNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n\t\t\tcheckNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n\n\t\t\toJSDate = new Date(0, 0, 1);\n\t\t\toJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n\t\t\tif (aArgs[3]) {\n\t\t\t\tsCalendarType = aArgs[3];\n\t\t\t}\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\"\n\t\t\t\t+ \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n\t\t}\n\t}\n\n\tgetYear() {\n\t\treturn this._oUDate.getUTCFullYear();\n\t}\n\n\tsetYear(year) {\n\t\tcheckNumericLike(year, `Invalid year: ${year}`);\n\t\tthis._oUDate.setUTCFullYear(year);\n\t\treturn this;\n\t}\n\n\tgetMonth() {\n\t\treturn this._oUDate.getUTCMonth();\n\t}\n\n\t/**\n\t * Sets the given month as ordinal month of the year.\n\t * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n\t * equivalent month names for the given calendar).\n\t * If the specified value is is outside of the expected range, this method attempts to update the date information\n\t * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n\t * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n\t * 0 will result in the previous month's last day.\n\t * -1 will result in the day before the previous month's last day.\n\t * 32 will result in:\n\t * - first day of the next month if the current month has 31 days.\n\t * - second day of the next month if the current month has 30 days.\n\t * Other value will result in adding or subtracting days according to the given value.\n\t * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n\t */\n\tsetMonth(month, date) {\n\t\tcheckNumericLike(month, `Invalid month: ${month}`);\n\t\tif (date || date === 0) {\n\t\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\t\tthis._oUDate.setUTCMonth(month, date);\n\t\t} else {\n\t\t\tthis._oUDate.setUTCMonth(month);\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetDate() {\n\t\treturn this._oUDate.getUTCDate();\n\t}\n\n\tsetDate(date) {\n\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\tthis._oUDate.setUTCDate(date);\n\t\treturn this;\n\t}\n\n\tgetDay() {\n\t\treturn this._oUDate.getUTCDay();\n\t}\n\n\tgetCalendarType() {\n\t\treturn this._oUDate.sCalendarType;\n\t}\n\n\tisBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() < oCalendarDate.valueOf();\n\t}\n\n\tisAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() > oCalendarDate.valueOf();\n\t}\n\n\tisSameOrBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() <= oCalendarDate.valueOf();\n\t}\n\n\tisSameOrAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() >= oCalendarDate.valueOf();\n\t}\n\n\tisSame(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() === oCalendarDate.valueOf();\n\t}\n\n\ttoLocalJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oLocalDate = new Date(this._oUDate.getTime());\n\n\t\t// Make this date really local. Now getters are safe.\n\t\toLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n\t\toLocalDate.setHours(0, 0, 0, 0);\n\n\t\treturn oLocalDate;\n\t}\n\n\ttoUTCJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oUTCDate = new Date(this._oUDate.getTime());\n\t\toUTCDate.setUTCHours(0, 0, 0, 0);\n\n\t\treturn oUTCDate;\n\t}\n\n\ttoString() {\n\t\treturn `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n\t}\n\n\tvalueOf() {\n\t\treturn this._oUDate.getTime();\n\t}\n\n\tstatic fromLocalJSDate(oJSDate, sCalendarType) {\n\t\t// Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n\t\t// because Date object in the test is different than the Date object in the application (due to the iframe).\n\t\t// We can use jQuery.type or this method:\n\t\tfunction isValidDate(date) {\n\t\t\treturn date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n\t\t}\n\t\tif (!isValidDate(oJSDate)) {\n\t\t\tthrow new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n\t\t}\n\t\treturn new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n\t}\n\n\tstatic fromTimestamp(iTimestamp, sCalendarType) {\n\t\tconst oCalDate = new CalendarDate(0, 0, 1);\n\t\tlet oUDate;\n\t\ttry {\n\t\t\toUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n\t\t} catch (e) {\n\t\t\toUDate = new Date(NaN); // UniversalDate.getInstance may now throw an Exception - keep the old behavior\n\t\t}\n\t\toCalDate._oUDate = oUDate;\n\t\treturn oCalDate;\n\t}\n}\n\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n\tif (sCalendarType) {\n\t\treturn UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n\t}\n\treturn new UniversalDate(createUTCDate(oDate).getTime());\n}\n\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate) {\n\tconst oUTCDate = new Date(Date.UTC(0, 0, 1));\n\n\toUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n\n\treturn oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate) {\n\tif (!(oCalendarDate instanceof CalendarDate)) {\n\t\tthrow new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);\n\t}\n}\n\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value, message) {\n\tif (value === undefined || value === Infinity || isNaN(value)) { // eslint-disable-line\n\t\tthrow message;\n\t}\n}\n\nexport default CalendarDate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}