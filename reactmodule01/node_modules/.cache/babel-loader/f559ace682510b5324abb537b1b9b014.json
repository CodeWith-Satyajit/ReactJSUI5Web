{"ast":null,"code":"import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { TableSelectionBehavior, TableSelectionMode } from '../../../enums';\nconst getRowProps = (rowProps, _ref) => {\n  let {\n    row,\n    instance\n  } = _ref;\n  const {\n    webComponentsReactProperties,\n    toggleRowSelected,\n    selectedFlatRows,\n    dispatch\n  } = instance;\n  const handleRowSelect = e => {\n    var _a, _b, _c, _d, _e, _f;\n    const isSelectionCell = e.target.dataset.selectionCell === 'true';\n    if (((_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.dataset) === null || _b === void 0 ? void 0 : _b.name) !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || ((_c = e.nativeEvent) === null || _c === void 0 ? void 0 : _c.markerAllowTableRowSelection) === true) && webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {\n      return;\n    }\n    // don't select empty rows\n    const isEmptyRow = (_d = row.original) === null || _d === void 0 ? void 0 : _d.emptyRow;\n    if (isEmptyRow) {\n      return;\n    }\n    // don't select grouped rows\n    if (row.isGrouped) {\n      return;\n    }\n    const {\n      selectionBehavior,\n      selectionMode,\n      onRowSelect,\n      onRowClick\n    } = webComponentsReactProperties;\n    if (typeof onRowClick === 'function' && ((_f = (_e = e.target) === null || _e === void 0 ? void 0 : _e.dataset) === null || _f === void 0 ? void 0 : _f.name) !== 'internal_selection_column') {\n      onRowClick(enrichEventWithDetails(e, {\n        row\n      }));\n    }\n    if (selectionMode === TableSelectionMode.None) {\n      return;\n    }\n    // don't continue if the row was clicked and selection mode is row selector only\n    if (selectionBehavior === TableSelectionBehavior.RowSelector && !isSelectionCell) {\n      return;\n    }\n    // deselect other rows\n    if (selectionMode === TableSelectionMode.SingleSelect) {\n      for (const selectedRow of selectedFlatRows) {\n        if (selectedRow.id !== row.id) {\n          toggleRowSelected(selectedRow.id, false);\n        }\n      }\n    }\n    toggleRowSelected(row.id);\n    if (typeof onRowSelect === 'function') {\n      // update state to return instance values after update (see useSelectionChangeCallback hook)\n      dispatch({\n        type: 'SELECT_ROW_CB',\n        payload: {\n          event: e,\n          row,\n          fired: true\n        }\n      });\n    }\n  };\n  return [rowProps, {\n    onKeyDown: e => {\n      if (e.key === 'Enter' || e.code === 'Space') {\n        if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {\n          e.preventDefault();\n        }\n        handleRowSelect(e);\n      }\n    },\n    onClick: handleRowSelect\n  }];\n};\nexport const useSingleRowStateSelection = hooks => {\n  hooks.getRowProps.push(getRowProps);\n};\nuseSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';","map":{"version":3,"names":["enrichEventWithDetails","TableSelectionBehavior","TableSelectionMode","getRowProps","rowProps","row","instance","webComponentsReactProperties","toggleRowSelected","selectedFlatRows","dispatch","handleRowSelect","e","_a","_b","_c","_d","_e","_f","isSelectionCell","target","dataset","selectionCell","name","markerAllowTableRowSelection","nativeEvent","tagNamesWhichShouldNotSelectARow","has","tagName","isEmptyRow","original","emptyRow","isGrouped","selectionBehavior","selectionMode","onRowSelect","onRowClick","None","RowSelector","SingleSelect","selectedRow","id","type","payload","event","fired","onKeyDown","key","code","preventDefault","onClick","useSingleRowStateSelection","hooks","push","pluginName"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-react/dist/components/AnalyticalTable/hooks/useSingleRowStateSelection.js"],"sourcesContent":["import { enrichEventWithDetails } from '@ui5/webcomponents-react-base';\nimport { TableSelectionBehavior, TableSelectionMode } from '../../../enums';\nconst getRowProps = (rowProps, { row, instance }) => {\n    const { webComponentsReactProperties, toggleRowSelected, selectedFlatRows, dispatch } = instance;\n    const handleRowSelect = (e) => {\n        var _a, _b, _c, _d, _e, _f;\n        const isSelectionCell = e.target.dataset.selectionCell === 'true';\n        if (((_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.dataset) === null || _b === void 0 ? void 0 : _b.name) !== 'internal_selection_column' &&\n            !(e.markerAllowTableRowSelection === true || ((_c = e.nativeEvent) === null || _c === void 0 ? void 0 : _c.markerAllowTableRowSelection) === true) &&\n            webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {\n            return;\n        }\n        // don't select empty rows\n        const isEmptyRow = (_d = row.original) === null || _d === void 0 ? void 0 : _d.emptyRow;\n        if (isEmptyRow) {\n            return;\n        }\n        // don't select grouped rows\n        if (row.isGrouped) {\n            return;\n        }\n        const { selectionBehavior, selectionMode, onRowSelect, onRowClick } = webComponentsReactProperties;\n        if (typeof onRowClick === 'function' && ((_f = (_e = e.target) === null || _e === void 0 ? void 0 : _e.dataset) === null || _f === void 0 ? void 0 : _f.name) !== 'internal_selection_column') {\n            onRowClick(enrichEventWithDetails(e, { row }));\n        }\n        if (selectionMode === TableSelectionMode.None) {\n            return;\n        }\n        // don't continue if the row was clicked and selection mode is row selector only\n        if (selectionBehavior === TableSelectionBehavior.RowSelector && !isSelectionCell) {\n            return;\n        }\n        // deselect other rows\n        if (selectionMode === TableSelectionMode.SingleSelect) {\n            for (const selectedRow of selectedFlatRows) {\n                if (selectedRow.id !== row.id) {\n                    toggleRowSelected(selectedRow.id, false);\n                }\n            }\n        }\n        toggleRowSelected(row.id);\n        if (typeof onRowSelect === 'function') {\n            // update state to return instance values after update (see useSelectionChangeCallback hook)\n            dispatch({ type: 'SELECT_ROW_CB', payload: { event: e, row, fired: true } });\n        }\n    };\n    return [\n        rowProps,\n        {\n            onKeyDown: (e) => {\n                if (e.key === 'Enter' || e.code === 'Space') {\n                    if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {\n                        e.preventDefault();\n                    }\n                    handleRowSelect(e);\n                }\n            },\n            onClick: handleRowSelect\n        }\n    ];\n};\nexport const useSingleRowStateSelection = (hooks) => {\n    hooks.getRowProps.push(getRowProps);\n};\nuseSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}