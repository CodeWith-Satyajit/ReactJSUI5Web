{"ast":null,"code":"import { html as t, svg as r } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e = Symbol.for(\"\"),\n  l = t => {\n    if ((null == t ? void 0 : t.r) === e) return null == t ? void 0 : t._$litStatic$;\n  },\n  o = t => ({\n    _$litStatic$: t,\n    r: e\n  }),\n  i = function (t) {\n    for (var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      r[_key - 1] = arguments[_key];\n    }\n    return {\n      _$litStatic$: r.reduce((r, e, l) => r + (t => {\n        if (void 0 !== t._$litStatic$) return t._$litStatic$;\n        throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.`);\n      })(e) + t[l + 1], t[0]),\n      r: e\n    };\n  },\n  s = new Map(),\n  a = t => function (r) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      e[_key2 - 1] = arguments[_key2];\n    }\n    const o = e.length;\n    let i, a;\n    const n = [],\n      u = [];\n    let c,\n      $ = 0,\n      f = !1;\n    for (; $ < o;) {\n      for (c = r[$]; $ < o && void 0 !== (a = e[$], i = l(a));) c += i + r[++$], f = !0;\n      u.push(a), n.push(c), $++;\n    }\n    if ($ === o && n.push(r[o]), f) {\n      const t = n.join(\"$$lit$$\");\n      void 0 === (r = s.get(t)) && (n.raw = n, s.set(t, r = n)), e = u;\n    }\n    return t(r, ...e);\n  },\n  n = a(t),\n  u = a(r);\nexport { n as html, i as literal, u as svg, o as unsafeStatic, a as withStatic };","map":{"version":3,"mappings":";;;;;;AAsCA,MAAMA,IAAQC,OAAOC,IAAI;EAGnBC,IAAqBC;IACzB,KAAKA,iBAAK,IAALA,EAAgCC,OAAML,GAG3C,OAAQI,iBAAK,IAALA,EAA+CE,YAAC;EAAA;EAiB7CC,IAAgBH,MAAgC;IAC3DE,cAAkBF;IAClBC,GAAGL;EAAAA;EA4BQQ,IAAU,UACrBC;IAAAA,kCACGC;MAAAA;IAAAA;IAAAA,OACc;MACjBJ,cAAkBI,EAAOC,OACvB,CAACC,GAAKC,GAAGC,MAAQF,IA9BE,CAACR;QACtB,SAA8BW,MAA1BX,EAAoBE,cACtB,OAAOF,EAAoBE;QAE3B,MAAUU,MACR,kEAAkEZ,wGAGrE;MAAA,GAsBuCS,KAAoBJ,EAAQK,IAAM,IACxEL,EAAQ;MAEVJ,GAAGL;IAAAA;EAAAA;EAGCiB,IAAe,IAAIC;EAKZC,IACVC,KACD,UAACX,GAAkCC;IAAAA;MAAAA;IAAAA;IACjC,MAAMW,IAAIX,EAAOY;IACjB,IAAIC,GACAC;IACJ,MAAMC,IAA+B;MAC/BC,IAAgC;IACtC,IAEIC;MAFAC,IAAI;MACJC,KAAa;IAGjB,OAAOD,IAAIP,IAAG;MAKZ,KAJAM,IAAIlB,EAAQmB,IAKVA,IAAIP,UAEiDN,OADnDS,IAAed,EAAOkB,IACvBL,IAAcpB,EAAkBqB,MAEjCG,KAAKJ,IAAcd,IAAUmB,IAC7BC,KAAa;MAEfH,EAAcI,KAAKN,IACnBC,EAAcK,KAAKH,IACnBC,GACD;IAAA;IAOD,IAJIA,MAAMP,KACRI,EAAcK,KAAKrB,EAAQY,KAGzBQ,GAAY;MACd,MAAME,IAAMN,EAAcO,KAAK;MAAA,KAEfjB,OADhBN,IAAUQ,EAAagB,IAAIF,QAMxBN,EAAsBS,MAAMT,GAC7BR,EAAakB,IACXJ,GACCtB,IAAUgB,KAGff,IAASgB,CACV;IAAA;IACD,OAAON,EAAQX,MAAYC,EAAO;EAAA;EASzB0B,IAAOjB,EAAWkB;EAQlBC,IAAMnB,EAAWoB;AAAAA","names":["brand","Symbol","for","unwrapStaticValue","value","r","_$litStatic$","unsafeStatic","literal","strings","values","reduce","acc","v","idx","undefined","Error","stringsCache","Map","withStatic","coreTag","l","length","staticValue","dynamicValue","staticStrings","dynamicValues","s","i","hasStatics","push","key","join","get","raw","set","html","coreHtml","svg","coreSvg"],"sources":["src/static.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * a attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      dynamicValues.push(dynamicValue);\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n"]},"metadata":{},"sourceType":"module"}