{"ast":null,"code":"let suf;\nlet rulesObj = {\n  include: [/^ui5-/],\n  exclude: []\n};\nconst tagsCache = new Map(); // true/false means the tag should/should not be cached, undefined means not known yet.\n\n/**\n * Sets the suffix to be used for custom elements scoping, f.e. pass \"demo\" to get tags such as \"ui5-button-demo\".\n * Note: by default all tags starting with \"ui5-\" will be scoped, unless you change this by calling \"setCustomElementsScopingRules\"\n *\n * @public\n * @param suffix The scoping suffix\n */\nconst setCustomElementsScopingSuffix = suffix => {\n  if (!suffix.match(/^[a-zA-Z0-9_-]+$/)) {\n    throw new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n  }\n  suf = suffix;\n};\n\n/**\n * Returns the currently set scoping suffix, or undefined if not set.\n *\n * @public\n * @returns {String|undefined}\n */\nconst getCustomElementsScopingSuffix = () => {\n  return suf;\n};\n\n/**\n * Sets the rules, governing which custom element tags to scope and which not, f.e.\n * setCustomElementsScopingRules({include: [/^ui5-/]}, exclude: [/^ui5-mylib-/, /^ui5-carousel$/]);\n * will scope all elements starting with \"ui5-\" but not the ones starting with \"ui5-mylib-\" and not \"ui5-carousel\".\n *\n * @public\n * @param rules Object with \"include\" and \"exclude\" properties, both arrays of regular expressions. Note that \"include\"\n * rules are applied first and \"exclude\" rules second.\n */\nconst setCustomElementsScopingRules = rules => {\n  if (!rules || !rules.include) {\n    throw new Error(`\"rules\" must be an object with at least an \"include\" property`);\n  }\n  if (!Array.isArray(rules.include) || rules.include.some(rule => !(rule instanceof RegExp))) {\n    throw new Error(`\"rules.include\" must be an array of regular expressions`);\n  }\n  if (rules.exclude && (!Array.isArray(rules.exclude) || rules.exclude.some(rule => !(rule instanceof RegExp)))) {\n    throw new Error(`\"rules.exclude\" must be an array of regular expressions`);\n  }\n  rules.exclude = rules.exclude || [];\n  rulesObj = rules;\n  tagsCache.clear(); // reset the cache upon setting new rules\n};\n\n/**\n * Returns the rules, governing which custom element tags to scope and which not. By default, all elements\n * starting with \"ui5-\" are scoped. The default rules are: {include: [/^ui5-/]}.\n *\n * @public\n * @returns {Object}\n */\nconst getCustomElementsScopingRules = () => {\n  return rulesObj;\n};\n\n/**\n * Determines whether custom elements with the given tag should be scoped or not.\n * The tag is first matched against the \"include\" rules and then against the \"exclude\" rules and the\n * result is cached until new rules are set.\n *\n * @public\n * @param tag\n */\nconst shouldScopeCustomElement = tag => {\n  if (!tagsCache.has(tag)) {\n    const result = rulesObj.include.some(rule => tag.match(rule)) && !rulesObj.exclude.some(rule => tag.match(rule));\n    tagsCache.set(tag, result);\n  }\n  return tagsCache.get(tag);\n};\n\n/**\n * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.\n *\n * @public\n * @param tag\n * @returns {String}\n */\nconst getEffectiveScopingSuffixForTag = tag => {\n  if (shouldScopeCustomElement(tag)) {\n    return getCustomElementsScopingSuffix();\n  }\n};\nexport { setCustomElementsScopingSuffix, getCustomElementsScopingSuffix, setCustomElementsScopingRules, getCustomElementsScopingRules, shouldScopeCustomElement, getEffectiveScopingSuffixForTag };","map":{"version":3,"names":["suf","rulesObj","include","exclude","tagsCache","Map","setCustomElementsScopingSuffix","suffix","match","Error","getCustomElementsScopingSuffix","setCustomElementsScopingRules","rules","Array","isArray","some","rule","RegExp","clear","getCustomElementsScopingRules","shouldScopeCustomElement","tag","has","result","set","get","getEffectiveScopingSuffixForTag"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/CustomElementsScopeUtils.js"],"sourcesContent":["let suf;\nlet rulesObj = {\n\tinclude: [/^ui5-/],\n\texclude: [],\n};\nconst tagsCache = new Map(); // true/false means the tag should/should not be cached, undefined means not known yet.\n\n/**\n * Sets the suffix to be used for custom elements scoping, f.e. pass \"demo\" to get tags such as \"ui5-button-demo\".\n * Note: by default all tags starting with \"ui5-\" will be scoped, unless you change this by calling \"setCustomElementsScopingRules\"\n *\n * @public\n * @param suffix The scoping suffix\n */\nconst setCustomElementsScopingSuffix = suffix => {\n\tif (!suffix.match(/^[a-zA-Z0-9_-]+$/)) {\n\t\tthrow new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n\t}\n\n\tsuf = suffix;\n};\n\n/**\n * Returns the currently set scoping suffix, or undefined if not set.\n *\n * @public\n * @returns {String|undefined}\n */\nconst getCustomElementsScopingSuffix = () => {\n\treturn suf;\n};\n\n/**\n * Sets the rules, governing which custom element tags to scope and which not, f.e.\n * setCustomElementsScopingRules({include: [/^ui5-/]}, exclude: [/^ui5-mylib-/, /^ui5-carousel$/]);\n * will scope all elements starting with \"ui5-\" but not the ones starting with \"ui5-mylib-\" and not \"ui5-carousel\".\n *\n * @public\n * @param rules Object with \"include\" and \"exclude\" properties, both arrays of regular expressions. Note that \"include\"\n * rules are applied first and \"exclude\" rules second.\n */\nconst setCustomElementsScopingRules = rules => {\n\tif (!rules || !rules.include) {\n\t\tthrow new Error(`\"rules\" must be an object with at least an \"include\" property`);\n\t}\n\n\tif (!Array.isArray(rules.include) || rules.include.some(rule => !(rule instanceof RegExp))) {\n\t\tthrow new Error(`\"rules.include\" must be an array of regular expressions`);\n\t}\n\n\tif (rules.exclude && (!Array.isArray(rules.exclude) || rules.exclude.some(rule => !(rule instanceof RegExp)))) {\n\t\tthrow new Error(`\"rules.exclude\" must be an array of regular expressions`);\n\t}\n\n\trules.exclude = rules.exclude || [];\n\trulesObj = rules;\n\ttagsCache.clear(); // reset the cache upon setting new rules\n};\n\n/**\n * Returns the rules, governing which custom element tags to scope and which not. By default, all elements\n * starting with \"ui5-\" are scoped. The default rules are: {include: [/^ui5-/]}.\n *\n * @public\n * @returns {Object}\n */\nconst getCustomElementsScopingRules = () => {\n\treturn rulesObj;\n};\n\n/**\n * Determines whether custom elements with the given tag should be scoped or not.\n * The tag is first matched against the \"include\" rules and then against the \"exclude\" rules and the\n * result is cached until new rules are set.\n *\n * @public\n * @param tag\n */\nconst shouldScopeCustomElement = tag => {\n\tif (!tagsCache.has(tag)) {\n\t\tconst result = rulesObj.include.some(rule => tag.match(rule)) && !rulesObj.exclude.some(rule => tag.match(rule));\n\t\ttagsCache.set(tag, result);\n\t}\n\n\treturn tagsCache.get(tag);\n};\n\n/**\n * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.\n *\n * @public\n * @param tag\n * @returns {String}\n */\nconst getEffectiveScopingSuffixForTag = tag => {\n\tif (shouldScopeCustomElement(tag)) {\n\t\treturn getCustomElementsScopingSuffix();\n\t}\n};\n\nexport {\n\tsetCustomElementsScopingSuffix,\n\tgetCustomElementsScopingSuffix,\n\tsetCustomElementsScopingRules,\n\tgetCustomElementsScopingRules,\n\tshouldScopeCustomElement,\n\tgetEffectiveScopingSuffixForTag,\n};\n"],"mappings":"AAAA,IAAIA,GAAG;AACP,IAAIC,QAAQ,GAAG;EACdC,OAAO,EAAE,CAAC,OAAO,CAAC;EAClBC,OAAO,EAAE;AACV,CAAC;AACD,MAAMC,SAAS,GAAG,IAAIC,GAAG,EAAE,CAAC,CAAC;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,8BAA8B,GAAGC,MAAM,IAAI;EAChD,IAAI,CAACA,MAAM,CAACC,KAAK,CAAC,kBAAkB,CAAC,EAAE;IACtC,MAAM,IAAIC,KAAK,CAAC,wEAAwE,CAAC;EAC1F;EAEAT,GAAG,GAAGO,MAAM;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,8BAA8B,GAAG,MAAM;EAC5C,OAAOV,GAAG;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,6BAA6B,GAAGC,KAAK,IAAI;EAC9C,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACV,OAAO,EAAE;IAC7B,MAAM,IAAIO,KAAK,CAAE,+DAA8D,CAAC;EACjF;EAEA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACF,KAAK,CAACV,OAAO,CAAC,IAAIU,KAAK,CAACV,OAAO,CAACa,IAAI,CAACC,IAAI,IAAI,EAAEA,IAAI,YAAYC,MAAM,CAAC,CAAC,EAAE;IAC3F,MAAM,IAAIR,KAAK,CAAE,yDAAwD,CAAC;EAC3E;EAEA,IAAIG,KAAK,CAACT,OAAO,KAAK,CAACU,KAAK,CAACC,OAAO,CAACF,KAAK,CAACT,OAAO,CAAC,IAAIS,KAAK,CAACT,OAAO,CAACY,IAAI,CAACC,IAAI,IAAI,EAAEA,IAAI,YAAYC,MAAM,CAAC,CAAC,CAAC,EAAE;IAC9G,MAAM,IAAIR,KAAK,CAAE,yDAAwD,CAAC;EAC3E;EAEAG,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,IAAI,EAAE;EACnCF,QAAQ,GAAGW,KAAK;EAChBR,SAAS,CAACc,KAAK,EAAE,CAAC,CAAC;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,GAAG,MAAM;EAC3C,OAAOlB,QAAQ;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmB,wBAAwB,GAAGC,GAAG,IAAI;EACvC,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAACD,GAAG,CAAC,EAAE;IACxB,MAAME,MAAM,GAAGtB,QAAQ,CAACC,OAAO,CAACa,IAAI,CAACC,IAAI,IAAIK,GAAG,CAACb,KAAK,CAACQ,IAAI,CAAC,CAAC,IAAI,CAACf,QAAQ,CAACE,OAAO,CAACY,IAAI,CAACC,IAAI,IAAIK,GAAG,CAACb,KAAK,CAACQ,IAAI,CAAC,CAAC;IAChHZ,SAAS,CAACoB,GAAG,CAACH,GAAG,EAAEE,MAAM,CAAC;EAC3B;EAEA,OAAOnB,SAAS,CAACqB,GAAG,CAACJ,GAAG,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,+BAA+B,GAAGL,GAAG,IAAI;EAC9C,IAAID,wBAAwB,CAACC,GAAG,CAAC,EAAE;IAClC,OAAOX,8BAA8B,EAAE;EACxC;AACD,CAAC;AAED,SACCJ,8BAA8B,EAC9BI,8BAA8B,EAC9BC,6BAA6B,EAC7BQ,6BAA6B,EAC7BC,wBAAwB,EACxBM,+BAA+B"},"metadata":{},"sourceType":"module"}