{"ast":null,"code":"import VersionInfo from \"./generated/VersionInfo.js\";\nimport getSharedResource from \"./getSharedResource.js\";\nlet currentRuntimeIndex;\nlet currentRuntimeAlias = \"\";\nconst compareCache = new Map();\n\n/**\n * Central registry where all runtimes register themselves by pushing an object.\n * The index in the registry servers as an ID for the runtime.\n * @type {*}\n */\nconst Runtimes = getSharedResource(\"Runtimes\", []);\n\n/**\n * Registers the current runtime in the shared runtimes resource registry\n */\nconst registerCurrentRuntime = () => {\n  if (currentRuntimeIndex === undefined) {\n    currentRuntimeIndex = Runtimes.length;\n    Runtimes.push({\n      ...VersionInfo,\n      alias: currentRuntimeAlias,\n      description: `Runtime ${currentRuntimeIndex} - ver ${VersionInfo.version}${currentRuntimeAlias ? ` (${currentRuntimeAlias})` : \"\"}`\n    });\n  }\n};\n\n/**\n * Returns the index of the current runtime's object in the shared runtimes resource registry\n * @returns {*}\n */\nconst getCurrentRuntimeIndex = () => {\n  return currentRuntimeIndex;\n};\n\n/**\n * Compares two runtimes and returns 1 if the first is of a bigger version, -1 if the second is of a bigger version, and 0 if equal\n * @param index1 The index of the first runtime to compare\n * @param index2 The index of the second runtime to compare\n * @returns {number}\n */\nconst compareRuntimes = (index1, index2) => {\n  const cacheIndex = `${index1},${index2}`;\n  if (compareCache.has(cacheIndex)) {\n    return compareCache.get(cacheIndex);\n  }\n  const runtime1 = Runtimes[index1];\n  const runtime2 = Runtimes[index2];\n  if (!runtime1 || !runtime2) {\n    throw new Error(\"Invalid runtime index supplied\");\n  }\n\n  // If any of the two is a next version, bigger buildTime wins\n  if (runtime1.isNext || runtime2.isNext) {\n    return runtime1.buildTime - runtime2.buildTime;\n  }\n\n  // If major versions differ, bigger one wins\n  const majorDiff = runtime1.major - runtime2.major;\n  if (majorDiff) {\n    return majorDiff;\n  }\n\n  // If minor versions differ, bigger one wins\n  const minorDiff = runtime1.minor - runtime2.minor;\n  if (minorDiff) {\n    return minorDiff;\n  }\n\n  // If patch versions differ, bigger one wins\n  const patchDiff = runtime1.patch - runtime2.patch;\n  if (patchDiff) {\n    return patchDiff;\n  }\n\n  // Bigger suffix wins, f.e. rc10 > rc9\n  // Important: suffix is alphanumeric, must use natural compare\n  const collator = new Intl.Collator(undefined, {\n    numeric: true,\n    sensitivity: \"base\"\n  });\n  const result = collator.compare(runtime1.suffix, runtime2.suffix);\n  compareCache.set(cacheIndex, result);\n  return result;\n};\n\n/**\n * Set an alias for the the current app/library/microfrontend which will appear in debug messages and console warnings\n * @param alias\n */\nconst setRuntimeAlias = alias => {\n  currentRuntimeAlias = alias;\n};\nconst getAllRuntimes = () => {\n  return Runtimes;\n};\nexport { getCurrentRuntimeIndex, registerCurrentRuntime, compareRuntimes, setRuntimeAlias, getAllRuntimes };","map":{"version":3,"names":["VersionInfo","getSharedResource","currentRuntimeIndex","currentRuntimeAlias","compareCache","Map","Runtimes","registerCurrentRuntime","undefined","length","push","alias","description","version","getCurrentRuntimeIndex","compareRuntimes","index1","index2","cacheIndex","has","get","runtime1","runtime2","Error","isNext","buildTime","majorDiff","major","minorDiff","minor","patchDiff","patch","collator","Intl","Collator","numeric","sensitivity","result","compare","suffix","set","setRuntimeAlias","getAllRuntimes"],"sources":["/home/user/projects/reactwithcap01/reactmodule01/node_modules/@ui5/webcomponents-base/dist/Runtimes.js"],"sourcesContent":["import VersionInfo from \"./generated/VersionInfo.js\";\nimport getSharedResource from \"./getSharedResource.js\";\n\nlet currentRuntimeIndex;\nlet currentRuntimeAlias = \"\";\n\nconst compareCache = new Map();\n\n/**\n * Central registry where all runtimes register themselves by pushing an object.\n * The index in the registry servers as an ID for the runtime.\n * @type {*}\n */\nconst Runtimes = getSharedResource(\"Runtimes\", []);\n\n/**\n * Registers the current runtime in the shared runtimes resource registry\n */\nconst registerCurrentRuntime = () => {\n\tif (currentRuntimeIndex === undefined) {\n\t\tcurrentRuntimeIndex = Runtimes.length;\n\t\tRuntimes.push({\n\t\t\t...VersionInfo,\n\t\t\talias: currentRuntimeAlias,\n\t\t\tdescription: `Runtime ${currentRuntimeIndex} - ver ${VersionInfo.version}${currentRuntimeAlias ? ` (${currentRuntimeAlias})` : \"\"}`,\n\t\t});\n\t}\n};\n\n/**\n * Returns the index of the current runtime's object in the shared runtimes resource registry\n * @returns {*}\n */\nconst getCurrentRuntimeIndex = () => {\n\treturn currentRuntimeIndex;\n};\n\n/**\n * Compares two runtimes and returns 1 if the first is of a bigger version, -1 if the second is of a bigger version, and 0 if equal\n * @param index1 The index of the first runtime to compare\n * @param index2 The index of the second runtime to compare\n * @returns {number}\n */\nconst compareRuntimes = (index1, index2) => {\n\tconst cacheIndex = `${index1},${index2}`;\n\tif (compareCache.has(cacheIndex)) {\n\t\treturn compareCache.get(cacheIndex);\n\t}\n\n\tconst runtime1 = Runtimes[index1];\n\tconst runtime2 = Runtimes[index2];\n\n\tif (!runtime1 || !runtime2) {\n\t\tthrow new Error(\"Invalid runtime index supplied\");\n\t}\n\n\t// If any of the two is a next version, bigger buildTime wins\n\tif (runtime1.isNext || runtime2.isNext) {\n\t\treturn runtime1.buildTime - runtime2.buildTime;\n\t}\n\n\t// If major versions differ, bigger one wins\n\tconst majorDiff = runtime1.major - runtime2.major;\n\tif (majorDiff) {\n\t\treturn majorDiff;\n\t}\n\n\t// If minor versions differ, bigger one wins\n\tconst minorDiff = runtime1.minor - runtime2.minor;\n\tif (minorDiff) {\n\t\treturn minorDiff;\n\t}\n\n\t// If patch versions differ, bigger one wins\n\tconst patchDiff = runtime1.patch - runtime2.patch;\n\tif (patchDiff) {\n\t\treturn patchDiff;\n\t}\n\n\t// Bigger suffix wins, f.e. rc10 > rc9\n\t// Important: suffix is alphanumeric, must use natural compare\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: \"base\" });\n\tconst result = collator.compare(runtime1.suffix, runtime2.suffix);\n\n\tcompareCache.set(cacheIndex, result);\n\treturn result;\n};\n\n/**\n * Set an alias for the the current app/library/microfrontend which will appear in debug messages and console warnings\n * @param alias\n */\nconst setRuntimeAlias = alias => {\n\tcurrentRuntimeAlias = alias;\n};\n\nconst getAllRuntimes = () => {\n\treturn Runtimes;\n};\n\nexport {\n\tgetCurrentRuntimeIndex,\n\tregisterCurrentRuntime,\n\tcompareRuntimes,\n\tsetRuntimeAlias,\n\tgetAllRuntimes,\n};\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,4BAA4B;AACpD,OAAOC,iBAAiB,MAAM,wBAAwB;AAEtD,IAAIC,mBAAmB;AACvB,IAAIC,mBAAmB,GAAG,EAAE;AAE5B,MAAMC,YAAY,GAAG,IAAIC,GAAG,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGL,iBAAiB,CAAC,UAAU,EAAE,EAAE,CAAC;;AAElD;AACA;AACA;AACA,MAAMM,sBAAsB,GAAG,MAAM;EACpC,IAAIL,mBAAmB,KAAKM,SAAS,EAAE;IACtCN,mBAAmB,GAAGI,QAAQ,CAACG,MAAM;IACrCH,QAAQ,CAACI,IAAI,CAAC;MACb,GAAGV,WAAW;MACdW,KAAK,EAAER,mBAAmB;MAC1BS,WAAW,EAAG,WAAUV,mBAAoB,UAASF,WAAW,CAACa,OAAQ,GAAEV,mBAAmB,GAAI,KAAIA,mBAAoB,GAAE,GAAG,EAAG;IACnI,CAAC,CAAC;EACH;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMW,sBAAsB,GAAG,MAAM;EACpC,OAAOZ,mBAAmB;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,eAAe,GAAG,CAACC,MAAM,EAAEC,MAAM,KAAK;EAC3C,MAAMC,UAAU,GAAI,GAAEF,MAAO,IAAGC,MAAO,EAAC;EACxC,IAAIb,YAAY,CAACe,GAAG,CAACD,UAAU,CAAC,EAAE;IACjC,OAAOd,YAAY,CAACgB,GAAG,CAACF,UAAU,CAAC;EACpC;EAEA,MAAMG,QAAQ,GAAGf,QAAQ,CAACU,MAAM,CAAC;EACjC,MAAMM,QAAQ,GAAGhB,QAAQ,CAACW,MAAM,CAAC;EAEjC,IAAI,CAACI,QAAQ,IAAI,CAACC,QAAQ,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EAClD;;EAEA;EACA,IAAIF,QAAQ,CAACG,MAAM,IAAIF,QAAQ,CAACE,MAAM,EAAE;IACvC,OAAOH,QAAQ,CAACI,SAAS,GAAGH,QAAQ,CAACG,SAAS;EAC/C;;EAEA;EACA,MAAMC,SAAS,GAAGL,QAAQ,CAACM,KAAK,GAAGL,QAAQ,CAACK,KAAK;EACjD,IAAID,SAAS,EAAE;IACd,OAAOA,SAAS;EACjB;;EAEA;EACA,MAAME,SAAS,GAAGP,QAAQ,CAACQ,KAAK,GAAGP,QAAQ,CAACO,KAAK;EACjD,IAAID,SAAS,EAAE;IACd,OAAOA,SAAS;EACjB;;EAEA;EACA,MAAME,SAAS,GAAGT,QAAQ,CAACU,KAAK,GAAGT,QAAQ,CAACS,KAAK;EACjD,IAAID,SAAS,EAAE;IACd,OAAOA,SAAS;EACjB;;EAEA;EACA;EACA,MAAME,QAAQ,GAAG,IAAIC,IAAI,CAACC,QAAQ,CAAC1B,SAAS,EAAE;IAAE2B,OAAO,EAAE,IAAI;IAAEC,WAAW,EAAE;EAAO,CAAC,CAAC;EACrF,MAAMC,MAAM,GAAGL,QAAQ,CAACM,OAAO,CAACjB,QAAQ,CAACkB,MAAM,EAAEjB,QAAQ,CAACiB,MAAM,CAAC;EAEjEnC,YAAY,CAACoC,GAAG,CAACtB,UAAU,EAAEmB,MAAM,CAAC;EACpC,OAAOA,MAAM;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMI,eAAe,GAAG9B,KAAK,IAAI;EAChCR,mBAAmB,GAAGQ,KAAK;AAC5B,CAAC;AAED,MAAM+B,cAAc,GAAG,MAAM;EAC5B,OAAOpC,QAAQ;AAChB,CAAC;AAED,SACCQ,sBAAsB,EACtBP,sBAAsB,EACtBQ,eAAe,EACf0B,eAAe,EACfC,cAAc"},"metadata":{},"sourceType":"module"}